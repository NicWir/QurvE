[{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"navigation-bar","dir":"Articles","previous_headings":"","what":"Navigation Bar","title":"QurvE App User Manual v.1.1","text":"QurvE navigation bar.  Data: Load experimental data. Use either one several available parsers common cultivation devices provide data custom format. Computation: Run computational workflows entire growth fluorescence datasets perform curve fitting dose-response analyses. menu becomes available successful data parsing. Validation: Confirm accuracy fits sample re-run individual fits adjusted parameters. Results: View tabular summaries computational results, including calculated growth fluorescence curve parameters results dose-response analyses. Visualization: Compare samples conditions visualize computational results using series plots. Report: Create PDF HTML report summarizing results growth fluorescence curve analysis workflow. Data Export: Save raw data, computational results, fitting options .RData object storage distribution. Data Import: Load previously exported dataset .RData format.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading Data","title":"QurvE App User Manual v.1.1","text":"QurvE allows loading data different formats, growth experiments fluorescence measurements. Data can loaded using custom QurvE data layout, loading raw data various measuring equipment importing previously analyzed datasets.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data-formatted-in-the-custom-qurve-layout","dir":"Articles","previous_headings":"Loading Data","what":"Loading data formatted in the custom QurvE layout","title":"QurvE App User Manual v.1.1","text":"load data using custom QurvE layout, select [Data] > [Custom] window choose file .xls/.xlsx (selecting appropriate work sheets) .csv/.tsv/.txt format (define correct decimal separator , .csv, field separator target file). custom QurvE layout includes data relative metadata necessary QurvE perform analysis. custom layout can used load growth fluorescence data. Data second fluorescence channel can used normalize primary fluorescence values addition normalization growth values. data must formatted displayed Figure 1: first row contains ‘Time’, ‘Blank’, sample identifiers (IDs). ID needs identical replicates samples analyzed together within dose-response analysis. ‘Time’ column must positioned first position, ‘Blank’ samples follow arbitrary order. second row contains replicate numbers identical conditions. technical replicates used addition biological replicates, indicate technical replicates identical replicate numbers. Samples identical IDs, replicate numbers, concentration values (applicable) combined average values time point. Leave row empty replicate information available. third row designated contain concentration values perform dose-response analysis, different concentrations compound used experiment. Samples included dose-response analysis identical sample identifiers (first row). Leave row empty concentration information available relevant. Starting fourth row, table must include data ‘Time’, ‘Blank’ different samples. Several experiments can combined single custom dataset. Different experiments differing time values experiment-specific blanks distinguished individual ‘Time’ column left dataset. Blank values (experiment-specific) combined average subtracted remaining values option [Subtract blank] selected. metadata second third row optional perform analysis; metadata available, leave rows empty. data can processed (options indicated order applied data): converting time values, applying calibration equation measurements. subtracting blank values sample measurement, normalizing fluorescence data second fluorescence growth dataset, available. data processing functions optional.  Figure 1: QurvE custom data layout.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-tidy-data","dir":"Articles","previous_headings":"Loading Data","what":"Loading Tidy Data","title":"QurvE App User Manual v.1.1","text":"QurvE Shiny application limited custom QurvE layout; also supports direct loading tidy data, widely used format data science. Tidy data, also known ‘long’ format, standardized way organizing data values within dataset. provides straightforward, flexible structure highly suitable various forms analysis visualization R. upload data tidy format, navigate [Data] > [Custom] window select appropriate file .xls/.xlsx format (specifying relevant worksheets) .csv/.tsv/.txt format (remembering set correct decimal separator , .csv, field separator). Columns required tidy data format: “Time”: row column contains time values observations. “Description”: row column contains sample description. can combination organism condition relevant descriptor. “Values”: row column contains measured values experiment (e.g., optical density, cell count, etc.). “Replicate” (optional): multiple replicate measurements condition (“Description” labels), can indicate replicate number column. “Concentration” (optional): ’s compound added sample, can record concentration column. Upon uploading, QurvE automatically detects data tidy format processes accordingly. Note: QurvE correctly process tidy data, ’s crucial ensure column headers uploaded data match exactly specified . data processing options described previous section available also tidy data. Using tidy data allows leverage power QurvE wide range datasets, increasing versatility analysis pipeline.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data-from-raw-experiment-files","dir":"Articles","previous_headings":"Loading Data","what":"Loading data from raw experiment files","title":"QurvE App User Manual v.1.1","text":"QurvE supports loading directly raw data produced variety proprietary software different growth fluorescence measuring equipment, plate readers micro-bioreactors1. can done [Data] > [Parse Raw Data] window. loading file (1), selecting correct raw data format choosing one available equipments/software (2) assigning extracted read channels growth/fluorescence data (3), user provide mapping information metadata tabular format (.xls/.xlsx/.csv/.tsv/.txt file) (4). mapping file formatted shown Figure 2: first column contains well numbers plate must match sample identifiers raw data file. second column contains ID (.e., organism, condition, etc.) sample. ID needs identical replicates samples analyzed together within dose-response analysis. third column contains replicate numbers identical conditions. technical replicates used addition biological replicates, indicate technical replicates replicate number. Samples identical IDs, replicate numbers, concentration values (applicable) combined average values time point. Leave row empty replicate information available. fourth column designated contain concentration values perform dose-response analysis, different concentrations compound interest used experiment. Leave row empty additional concentration information available. values ‘Blank’ samples combined averages subtracted remaining values option [Subtract blank] chosen. data can processed (options indicated order applied data): converting time values, applying calibration equation measurements. subtracting blank values sample measurement, normalizing fluorescence data second fluorescence growth dataset, available. data processing functions optional.  Figure 2: [Parse Raw Data] window enables loading raw data exported plate reader/bioreactor software. right panel illustrates layout additional mapping file metadata must supplemented analyze establish relationships conditions replicates.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-previously-processed-data","dir":"Articles","previous_headings":"Loading Data","what":"Loading previously processed data","title":"QurvE App User Manual v.1.1","text":"QurvE supports exporting processed data reloading analysis inspection. Previously saved growth fluorescence data .RData format can loaded Data Import window (Figure 3).  Figure 3: figure illustrates [Data Import] window, enables user load previously exported QurvE data files.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"processing-and-analyzing-data-in-qurve","dir":"Articles","previous_headings":"","what":"Processing and analyzing data in QurvE","title":"QurvE App User Manual v.1.1","text":"raw data loaded, QurvE can used process data fitting curves, calculating averages standard deviations replicates, well fitting data different models obtain growth parameters doubling times, yields, etc., dose-response parameters. Moreover, software allows user intuitively create publication-grade plots.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"run-computations","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Run computations","title":"QurvE App User Manual v.1.1","text":"raw data successfully parsed, [Computation] window unlock, enabling user process either Growth Fluorescence data (Figure 4). data can processed using different curve fitting methods, can selected panel left. default fitting options Linear regression fit Non-parametric fit (smooth spline). ticking Parametric fit (available Fluorescence analysis), parametric growth models models fit data. ticking Log-transform time time values transformed Ln(1 + time). Biphasic growth selected, QurvE tries identify second growth phase performing linear regressions non-parametric fits extracts corresponding parameters (e.g., growth rate, lag time second growth phase). Dose-response (EC50) analyses can performed either performing smooth spline fit (response spline fit) response vs. concentration data extracting EC50 concentration midpoint largest smallest response value, applying 20 (parametric) dose-response models choose best model based Akaike information criterion (AIC). computed parameter (e.g., growth rates obtained via linear regression, maximum fluorescence obtained via non-parametric fits…) can chosen response parameter quantify adverse beneficial effects substance. options Log-transform concentration Log-transform response available response spline fits. instances, Ln(x + 1) applied respective values. Additional information methods (global method-specific) fitting options available clicking [?] signs.  Figure 4: [Computation] window enables user define parameters data processing fitting. Growth data fluorescence data must processed separately.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"visualization-and-validation-of-curve-fitting","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Visualization and validation of curve fitting","title":"QurvE App User Manual v.1.1","text":"[Validation] window enables user verify correct fitting growth/fluorescence curves (see Figure 5 example).  Figure 5: Example fitted growth curve [Validation] window. right panel, figure visualizes performed fit. case, red dots dashed line represent linear regression model used calculate maximum growth rate lag time.  Different tabs enable user visualize fit obtained different fitting methods (Linear Fits, Nonparametric fits, etc.). left pane independent samples can selected visualization. contains options modify figure, can exported .png .pdf formats. right pane, [Re-run modified parameters] button enables user modify fitting parameters rerun analysis selected sample obtain new fit updated parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"tabular-overview-of-results","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Tabular overview of results","title":"QurvE App User Manual v.1.1","text":"[Results] window (see Figure 6) enables user obtain overview fitted parameters applied method. ticking [Group average] box user can visualize average ± standard deviation parameters replicates. deselected, parameters every single sample shown. table can exported .csv format clicking [Download table] button.  Figure 6: [Results] window gives tabular overview computed parameters applied fit method well results dose-response analyses.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"visualization-of-results","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Visualization of results","title":"QurvE App User Manual v.1.1","text":"data processed, [Visualization] window enables user visualize data using different plot formats: Group Plots: Plot growth data time multiple conditions plot. [Data type] drop menu allows user define type data (raw data, smoothing splines, normalized fluorescence) visualized curve chart. user can easily select cursor samples/groups plot [Conditions] input. Alternatively, ticking [(De-)select samples based string], user can select exclude samples typing strings include name sample included/excluded. [Plot group averages] box used visualize either averages replicates (± standard deviations) individual samples independently. Moreover, concentration metadata provided loading data, user can (de-)select samples using additional parameters. left pane contains also various options modify figure, can exported .png .pdf formats. Parameter Plots: Plot calculated curve parameters (growth rates, lag times, yields, etc.) different samples bar plot. [Parameter] drop menu allows user select parameter plotted. Samples conditions can (de-)selected via methods described Group Plots. Plot group averages box can used visualize either averages (95% confidence intervals) groups individual samples independently. Plot Grid: Plot several curves separate panels, coloring background based chosen parameter heatmap-like fashion. [Data type] drop menu allows user define type data visualized curve chart. [Parameter] drop menu allows user select parameter panel backgrounds colored. Samples conditions can (de-)selected via methods described Group Plots. concentration metadata provided loading data, panels can arranged matrix one concentration per row ticking [Sort concentration]. Dose-Response Analysis: Plot results dose-response analyses chosen response parameter y-axis concentration values x-axis. drawn line indicates fit applied data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"export-data-from-qurve","dir":"Articles","previous_headings":"","what":"Export data from QurvE","title":"QurvE App User Manual v.1.1","text":"QurvE enables user export data results different ways: Download Plot: figures plotted within QurvE can exported .png .pdf formats. Please note size exported plots differs figure diplayed within app dependent size QurvE window. size, aspect ratio resolution exported plot can adjusted dedicated [Width], [Height], [DPI] fields Report: [Report] window enables user export computational results figures performed fit single report file .pdf .html format. Data Export: [Data Export] window enables user export processed raw data well computation results fitting options single data container .RData format. Please note modifications figures included exported .RData file, make sure export figures separately. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/troubleshooting.html","id":"dealing-with-outliers","dir":"Articles","previous_headings":"","what":"Dealing with Outliers","title":"Q&A and Troubleshooting","text":"Outliers can significantly affect accuracy reliability growth curve analysis. Identifying addressing outliers essential step using QurvE high-throughput growth curve experiments. section, discuss strategies identify handle outliers data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/troubleshooting.html","id":"identifying-outliers","dir":"Articles","previous_headings":"Dealing with Outliers","what":"Identifying Outliers","title":"Q&A and Troubleshooting","text":"Visual Inspection: Use “Validation” window Shiny app visually inspect growth fluorescence curve corresponding fit. Look irregularities deviations expected growth pattern. Examine Growth Parameters: Plot computed growth fluorescence parameters (e.g., growth rate, lag time, maximum OD, fluorescence increase rate) sample identify unusual values may indicate outlier sample. Bootstrapping: QurvE offers bootstrapping spline fitting, can help estimate uncertainty, validate model, identify potential outliers. Use bootstrapping results assess reliability curve fits.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/troubleshooting.html","id":"handling-outliers","dir":"Articles","previous_headings":"Dealing with Outliers","what":"Handling Outliers","title":"Q&A and Troubleshooting","text":"Modify Fitting Parameters: Adjust fitting parameters [Computation] section Shiny app systematically exclude problematic sections measurements (e.g., outside detection limit instrument). R, can achieved defining values t0, tmax, min.growth, max.growth growth.workflow() fl.workflow() functions Re-run outlier samples: identifying outliers, re-run analysis modified parameters [Validation] panel shiny app. example can achieved within R provided growth curve analysis documentation Data Preprocessing: importing data QurvE, preprocess remove reduce impact outliers. can done using various data cleaning techniques, filtering, interpolation, imputation. Please note preprocessing methods outside scope QurvE.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/troubleshooting.html","id":"q-what-is-the-recommended-sampling-interval-for-different-fitting-methods","dir":"Articles","previous_headings":"","what":"Q: What is the recommended sampling interval for different fitting methods?","title":"Q&A and Troubleshooting","text":": appropriate measurement interval depends organism growth conditions studied. instance, fast-growing organisms like Escherichia coli require shorter sampling intervals least one hour slow-growing organisms like plants can measured every five days. ’s also important note appropriate sampling interval may vary depending specific research question addressed. example, goal study effects particular treatment growth rates diauxic shifts, frequent sampling may necessary capture short-term changes growth. Alternatively, goal assess overall growth patterns longer time frame, less frequent sampling may sufficient. linear fits, recommend least four measurements within mid-log phase growth curves reliably estimate growth rates. using smoothing splines low measurement frequency, bioreactor fermentations shaken flask experiments, can increase smoothing factor make fit less susceptible outliers.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"general introduction package, see vignette Quantitiative Growth Curve Evaluation Package QurvE. vignette show use QurvE analyze datasets fluorescence measurements taken time, well extract important results. Fluorescent reporter proteins widely used study mechanisms gene regulation develop biosensors allow detection chemical compounds provide insights intracellular environment. workflow analyzing fluorescence data works analogously analyzing growth data following scheme read data execute workflow. package allows users select either time growth data (e.g. simultaneous measurement cell density fluorescence intensity plate reader experiments) independent variable. Additionally, biosensors can characterized via dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"fluorescence-profiling-methods","dir":"Articles","previous_headings":"","what":"Fluorescence profiling methods","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"QurvE offers curve evaluation methods fluorescence data growth data, exception fitting growth models. calculation algorithms linear regression nonparametric fits (smoothing splines) well default parameters empirically adjusted account differences curve shapes commonly seen fluorescence data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"dose-response-analysis-methods","dir":"Articles","previous_headings":"","what":"Dose-response analysis methods","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Dose response analysis useful method evaluating performance biosensor. Biosensors typically designed respond specific chemical compounds, strength response often depends concentration target compound. Dose-response analysis can used determine concentration target compound elicits half-maximal response biosensor (variants), half-maximal effective concentration (EC50). allows evaluation sensitivity specificity biosensor can used optimize design particular application. addition evaluating performance biosensors, dose-response analysis can also used study mechanisms gene regulation biological systems. measuring response biological system different concentrations chemical compound, researchers can gain insights genes pathways involved response, can identify potential targets drug discovery. QurvE provides two methods perform dose-response analyses fluorescence data: Perform smooth spline fit response vs. concentration data extract EC50 concentration midpoint largest smallest response value. Apply biosensor response model response vs. concentration data (Meyer et al., 2019).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"run-a-complete-fluorescence-analysis-workflow","dir":"Articles","previous_headings":"","what":"Run a complete fluorescence analysis workflow","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Load package: Next, load experimental data. example, dataset used preliminary characterization different versions SEVA (Standard European Vector Architecture) plasmid pSEVA634, described (Nikel et al., 2022). data contains growth fluorescence measurements converted custom QurvE data format located different work sheets XLSX file:","code":"library(QurvE)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"load-data","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Load data","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"two functions read_data() parse_data() come arguments give user control loading fluorescence data. growth data, arguments data.fl (file path), csvsep.fl (separator symbol CSV file), dec.fl (decimal separator), sheet.fl (Excel file worksheet number “name”) provide details data stored. calib.fl allows defining equation transform fluorescence values. Similarly, functions accept arguments data.fl2, csvsep.fl2, dec.fl2, sheet.fl2, calib.fl2 load data second fluorescence channel. second fluorescence currently used normalize first fluorescence values, applied …ADD CITATION… Normalization fluorescence, , can controlled via fl.normtype performed either dividing growth values (fl.normtype = 'growth') fluorescence 2 fl.normtype = 'fl2'. can inspect structure input object class grodata:","code":"input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\",     package = \"QurvE\"), sheet.growth = 1, data.fl = system.file(\"lac_promoters.xlsx\",     package = \"QurvE\"), sheet.fl = 2, fl.normtype = \"growth\")  # normalize fluorescence to growth data summary(input) #>                   Length Class      Mode    #> time              1785   -none-     numeric #> growth              88   data.frame list    #> fluorescence        88   data.frame list    #> norm.fluorescence   88   data.frame list    #> expdesign            4   data.frame list"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"plot-raw-data","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Plot raw data","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Raw data plot. Conditions can selected deselected using names = c('grp1', 'grp2') argument exclude.nm = c('grp3', 'grp4') argument, respectively. Similarly, concentrations can (de-selected) via conc exclude.conc arguments. plot individual samples instead grouping replicates, add mean = FALSE. See ?plot.grodata options.","code":"plot(input, data.type = \"fl\",      exclude.conc = c(0.5, 0.1),      log.y = FALSE,      legend.position = \"bottom\",      basesize = 10,      legend.ncol = 3,      lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"run-workflow","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Run Workflow","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"option export.res set TRUE, tab-delimited .txt files summarizing computation results created automatically, well flFitRes object (object class flFitRes) .RData file. object (.RData file) contains raw data, fitting options, computational results. Figure @ref(fig:flFitRes-container) shows structure generated flFitRes object. RStudio, View(flFitRes) allows interactive inspection data container. want create report summarizing computational results including graphical representation every fit, provide desired output format(s) report = 'pdf', report = 'html', report = c('pdf', 'html'). advantage report HTML format every figure can exported (editable) PDF file. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication. Arguments commonly modified: Please consult ?fl.workflow arguments customize workflow. Internal structure flFitResobject generated growth.workflow().","code":"flFitRes <- fl.workflow(grodata = input,      fit.opt = c(\"s\", \"l\"),     x_type = \"time\",      norm_fl = TRUE,      ec50 = TRUE,      dr.parameter = \"dY.spline\",     suppress.messages = TRUE,      export.res = FALSE, # Prevent creating TXT table and RData files with results     parallelize = FALSE) # Use only one available CPU core"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"tabular-results","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Tabular results","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"flFitRes object contains two tables summarizing computational results: - flFitRes$flFit$flable lists calculated curve parameters every sample fit - flFitRes$drFit$drTable contains results dose-response analysis Additionally, dedicated functions table_group_fluorescence_linear() table_group_fluorescence_spline() allow generation grouped results tables two fit types averages standard deviations. column headers resulting data frames formatted HTML visualization shiny DT::datatable(). summary results individual fit can obtained applying generic function summary() fit object within flFitRes.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"visualize-results","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Visualize results","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Several generic plot() allow plotting results merely accessing list items within flFitRes object structure (Figure @ref(fig:flFitRes-container)).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"inspect-individual-fits","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Inspect individual fits","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"important verify accuracy fits applied attempting interpret results (workflow run interactive = TRUE. especially important analyzing fluorescence data, curve shapes level noise can vary significantly depending specific experiment equipment used cultivation. Linear fit plots validate applied fits. details function, run ?plot.gcFitLinear. Spline fit plots validate applied fits. details function, run ?plot.gcFitLinear. Normalization fluorescence reads typically introduces additional noise. default smoothing parameter smooth.fl suitable produce good-quality representations curves via nonparametric fits, linear fits either failed produced regression windows small. order obtain linear regression results accurately represent linear-increase section curves, decrease R2 threshold manually increase size sliding window (default calculated automatically sample). new settings need applied samples, re-run entire workflow adjusted parameters: Linear fit plots validate linear regressions re-running workflow adjusted parameters.","code":"plot(flFitRes$flFit$flFittedLinear[[1]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[3]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[6]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedSpline[[1]], basesize = 15) plot(flFitRes$flFit$flFittedSpline[[3]], basesize = 15) plot(flFitRes$flFit$flFittedSpline[[6]], basesize = 15) flFitRes <- fl.workflow(grodata = input,                           fit.opt = c(\"s\", \"l\"),                           x_type = \"time\",                           norm_fl = TRUE,                           lin.R2 = 0.95, # Decreased R2 threshold                           lin.h = 20, # Manually defined sliding window size                           ec50 = TRUE,                           dr.parameter = \"dY.spline\",                           suppress.messages = TRUE,                           export.res = FALSE,                           parallelize = FALSE) plot(flFitRes$flFit$flFittedLinear[[1]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[3]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[6]], cex.lab = 1.2, cex.axis = 1.2)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"grouped-spline-fits","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Grouped spline fits","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Applying plot() flFitRes object produces figure spline fits performed well first derivative (slope) time. generic function calls plot.flFitRes() data.type = 'spline'. Combined plot spline fits performed. addition options available data.type = 'raw', arguments can defined control appearance secondary panel showing slope time. See ?plot.flFitRes options. arranging individual samples grid, can create visual representation similar heat map illustrates values chosen parameter. can helpful way gain insights understand trends within data.: Plot grid spline fits performed one concentration per row. See ?plot.grid available options.","code":"plot(flFitRes,      data.type = \"spline\",      deriv = TRUE,      legend.position = \"bottom\",      legend.ncol = 3,      n.ybreaks = 10,      basesize=10,      lwd = 0.7) plot.grid(flFitRes,           param = \"max_slope.spline\",           pal = \"Mint\",           log.y = FALSE,           basesize = 12)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"compare-growth-parameters","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Compare growth parameters","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"function plot.parameter() works also flFitRes objects compare computed curve parameters: Parameter plots. mean = TRUE, results replicates combined shown mean ± 95% confidence interval. functions combining different growth curves, arguments name, exclude.nm, conc exclude.conc allow (de)selection specific samples conditions. Since applied growth models log-transformed data, calling ‘dY.orig.model’ ‘.orig.model’ instead ‘dY.model’ ‘.model’ provides respective values original scale. linear spline fits, done automatically. details function, run ?plot.parameter.","code":"# Parameters obtained from linear regression plot.parameter(flFitRes, param = \"max_slope.linfit\", basesize = 10,     legend.position = \"bottom\") plot.parameter(flFitRes, param = \"dY.linfit\", basesize = 10,     legend.position = \"bottom\")  # Parameters obtained from nonparametric fits plot.parameter(flFitRes, param = \"max_slope.spline\", basesize = 10,     legend.position = \"bottom\") plot.parameter(flFitRes, param = \"dY.spline\", basesize = 10,     legend.position = \"bottom\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"dose-response-analysis","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Dose-response analysis","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"results dose-response analysis can visualized calling plot() drFit object stored within flFitRes. action calls plot.drFit() turn runs plot.drFitSpline() plot.drFitModel() (depending choice workflow) every condition dose-response analysis performed. Alternatively, can call plot() list elements grofit$drFit$drFittedModels grofit$drFit$drFittedSplines, respectively. Dose response analysis - model fits. details function, run ?plot.drFit.","code":"plot(flFitRes$drFit, cex.point = 1, cex.lab = 1.1, cex.axis = 1)"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"virtually disciplines biology dealing living organisms, classical microbiology applied biotechnology, routine characterize growth species study. QurvE provides suite analysis tools make growth profiling quick, efficient, reproducible. addition, allows characterization fluorescence data , e.g., biosensor characterization plate reader experiments (discussed vignette Quantitiative Fluorescence Curve Evaluation Package QurvE). computational steps obtain -depth characterization combined user-friendly workflow functions range plotting functions allow visualization fits comparison organism performances. physiological parameter calculated (e.g., growth rate µ, doubling time tD, lag time \\(\\lambda\\), growth measurement increase \\(\\Delta\\)Y, equivalent fluorescence parameters) can used perform dose-response analysis determine half-maximal effective concentration (EC50). package build foundation two R packages Kahm et al. (2010) Petzoldt (2022). QurvE designed usable minimal prior knowledge R programming language programming general. need familiar idea running commands console writing basic scripts. R beginners, great starting point, good resources suggest using RStudio application. provides environment writing running R code. consideration R novices, QurvE establishes framework complete, detailed growth curve analysis can performed two simple steps: Read data custom tidy format, parse data plate reader experiment. Run workflow, including fitting growth curves, dose-response analysis, rendering report summarizes results. computational results workflow stored data container (list) can visualized passing generic function plot(list_object). QurvE extends user’s control fits defining thresholds quality criteria, allows direct parsing data plate reader result files, calculates parameters additional growth phase (bi-phasic growth).","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"release-version","dir":"Articles","previous_headings":"Installation","what":"Release version","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"recent release version can found CRAN:","code":"install.packages(\"QurvE\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"development-version","dir":"Articles","previous_headings":"Installation","what":"Development version","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Install current version package devtools:","code":"install.packages(\"devtools\") library(devtools) install_github(\"NicWir/QurvE\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny app","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE features graphical user interface (GUI) developed Shiny app, designed user-friendly intuitive. can start app running: See QurvE User Manual details use front-end application.","code":"QurvE::run_app()"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"growth-profiling-methods","dir":"Articles","previous_headings":"","what":"Growth profiling methods","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Three methods available characterize growth curves: Fit parametric growth models (log-transformed) growth data Determine maximum growth rates (µmax) log-linear part growth curve using heuristic approach proposed “growth rates made easy”-method Hall et al. (2014). , QurvE uses code package Petzoldt (2022), adds user-defined thresholds () R2 values linear fits, (ii) relative standard deviations (RSD) estimates slopes, (iii) minimum fraction total growth value increase (\\(\\Delta\\)Y) regression window cover considered analysis. thresholds ensure robust reproducible identification linear range best describes growth curve. Additionally, parameters secondary growth phase can extracted bi-linear growth curves.1 algorithm works follows: Fit linear regressions [Theil-Sen estimator (Sen, 1968; Theil, 1992)] subsets h consecutive, log-transformed data points (sliding window size h). , example, h=5, fit linear regression points 1 \\(\\dots\\) 5, 2 \\(\\dots\\) 6, 3 \\(\\dots\\) 7 forth. Find subset highest slope \\(\\mu_{max}\\). R2 RSD values regression meet defined thresholds data points within regression window account least defined fraction total growth measurement increase? , evaluate regression second highest slope, forth. Include also data points adjacent subsets slope least \\(defined \\space quota \\times \\mu_{max}\\), e.g., regression windows least 95% maximum slope. Fit new linear model extended data window identified step iii. biphasic = TRUE (see section @ref(run-workflow)), following steps performed define second growth phase: Perform smooth spline fit data smoothing factor 0.5. Calculate second derivative spline fit perform smooth spline fit derivative smoothing factor 0.4. Determine local maxima minima second derivative. Find local minimum following \\(\\mu_{max}\\) repeat heuristic linear method later time values. Find local maximum \\(\\mu_{max}\\) repeat heuristic linear method earlier time values. Choose greater two independently determined slopes \\(\\mu_{max}2\\). Perform smooth spline fit (log-transformed) growth data extract µmax maximum value first derivative1. biphasic = TRUE (see section @ref(run-workflow)), following steps performed define second growth phase: Determine local minima within first derivative smooth spline fit. Remove ‘peak’ containing highest value first derivative (.e., \\(\\mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(\\mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(\\mu_{max}\\). Choose greater two independently determined slopes \\(\\mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"dose-response-analysis-methods","dir":"Articles","previous_headings":"","what":"Dose-response analysis methods","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"purpose dose-response analysis define sensitivity given organism effects compound potency substance, respectively. effects can either beneficial (e.g., nutrient compound) detrimental (e.g., antibiotic). sensitivity reflected half-maximal effective concentration (EC50), .e., concentration (dose) half-maximal response (e.g., \\(\\mu_{max}\\) \\(\\Delta\\)Y) observed. QurvE provides two methods determine EC50: Perform smooth spline fit response vs. concentration data extract EC50 concentration midpoint largest smallest response value. Apply 20 (parametric) dose-response models response vs. concentration data choose best model based Akaike information criterion (AIC). done using excellent package drc (Ritz et al., 2016).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"data-formats","dir":"Articles","previous_headings":"","what":"Data formats","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE accepts files formats .xls, .xlsx, .csv, .tsv, .txt (tab separated). data files structured shown Figure @ref(fig:data-layout) ‘tidy’ format columns ‘Time’, ‘Description’, ‘Values’ (plus optional: ‘Replicate’ ‘Concentration’). Alternatively, data parsers available allow direct import raw data different culture instruments. list currently supported devices, please run ?parse_data. Please note: recommend always converting .xls .xlsx files alternate format first speed parsing process. Reading Excel files may require orders magnitude longer processing time.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"custom-format","dir":"Articles","previous_headings":"Data formats","what":"Custom format","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"ensure compatibility type measurement data type (e.g., optical density, cell count, measured dimensions), QurvE uses custom data layout. first column contains time values ‘Time’ top cell, cells #2 #3 ignored. remaining columns contain measurement values following sample identifiers top three rows: Sample name; usually combination organism condition, ‘blank’. Replicate number; replicates identified identical names concentration values. one type replicate (biological technical) performed, enter numerical values . biological technical replicates biological replicates performed, technical replicates replicate number. technical replicates combined average value. (optional) Concentration values added compound; information used perform dose-response analysis. Several experiments (e.g., runs different plate readers) can combined single file analyzed simultaneously. Therefore, different experiments marked presence separate time columns. Different lengths values time columns permitted.  read data custom format, run: data.growth argument takes path file name R dataframe object containing experimental data custom format. csvsep specifies separator symbol (required .csv files; default: ';'). dec decimal separator (required .csv, .tsv, .txt files; default: '.'). Excel file format used, sheet.growth specifies number name (quotes) sheet containing data. subtract.blank = TRUE, columns name ‘blank’ combined row-wise average, mean values subtracted measurements remaining samples. calib.growth argument, formula can provided form ‘y = function(x)’ (e.g., calib.growth = 'y = x * 2 + 0.5') transform growth measurement values.","code":"grodata <- read_data(data.growth = 'path_to_data_file',                    csvsep = ';', # or ','                    dec = '.', # or ','                    sheet.growth = 1, # number (or \"name\") of the EXCEL file sheet containing data                    subtract.blank = TRUE,                    calib.growth = NULL)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"tidy-format","dir":"Articles","previous_headings":"Data formats","what":"Tidy format","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE package designed flexible user-friendly, fully compatible data ‘tidy’ format. format, also known ‘long’ format, standard way organizing data suits many types analyses visualizations R. tidy format, row observation column variable. context QurvE, data include following columns: “Time”: column contain time values observations. “Description”: column contain description sample. combination organism condition relevant descriptor. “Values”: column contain measurement values experiment (e.g., optical density, cell count, etc.). “Replicate” (optional): multiple replicate measurements condition (“Description” labels), can indicate replicate number column. “Concentration” (optional): ’s compound interest added sample, can record concentration column. load tidy format data QurvE, use read_data function following way: code block works way custom format described ; QurvE detects automatically data tidy format. sure replace 'path_to_tidy_data_file' path data file. Note: Always ensure data meets tidy data standard. means every variable column, every observation row, every value cell. Additionally, make sure column headers exactly match specified , QurvE look specific headers processing data.","code":"grodata <- read_data(data.growth = 'path_to_tidy_data_file',                    csvsep = ';', # or ','                    dec = '.', # or ','                    sheet.growth = 1, # number (or \"name\") of the EXCEL file sheet containing data                    subtract.blank = TRUE,                    calib.growth = NULL)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"data-parser","dir":"Articles","previous_headings":"Data formats","what":"Data parser","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"data generated culture devices (e.g., plate readers) different manufacturers come different formats. data used directly, must first “parsed” plate reader QurvE standard format. scenario, sample information must provided separate table maps samples respective identifiers.mapping table must following layout (Figure @ref(fig:mapping-layout)): Data parser mapping layout parse data, run: data.file argument takes path file containing experimental data exported culture device, map.file path file mapping information. software, can specify device (software) used generate data. csvsep.data csvsep.map specify separator symbol data mapping file, respectively (required .csv files; default: ';'). dec.data dec.map decimal separator used data mapping file, respectively (required .csv, .tsv, .txt files; default: '.'). Excel file format used one data mapping file, sheet.data /sheet.map specify number name (quotes) sheet containing data mapping information, respectively. Excel file contains data mapping information different worksheets, file path needs specified data.fileand map.file. subtract.blank = TRUE, samples name ‘blank’ combined row-wise average, mean values subtracted measurements remaining samples. argument convert.time accepts function ‘y = function(x)’ transform time values (e.g., convert.time = 'y = x/3600' convert seconds hours). one read type identified provided data file, user prompted specify measurements belong growth, fluorescence, fluorescence2, respectively.","code":"grodata <- parse_data(data.file = 'path_to_data_file',                     map.file = 'path_to_mapping_file',                     software = 'used_software_or_device',                     csvsep.data = ';', # or ','                     dec.data = '.', # or ','                     csvsep.map = ';', # or ','                     dec.map = '.', # or ','                     sheet.data = 1, # number (or \"name\") of the EXCEL file sheet containing data                     sheet.map = 1, # number (or \"name\") of the EXCEL file sheet containing                                    # mapping information                     subtract.blank = TRUE,                     calib.growth = NULL,                     convert.time = NULL)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"run-a-complete-growth-analysis-workflow","dir":"Articles","previous_headings":"","what":"Run a complete growth analysis workflow","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE reduces computational steps required create complete growth profiling two steps, read data run workflow. loading package: load experimental data publication Wirth & Nikel (2021) Pseudomonas putida KT2440 engineered strain tested sensitivity towards product 2-fluoromuconic acid:","code":"library(QurvE)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"load-data","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Load data","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"created object grodata can inspected View(grodata). list class grodata containing: time matrix 66 rows, corresponding one sample dataset, 161 columns, .e., time values sample. growth data frame 66 rows 161+3 columns. three additional columns contain sample identifiers condition, replicate, concentration. fluorescence1 (: NA) fluorescence2 (: NA) norm.fluorescence1 (: NA) norm.fluorescence2 (: NA) expdesign, data frame containing label, condition, replicate, concentration sample: can plot raw data. Applying generic plot() function grodata objects calls function plot.grodata().: Raw data plot. Conditions can selected deselected using names = c('grp1', 'grp2') argument exclude.nm = c('grp3', 'grp4') argument, respectively. Similarly, concentrations can (de-selected) via conc exclude.conc arguments. plot individual samples instead grouping replicates, add mean = FALSE. See ?plot.grodata options.","code":"grodata <- read_data(data.growth = system.file(\"2-FMA_toxicity.csv\",     package = \"QurvE\"), csvsep = \";\") head(grodata$expdesign) #>             label condition replicate concentration #> 1 KT2440 | 1 | 90    KT2440         1            90 #> 2 KT2440 | 1 | 70    KT2440         1            70 #> 3 KT2440 | 1 | 50    KT2440         1            50 #> 4 KT2440 | 1 | 25    KT2440         1            25 #> 5 KT2440 | 1 | 20    KT2440         1            20 #> 6 KT2440 | 1 | 15    KT2440         1            15 plot(grodata, data.type = \"growth\", log.y = FALSE,      x.lim = c(NA, 32), legend.position = \"right\",      exclude.conc = c(50, 70, 90),      basesize = 10, legend.ncol = 1, lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"run-workflow","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Run Workflow","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"perform complete growth profiling samples input dataset, call growth.workflow() function grodata object. supress.messages = TRUE, avoid printing information every sample’s fit sample console. default, selected response parameter perform dose-response analysis ‘mu.linfit’. choose different parameter, provide argument dr.parameter = 'choice'. list appropriate parameters provided within function documentation (?growth.workflow). option export.res set TRUE, tab-delimited .txt files summarizing computation results created, well grofit object (object class grofit) .RData file. object (.RData file) contains raw data, fitting options, computational results. Figure @ref(fig:grofit-container) shows structure generated grofit object. RStudio, View(grofit) allows interactive inspection data container. want create report summarizing computational results including graphical representation every fit, provide desired output format(s) report = 'pdf', report = 'html', report = c('pdf', 'html'). advantage report HTML format every figure can exported (editable) PDF file. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication. Arguments commonly modified: Please consult ?growth.workflow arguments customize workflow. Internal structure grofitobject generated growth.workflow().","code":"grofit <- growth.workflow(grodata = grodata, fit.opt = \"a\", ec50 = TRUE,     suppress.messages = TRUE,      export.res = FALSE, # Prevent creating TXT table and RData files with results     parallelize = FALSE) # Use only one available CPU core"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"tabular-results","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Tabular results","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"grofit object contains two tables summarizing computational results: - grofit$gcFit$gcTable lists calculated physiological parameters every sample fit - grofit$drFit$drTable contains results dose-response analysis TestId AddId concentration reliability_tag used.model log.x log.y.lin log.y.spline 1 KT2440 1 90 TRUE  FALSE TRUE TRUE 2 KT2440 1 70 TRUE  FALSE TRUE TRUE 3 KT2440 1 50 TRUE  FALSE TRUE TRUE log.y.model nboot.gc mu.linfit tD.linfit lambda.linfit dY.linfit 1 TRUE 0 0  0 2 TRUE 0 0  0 3 TRUE 0 0  0 Additionally, dedicated functions table_group_growth_linear(), table_group_growth_model(), table_group_growth_spline() allow generation grouped results tables three fit types averages standard deviations. column headers resulting data frames formatted HTML visualization shiny DT::datatable(). summary results individual fit can obtained applying generic function summary() fit object within grofit.","code":"# show the first three rows and first 14 columns of gcTable gcTable <- grofit$gcFit$gcTable gcTable[1:3, 1:14] # Show drTable. The function as.data.frame() ensures that it is shown in table format. drTable <- as.data.frame(grofit$drFit$drTable)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"visualize-results","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Visualize results","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Several generic plot() methods written allow easy plotting results merely accessing list items within grofit object structure (Figure @ref(fig:grofit-container)).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"grouped-spline-fits","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Grouped spline fits","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Applying plot() grofit object produces figure spline fits performed well first derivative (slope) time. generic function calls plot.grofit() data.type = 'spline' thus, options available described Figure @ref(fig:raw-data-plot). Combined plot spline fits performed. addition options available data.type = 'raw', arguments can defined control appearance secondary panel showing slope time. See ?plot.grofit options.","code":"plot(grofit,      data.type = \"spline\",      log.y = TRUE,      deriv = TRUE,      conc = c(0,5,10,15,20),      legend.position = \"right\",      legend.ncol = 1,      x.lim = c(NA, 32),      y.lim = c(0.01,NA),      n.ybreaks = 10,      basesize=10,      lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"compare-growth-parameters","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Compare growth parameters","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"convenient way compare performance different organisms different conditions plot calculated growth parameters means function plot.parameter(). Parameter plots. mean = TRUE, results replicates combined shown mean ± 95% confidence interval. functions combining different growth curves, arguments name, exclude.nm, conc exclude.conc allow (de)selection specific samples conditions. Since applied growth models log-transformed data, calling ‘dY.orig.model’ ‘.orig.model’ instead ‘dY.model’ ‘.model’ provides respective values original scale. linear spline fits, done automatically. details function, run ?plot.parameter. parameter plot ´mu.linfit´ (growth rates determined linear regression), can see outlier strain KT2440 concentration 0. can plot individual fits condition find due fit quality: Linear fit plots identify sample outliers. details function, run ?plot.gcFitLinear. Apparently, algorithm find maximum slope growth curve standard threshold lin.R2 = 0.97 find appropriate fit within first stage growth due insufficient linearity. can manually re-run fit sample adjusted parameters. Thereby, lower R2 threshold increase size sliding window cover larger fraction growth curve. , update respective entries gcTable object summarizes fitting results (plot.parameter() accesses extract relevant data). generic function summary(), applied fit object single sample within grofit, provides required parameters update table. Lastly, also re-run dose-response analysis since ‘mu.linfit’ used response parameter (default), including erroneous value. Note: process manually updating grofitelements adjusted fits can avoided re-running growth.workflow adjusted global parameters running workflow interactive mode (interactive = TRUE). interactive mode, individual fit printed user can decide re-run single fit adjusted parameters. can validate quality updated fit: Updated linear fit outlier sample ‘KT2440 | 2 | 0’. looks better! Parameter plot updated fit.","code":"# Parameters obtained from linear regression plot.parameter(grofit, param = \"mu.linfit\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.linfit\", basesize = 10, legend.position = \"bottom\")  # Parameters obtained from nonparametric fits plot.parameter(grofit, param = \"mu.spline\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.spline\", basesize = 10, legend.position = \"bottom\")  # Parameters obtained from model fits plot.parameter(grofit, param = \"mu.model\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.orig.model\", basesize = 10,     legend.position = \"bottom\") plot(grofit$gcFit$gcFittedLinear$`KT2440 | 1 | 0`, cex.lab = 1.2,     cex.axis = 1.2) plot(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`, cex.lab = 1.2,     cex.axis = 1.2) # Replace the existing linear fit entry for sample `KT2440 | 2 | 0` # with a new fit grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0` <-   growth.gcFitLinear(time = grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`$raw.time,                      data = grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`$raw.data,                      control = growth.control(lin.R2 = 0.95, lin.h = 10))  # extract row index of sample `KT2440 | 2 | 0` ndx.row <- grep(\"KT2440 \\\\| 2 \\\\| 0\", grofit$expdesign$label)  # get column indices of linear fit parameters (\".linfit\") ndx.col <- grep(\"\\\\.linfit\", colnames(grofit$gcFit$gcTable) )  # Replace previous growth parameters stored in gcTable grofit$gcFit$gcTable[ndx.row, ndx.col] <-   summary(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`)  # Replace existing dose-response analysis with new fit grofit$drFit <- growth.drFit(   gcTable = grofit$gcFit$gcTable,   control = grofit$control) # we can copy the control object from the original workflow. plot(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`, cex.lab = 1.2) # Parameters obtained from linear regression plot.parameter(grofit, param = \"mu.linfit\", basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"plot-grids","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Plot grids","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"arranging individual samples grid, can create visual representation similar heat map illustrates values chosen parameter. can helpful way gain insights understand trends within data.: Plot grid spline fits performed . See ?plot.grid available options.","code":"plot.grid(grofit,            param = \"mu.linfit\",            pal = \"Mint\",            log.y = FALSE,           sort_by_conc = FALSE,           basesize = 9)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"dose-response-analysis","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Dose-response analysis","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"results dose-response analysis can visualized calling plot() drFit object stored within grofit. action calls plot.drFit() turn runs plot.drFitSpline() plot.drFitModel() (depending choice dr.method workflow) every condition dose-response analysis performed. Alternatively, can call plot() list elements grofit$drFit$drFittedModels grofit$drFit$drFittedSplines, respectively. Dose response analysis - model fits. details function, run ?plot.drFit.","code":"plot(grofit$drFit, cex.point = 1, basesize = 12)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"bootstrapping","dir":"Articles","previous_headings":"","what":"Bootstrapping","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"growth experiments performed larger scale manual growth measurements, technical deviations can result outliers. outliers can lead distortion curve fits, especially fewer data points available usual plate reading experiments. instance, bootstrapping can provide realistic estimation growth parameters. Bootstrapping statistical procedure resamples single dataset create many simulated samples. done randomly drawing data points dataset replacement original number data points reached. analysis (: growth fitting) performed individually bootstrapped replicate. variation resulting estimated parameters reasonable approximation variance parameters. include bootstrapping QurvE workflow, define argument nboot.gc. Similarly, can include bootstrapping dose-response analysis done dr.method = 'spline' defining argument nboot.dr. plot results growth fit bootstrapping, call plot() gcBootSpline object: Nonparametric growth fit bootstrapping. details function, run ?plot.gcBootSpline. applying plot() drBootSpline object, can plot dose-response bootstrap results: Dose-response analysis bootstrapping. details function, run ?plot.drBootSpline.","code":"grofit_bt <- growth.workflow(grodata = grodata,                              fit.opt = \"s\", # perform only nonparametric growth fitting                              nboot.gc = 50,                              ec50 = T,                              dr.method = \"spline\",                              dr.parameter = \"mu.spline\",                              nboot.dr = 50,                              smooth.dr = 0.25,                              suppress.messages = TRUE,                              export.res = F,                              parallelize = FALSE) plot(grofit_bt$gcFit$gcBootSpline[[7]], # Double braces serve as an alternative to                                         # access list items and allow their access by number      combine = TRUE, # combine both growth curves and parameter plots in the same window      lwd = 0.7) plot(grofit_bt$drFit$drBootSpline[[1]],      combine = TRUE, # combine both dose-response curves and parameter plots in the same window      lwd = 0.7)"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas T. Wirth. Author, maintainer, copyright holder. Jonathan Funk. Author.            Co-developer shiny app. Matthias Kahm. Contributor.            Author 'grofit' package, whose general data structure adopted QurvE. Maik Kschischo. Contributor.            Author 'grofit' package, whose general data structure adopted QurvE. Thomas Petzoldt. Contributor.            Creator package 'growthrates', whose function calculating linear regressions served template QurvE. Andrew Stein. Contributor.            Creator 'xgxr' package QurvE adopted code plot axis ticks log10 scale. Michael W. Kearney. Contributor.            Creator 'tfse' package QurvE adopted match_arg function. Santiago . Hurtado. Contributor.            Creator 'RobustLinearReg' package QurvE adopted Theil Sehn Regression method. Mark Heckmann. Contributor.            Creator 'zipFastener' function; source: https://ryouready.wordpress.com/2009/03/27/r-zip-fastener--two-data-frames-combining-rows--columns--two-dataframes---alternating-manner/ Nicholas Hamilton. Contributor.            Creator 'colFmt' function. Evan Friedland. Contributor.            Creator 'inflect' function. Heather Turner. Contributor.            Creator 'base_breaks' function. Georgi N. Boshnakov. Contributor.            Creator 'gbRd' package functions used display function help pages within shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wirth, N.T., Funk, J., Donati, S. et al. QurvE: user-friendly software analysis biological growth fluorescence data. Nat Protoc (2023). https://doi.org/10.1038/s41596-023-00850-7","code":"@Article{,   title = {QurvE: user-friendly software for the analysis of biological growth and fluorescence data},   author = {{Wirth} and {N.T.} and {Funk} and {J.} and {Donati} and S. et al.},   journal = {Nat Protoc},   year = {2023},   url = {https://doi.org/10.1038/s41596-023-00850-7}, }"},{"path":"https://nicwir.github.io/QurvE/index.html","id":"web-application","dir":"","previous_headings":"","what":"Web application","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"Visit QurvE online application","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"deployed-application","dir":"","previous_headings":"","what":"Deployed application","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"Download Windows setup User manual QurvE application","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"r-package","dir":"","previous_headings":"","what":"R package","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"R package CRAN User manual growth curve analysis User manual fluorescence curve analysis shiny application can launched within R via QurvE::run_app().","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"QurvE comes form R package can used create custom workflows application-specific downstream analyses published Comprehensive R Archive Network (CRAN) GitHub. Alternatively, intuitive graphical user interface (GUI) implemented shiny application non-programmers available. app can installed locally Windows computers.","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"issues-and-suggestions","dir":"","previous_headings":"","what":"Issues and Suggestions","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"encounter bugs issues using QurvE, please create Issue Github Issues page write us message. welcome suggestions new features improvements make QurvE useful user-friendly.  Figure: QurvE enables robust, high-throughput analysis growth fluorescence data.() functionalities within QurvE accessible via intuitive graphical user interface created shiny, can installed locally Windows PCs. (b) type biological growth data can analyzed. commonly used cultivation devices, growing list data parser functions allows conversion exported experimental data QurvE-compatible format. single computation workflow, three different types algorithms performed every sample dataset: (c) Five parametric models fit data find equation best describes growth curve. (d) Relevant (log-) linear phases extracted sample perform robust linear regression. (e) representation data points cubic smoothing splines allows extraction growth rates time applies curve shape. (f) Relevant parameters (growth rates, biomass yields, rate fluorescence increase, etc.) can used combination concentration data analyze dose-response relationships. done applying either dose-response models smoothing splines. (g) Dedicated plot functions facilitate fit validation, interpretation results, , due availability numerous customization options, generation suitable publication. (h) computed parameters can exported table files inspected interactively within app. () chosen fitting options well numerical graphical results can compiled reports PDF HTML format promote data transparency good scientific practice. spirit, raw data results can exported single data container form .RData file give researchers access data analysis methods used.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/QurvE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","title":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","text":"High-throughput analysis growth curves fluorescence data using three methods: linear regression, growth model fitting, smooth spline fit. Analysis dose-response relationships via smoothing splines dose-response models. Complete data analysis workflows can executed single step via user-friendly wrapper functions. results workflows summarized detailed reports well intuitively navigable 'R' data containers. 'shiny' application provides access features without requiring programming knowledge. package described detail Wirth et al. (2023) doi:10.1038/s41596-023-00850-7 .","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/QurvE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","text":"Maintainer: Nicolas T. Wirth mail.nicowirth@gmail.com (ORCID) [copyright holder] Authors: Jonathan Funk funk.jonathan21@gmail.com (Co-developer shiny app.) contributors: Matthias Kahm (Author 'grofit' package, whose general data structure adopted QurvE.) [contributor] Maik Kschischo (Author 'grofit' package, whose general data structure adopted QurvE.) [contributor] Thomas Petzoldt thomas.petzoldt@tu-dresden.de (ORCID) (Creator package 'growthrates', whose function calculating linear regressions served template QurvE.) [contributor] Andrew Stein andy.stein@gmail.com (Creator 'xgxr' package QurvE adopted code plot axis ticks log10 scale.) [contributor] Michael W. Kearney kearneymw@missouri.edu (Creator 'tfse' package QurvE adopted match_arg function.) [contributor] Santiago . Hurtado santih@carina.fcaglp.unlp.edu.ar (Creator 'RobustLinearReg' package QurvE adopted Theil Sehn Regression method.) [contributor] Mark Heckmann (Creator 'zipFastener' function; source: https://ryouready.wordpress.com/2009/03/27/r-zip-fastener--two-data-frames-combining-rows--columns--two-dataframes---alternating-manner/) [contributor] Nicholas Hamilton (Creator 'colFmt' function.) [contributor] Evan Friedland (Creator 'inflect' function.) [contributor] Heather Turner (Creator 'base_breaks' function.) [contributor] Georgi N. Boshnakov georgi.boshnakov@manchester.ac.uk (Creator 'gbRd' package functions used display function help pages within shiny app.) [contributor]","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"Calculates values biosensor response model given time points response parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"","code":"biosensor.eq(x, y.min, y.max, K, n)"},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"x vector concentration values y.min minimum fluorescence value y.max maximum fluorescence value K Sensitivity parameter n Cooperativity parameter","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"vector fluorescence values","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"","code":"n <- seq(1:10) conc <- rev(10*(1/2)^n) fit <- biosensor.eq(conc, 300, 82000, 0.85, 2)"},{"path":"https://nicwir.github.io/QurvE/reference/buildTooltipOrPopoverOptionsList.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom tooltip function — buildTooltipOrPopoverOptionsList","title":"Custom tooltip function — buildTooltipOrPopoverOptionsList","text":"function creates custom tooltip given element Shiny application. implementation based shinyBS package.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/buildTooltipOrPopoverOptionsList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom tooltip function — buildTooltipOrPopoverOptionsList","text":"","code":"buildTooltipOrPopoverOptionsList(title, placement, trigger, options, content)"},{"path":"https://nicwir.github.io/QurvE/reference/buildTooltipOrPopoverOptionsList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom tooltip function — buildTooltipOrPopoverOptionsList","text":"title text tooltip's title. placement Placement tooltip. One 'top', 'bottom', 'left', 'right'. trigger events trigger tooltip. One 'click', 'hover', 'focus', 'manual'. options list additional options tooltip. content Optional HTML content tooltip.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/buildTooltipOrPopoverOptionsList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom tooltip function — buildTooltipOrPopoverOptionsList","text":"list tooltip options used Shiny application.","code":""},{"path":[]},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":null,"dir":"Reference","previous_headings":"","what":"Export an R object as .RData file — export_RData","title":"Export an R object as .RData file — export_RData","text":"Export R object .RData file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export an R object as .RData file — export_RData","text":"","code":"export_RData(object, out.dir = tempdir(), out.nm = class(object))"},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export an R object as .RData file — export_RData","text":"object R object. .dir path output directory. Default: working directory .nm output filename (without '.RData' ending). Default: class object followed '.RData'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export an R object as .RData file — export_RData","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export an R object as .RData file — export_RData","text":"","code":"if(interactive()){ df <- data.frame('A' = seq(1:10), 'B' = rev(seq(1:10)))  export_RData(df) }"},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a tabular object as tab-separated .txt file — export_Table","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"Export tabular object tab-separated .txt file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"","code":"export_Table(table, out.dir = tempdir(), out.nm = deparse(substitute(table)))"},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"table tabular R object (dataframe, matrix, array) .dir path output directory. Default: working directory .nm output filename (without '.txt' ending). Default: name table followed '.txt'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"","code":"if(interactive()){ df <- data.frame('A' = seq(1:10), 'B' = rev(seq(1:10)))  export_Table(df) }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a fl.control object. — fl.control","title":"Create a fl.control object. — fl.control","text":"fl.control object required perform various computations fluorescence data stored within grodata objects (created read_data parse_data). fl.control object created automatically part fl.workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a fl.control object. — fl.control","text":"","code":"fl.control(   fit.opt = c(\"l\", \"s\"),   x_type = c(\"growth\", \"time\"),   norm_fl = TRUE,   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.lin = FALSE,   log.x.spline = FALSE,   log.y.lin = FALSE,   log.y.spline = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.05,   lin.dY = 0.05,   dr.parameter = \"max_slope.spline\",   dr.method = c(\"model\", \"spline\"),   dr.have.atleast = 5,   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   biphasic = FALSE,   interactive = FALSE,   nboot.fl = 0,   smooth.fl = 0.75,   growth.thresh = 1.5,   suppress.messages = FALSE,   neg.nan.act = FALSE,   clean.bootstrap = TRUE )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a fl.control object. — fl.control","text":"fit.opt (Character vector strings) Indicates whether program perform linear regression ('l') /spline fit ('s'). Default:  fit.opt = c('l', 's'). x_type (Character) data type shall used independent variable? Options 'growth' 'time'. norm_fl (Logical) use normalized (growth) fluorescence data fits. effect x_type = 'time' t0 (Numeric) Minimum time value considered linear spline fits (x_type = 'time'). tmax (Numeric) Maximum time value considered linear spline fits (x_type = 'time').. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits (x_type = 'growth'). max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits (x_type = 'growth'). log.x.lin (Logical) Indicates whether ln(x+1) applied independent variable linear fits. Default: FALSE. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied fluorescence data linear fits. Default: FALSE log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE lin.h (Numeric) Manually define size sliding window used flFitLinear. NULL, h calculated samples based number measurements fluorescence increase phase plot. lin.R2 (Numeric) R2 threshold flFitLinear. lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope flFitLinear. lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: 'max_slope.spline', represents maximum slope spline fit Typical options include: 'max_slope.linfit', 'dY.linfit', 'max_slope.spline', 'dY.spline'. dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data ('spline') fit biosensor response model 'model' (proposed Meyer et al., 2019). dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? interactive (Logical) Controls whether fit sample method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.fl (Numeric) Number bootstrap samples used nonparametric curve fitting flBootSpline. Use nboot.fl = 0 disable bootstrap. Default: 0 smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. suppress.messages (Logical) Indicates whether messages (information current fluorescence curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. neg.nan.act (Logical) Indicates whether program stop negative fluorescence values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a fl.control object. — fl.control","text":"Generates list arguments described entries.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a fl.control object. — fl.control","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a fl.control object. — fl.control","text":"","code":"# default option control_default <- fl.control() # user defined control_manual <- fl.control(fit.opt = c('s'),                              smooth.fl = 0.6,                              x_type = 'time',                              t0 = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"Fit biosensor model (Meyer et al., 2019) response vs. concentration data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"","code":"fl.drFit(   flTable,   control = fl.control(dr.method = \"model\", dr.parameter = \"max_slope.spline\") )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"flTable dataframe containing data dose-response model estimation. table class flTable can obtained running flFit dr.method = 'model' argument fl.control object. control fl.control object created fl.control, defining relevant fitting options. dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data ('spline') fit biosensor response model 'model' (proposed Meyer et al., 2019). dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: 'max_slope.spline', represents maximum slope spline fit Typical options include: 'max_slope.linfit', 'dY.linfit', 'max_slope.spline', 'dY.spline'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"object class drFit. raw.data Data passed function flTable. drTable Dataframe containing condition identifiers, fit options, results dose-response analysis. drFittedModels List drFitModel objects generated call fl.drFitModel distinct experiment. control Object class fl.control created call fl.control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"Common response parameters used dose-response analysis:Linear fit:- max_slope.linfit: Fluorescence increase rate- lambda.linfit: Lag time- dY.linfit: Maximum Fluorescence - Minimum Fluorescence- .linfit: Maximum fluorescenceSpline fit:- max_slope.spline: Fluorescence increase rate- lambda.spline: Lag time- dY.spline: Maximum Fluorescence - Minimum Fluorescence- .spline: Maximum fluorescence- integral.spline: IntegralParametric fit:- max_slope.model: Fluorescence increase rate- lambda.model: Lag time- dY.model: Maximum Fluorescence - Minimum Fluorescence- .model: Maximum fluorescence- integral.model: Integral'","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"","code":"# \\donttest{ # Load example dataset input <- read_data(data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run fluorescence curve analysis workflow fitres <- flFit(fl_data = input$fluorescence,                 time = input$time,                 parallelize = FALSE,                 control = fl.control(x_type = 'time', norm_fl = FALSE,                                      suppress.messages = TRUE))  # Perform dose-response analysis drFit <- fl.drFit(flTable = fitres$flTable,                   control = fl.control(dr.method = 'model',                                        dr.parameter = 'max_slope.linfit')) #>  #> === Dose-Response Estimation via Model Fit ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 3  #> --> Valid datasets per test:  #>       TestID         Number #>       pSEVA634rκ∙GFP 7      #>       pSEVA634r∙GFP  7      #>       pSEVA634∙GFP   7      #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> pSEVA634rκ∙GFP #> sensitivity: 0.0104 | yEC50: 105 | fold change: 4.72 | leakiness: 36.7 #>  #>  #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> pSEVA634r∙GFP #> sensitivity: 0.0531 | yEC50: 75 | fold change: Inf | leakiness: 0 #>  #>  #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> pSEVA634∙GFP #> sensitivity: 0.0463 | yEC50: 190 | fold change: 11.62 | leakiness: 30.2 #>  #>   # Inspect results summary(drFit) #>             Test log.x log.y     yEC50    y.min    y.max        fc          K #> 1 pSEVA634rκ∙GFP FALSE FALSE 104.83198 36.65873 173.0052  4.719346 0.01035668 #> 2  pSEVA634r∙GFP FALSE FALSE  75.10917  0.00000 150.2183       Inf 0.05312423 #> 3   pSEVA634∙GFP FALSE FALSE 190.27540 30.16190 350.3889 11.616935 0.04626965 #>           n yEC50.orig     K.orig             test #> 1 11.741478  104.83198 0.01035668 max_slope.linfit #> 2  3.383541   75.10917 0.05312423 max_slope.linfit #> 3  1.684636  190.27540 0.04626965 max_slope.linfit plot(drFit)    # }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"fl.drFitModel fits biosensor model proposed Meyer et al. (2019) provided response (e.g., max_slope.spline vs. concentration data determine leakiness, sensitivity, induction fold-change, cooperativity.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"","code":"fl.drFitModel(conc, test, drID = \"undefined\", control = fl.control())"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"drFitFLModel object. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition fit.conc Fitted concentration values. fit.test Fitted response values. model nls object generated nlsLM function. parameters List parameters estimated dose response curve fit. yEC50: Response value related EC50. y.min: Minimum fluorescence ('leakiness', lowest concentration 0). y.max: Maximum fluorescence. fc: Fold change (y.max divided y.min). K: Concentration half-maximal response ('sensitivity'). n: Cooperativity. yEC50.orig: Response value EC50 original scale, transformation applied. K.orig: K original scale, transformation applied. test.nm: Test identifier extracted test. fitFlag (Logical) Indicates whether spline fitted successfully data. reliable (Logical) Indicates whether performed fit reliable (set manually). control Object class fl.control created call fl.control. Use plot.drFitModel visualize model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = 'test', control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.477 | yEC50: 2966 | fold change: 616.98 | leakiness: 9.6 #>  #>   print(summary(TestRun)) #>      yEC50    y.min    y.max      fc         K        n yEC50.orig    K.orig #> 1 2965.737 9.598148 5921.875 616.981 0.4772321 2.079451   2965.737 0.4772321 #>   test #> 1   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"fl.report requires flFitRes object creates report PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"","code":"fl.report(   flFitRes,   out.dir = tempdir(),   out.nm = NULL,   ec50 = FALSE,   format = c(\"pdf\", \"html\"),   export = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"flFitRes grofit object created fl.workflow. .dir (Character) path name folder report files created.  NULL, folder named combination 'Report.fluorescence_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'FluorescenceReport_' current date time. ec50 (Logical) Display results dose-response analysis (TRUE) (FALSE). format (Character) Define file format report, PDF ('pdf') /HTML ('html'). Default: (c('pdf', 'html')) export (Logical) Shall plots generated report exported individual PDF PNG files TRUE FALSE? parallelize (Logical) Create plots using one available processor cores (TRUE) single core (FALSE). ... arguments passed create report. Currently required: mean.grp: Define groups combine common plots report based sample identifiers. Partial matches sample/group names accepted. Can '', vector strings, list string vectors. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc: Define concentrations combine common plots  report. Can numeric vector, list numeric vectors.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"template .Rmd file used within function can found within QurvE package installation directory.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"","code":"# load example dataset if (FALSE) { input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 )  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = 's',                    x_type = 'time', norm_fl = TRUE,                    dr.parameter = 'max_slope.spline',                    suppress.messages = TRUE,                    parallelize = FALSE)  fl.report(res, out.dir = tempdir(), parallelize = FALSE) }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"fl.workflow runs fl.control create fl.control object performs computational fitting operations based user input. Finally, desired, final report created PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"","code":"fl.workflow(   grodata = NULL,   time = NULL,   growth = NULL,   fl_data = NULL,   ec50 = TRUE,   mean.grp = NA,   mean.conc = NA,   fit.opt = c(\"l\", \"s\"),   x_type = c(\"growth\", \"time\"),   norm_fl = TRUE,   t0 = 0,   tmax = NA,   min.growth = 0,   max.growth = NA,   log.x.lin = FALSE,   log.x.spline = FALSE,   log.y.lin = FALSE,   log.y.spline = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.07,   lin.dY = 0.05,   biphasic = FALSE,   interactive = FALSE,   dr.parameter = \"max_slope.spline\",   dr.method = c(\"model\", \"spline\"),   dr.have.atleast = 5,   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   nboot.fl = 0,   smooth.fl = 0.75,   growth.thresh = 1.5,   suppress.messages = FALSE,   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   report = NULL,   out.dir = NULL,   out.nm = NULL,   export.fig = FALSE,   export.res = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"grodata grodata object created read_data parse_data, containing fluorescence data data independent variable (.e., time growth). time (optional) matrix containing time values sample (fl_data dataframe provided separate argument). growth (optional) dataframe containing growth data (fl_data matrix provided separate argument). fl_data (optional) dataframe containing fluorescence data (time matrix growth dataframe provided separate argument). ec50 (Logical) Perform dose-response analysis (TRUE) (FALSE). mean.grp (\"\", string vector, list string vectors) Define groups combine common plots final report based sample identifiers (report == TRUE). Partial matches sample/group names accepted. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option \"\" produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc (numeric vector, list numeric vectors) Define concentrations combine common plots final report (report == TRUE). fit.opt (Character character vector) Indicates whether program perform linear regression (\"l\"), model fit (\"m\"), spline fit (\"s\"), (\"\"). Combinations can freely chosen providing character vector, e.g. fit.opt = c(\"l\", \"s\") Default:  fit.opt = c(\"l\", \"s\"). x_type (Character) data type shall used independent variable? Options 'growth' 'time'. norm_fl (Logical) use normalized (growth) fluorescence data fits. effect x_type = 'time' t0 (Numeric) Minimum time value considered linear spline fits (x_type = 'time'). tmax (Numeric) Maximum time value considered linear spline fits (x_type = 'time').. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits (x_type = 'growth'). max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits (x_type = 'growth'). log.x.lin (Logical) Indicates whether ln(x+1) applied independent variable linear fits. Default: FALSE. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied fluorescence data linear fits. Default: FALSE log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE lin.h (Numeric) Manually define size sliding window used flFitLinear. NULL, h calculated samples based number measurements fluorescence increase phase plot. lin.R2 (Numeric) R2 threshold flFitLinear. lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope flFitLinear. lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? interactive (Logical) Controls whether fit sample method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: \"max_slope.spline\", represents maximum slope spline fit Typical options include: \"max_slope.linfit\", \"dY.linfit\", \"max_slope.spline\", \"dY.spline\". dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data (\"spline\") fit biosensor response model (proposed Meyer et al., 2019). dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. nboot.fl (Numeric) Number bootstrap samples used nonparametric curve fitting flBootSpline. Use nboot.fl = 0 disable bootstrap. Default: 0 smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. suppress.messages (Logical) Indicates whether messages (information current fluorescence curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. neg.nan.act (Logical) Indicates whether program stop negative fluorescence values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. report (Character NULL) Create PDF ('pdf') /HTML ('html') report running computations. Define NULL report created. Default: (c('pdf', 'html')) .dir Character NULL Define name folder result files (tables reports) stored. NULL, folder named combination \"FluorescenceResults_\" current date time. .nm Character NULL Define name report files. NULL, files named combination \"FluorescenceReport_\" current date time. export.fig (Logical) Export figures created report separate PNG PDF files (TRUE) (FALSE). effective report = TRUE. export.res (Logical) Create tab-separated TXT files containing calculated parameters dose-response analysis results well .RData file resulting flFitRes object. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"flFitRes object contains computation results, compatible various plotting functions QurvE package fl.report. time Raw time matrix passed function time (grofit object provided. Else, extracted grofit). data Raw data dataframe passed function grodata. flFit flFit object created call flFit fluorescence data. drFit drFit drFitfl object created call growth.drFit fl.drFit fluorescence data (based dr.method argument control; see fl.control). expdesign Experimental design table inherited grodata created identifier columns (columns 1-3) data. control Object class fl.control created call fl.control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot(res, data.type = \"raw\", legend.ncol = 3, basesize = 15) #> Warning: Derivatives cannot be calculated for 'raw' or 'norm.fl' data. Only the fluorescence values will be shown."},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"flBootSpline: Function to generate a bootstrap — flBootSpline","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"fl.gcBootSpline resamples fluorescence-'x' value pairs dataset replacement performs spline fit bootstrap sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"","code":"flBootSpline(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   control = fl.control() )"},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"time Vector independent variable: time (x_type = 'time' fl.control object. growth Vector independent variable: growth (x_type = 'growth' fl.control object. fl_data Vector dependent variable: fluorescence. ID (Character) name analyzed sample. control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"gcBootSpline object containing distribution fluorescence parameters flFitSpline object bootstrap sample. Use plot.gcBootSpline visualize bootstrapping splines well distribution physiological parameters. raw.x Raw time values provided function time. raw.fl Raw growth data provided function data. ID (Character) Identifies tested sample. boot.x Table time values per column, resulting spline fit bootstrap. boot.fl Table growth values per column, resulting spline fit bootstrap. boot.flSpline List flFitSpline object, created flFitSpline resample bootstrap. lambda Vector estimated lambda (lag time) values bootstrap entry. max_slope Vector estimated max_slope (maximum slope) values bootstrap entry. Vector estimated (maximum fluorescence) values bootstrap entry. integral Vector estimated integral values bootstrap entry. bootFlag (Logical) Indicates success bootstrapping operation. control Object class fl.control containing list options passed function control.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time',                        nboot.fl = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"flFit performs computational fluorescence fitting operations based user input.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"","code":"flFit(   fl_data,   time = NULL,   growth = NULL,   control = fl.control(),   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"fl_data Either... grodata object created read_data parse_data, list containing 'time' matrix (x_type == \"time\") 'growth' dataframe (x_type == \"growth\") 'fluorescence' dataframes, dataframe containing (normalized) fluorescence values (time matrix growth dataframe provided separate argument). time (optional) matrix containing time values sample. growth (optional) dataframe containing growth values sample sample identifiers first three columns. control fl.control object created fl.control, defining relevant fitting options. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"flFit object contains fluorescence fitting results, compatible various plotting functions QurvE package. raw.x Raw x matrix passed function time (x_type = 'time') growth (x_type = 'growth'). raw.fl Raw growth dataframe passed function data. flTable Table fluorescence parameters related statistics fluorescence curve evaluation performed function. table, also returned generic summary.flFit method applied flFit object, used input fl.drFit. flFittedLinear List flFitLinear objects, generated call flFitLinear. Note: access object list via double brace: flFittedLinear[[#n]]. flFittedSplines List flFitSpline objects, generated call flFitSpline. Note: access object via double brace: flFittedSplines[[#n]]. flBootSplines List flBootSpline objects, generated call flBootSpline. Note: access object via double brace: flFittedSplines[[#n]]. control Object class fl.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"Common response parameters used dose-response analysis:Linear fit:- max_slope.linfit: Fluorescence increase rate- lambda.linfit: Lag time- dY.linfit: Maximum Fluorescence - Minimum Fluorescence- .linfit: Maximum fluorescenceSpline fit:- max_slope.spline: Fluorescence increase rate- lambda.spline: Lag time- dY.spline: Maximum Fluorescence - Minimum Fluorescence- .spline: Maximum fluorescence- integral.spline: IntegralParametric fit:- max_slope.model: Fluorescence increase rate- lambda.model: Lag time- dY.model: Maximum Fluorescence - Minimum Fluorescence- .model: Maximum fluorescence- integral.model: Integral'","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = \"s\",              x_type = \"time\", norm_fl = TRUE,              dr.parameter = \"max_slope.spline\",              dr.method = \"model\",              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              control = control,              parallelize = FALSE)  summary(res) #>            TestId AddId concentration reliability_tag log.x.spline log.y.spline #> 1    pSEVA634∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 2   pSEVA634r∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 3  pSEVA634rκ∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 4    pSEVA634∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 5   pSEVA634r∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 6  pSEVA634rκ∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 7    pSEVA634∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 8   pSEVA634r∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 9  pSEVA634rκ∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 10   pSEVA634∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 11  pSEVA634r∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 12 pSEVA634rκ∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 13   pSEVA634∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 14  pSEVA634r∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 15 pSEVA634rκ∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 16   pSEVA634∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 17  pSEVA634r∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 18 pSEVA634rκ∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 19   pSEVA634∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 20  pSEVA634r∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 21 pSEVA634rκ∙GFP  <NA>             1            TRUE        FALSE        FALSE #>    log.x.lin log.y.lin nboot.fl max_slope.linfit lambda.linfit dY.linfit #> 1      FALSE     FALSE        0                0          <NA>      <NA> #> 2      FALSE     FALSE        0                0          <NA>      <NA> #> 3      FALSE     FALSE        0                0          <NA>      <NA> #> 4      FALSE     FALSE        0                0          <NA>      <NA> #> 5      FALSE     FALSE        0                0          <NA>      <NA> #> 6      FALSE     FALSE        0                0          <NA>      <NA> #> 7      FALSE     FALSE        0                0          <NA>      <NA> #> 8      FALSE     FALSE        0                0          <NA>      <NA> #> 9      FALSE     FALSE        0                0          <NA>      <NA> #> 10     FALSE     FALSE        0                0          <NA>      <NA> #> 11     FALSE     FALSE        0                0          <NA>      <NA> #> 12     FALSE     FALSE        0                0          <NA>      <NA> #> 13     FALSE     FALSE        0                0          <NA>      <NA> #> 14     FALSE     FALSE        0                0          <NA>      <NA> #> 15     FALSE     FALSE        0                0          <NA>      <NA> #> 16     FALSE     FALSE        0                0          <NA>      <NA> #> 17     FALSE     FALSE        0                0          <NA>      <NA> #> 18     FALSE     FALSE        0                0          <NA>      <NA> #> 19     FALSE     FALSE        0                0          <NA>      <NA> #> 20     FALSE     FALSE        0                0          <NA>      <NA> #> 21     FALSE     FALSE        0                0          <NA>      <NA> #>    A.linfit x.mu.start.linfit x.mu.end.linfit r2mu.linfit reliable_fit.linfit #> 1      <NA>              <NA>            <NA>        <NA>               FALSE #> 2      <NA>              <NA>            <NA>        <NA>               FALSE #> 3      <NA>              <NA>            <NA>        <NA>               FALSE #> 4      <NA>              <NA>            <NA>        <NA>               FALSE #> 5      <NA>              <NA>            <NA>        <NA>               FALSE #> 6      <NA>              <NA>            <NA>        <NA>               FALSE #> 7      <NA>              <NA>            <NA>        <NA>               FALSE #> 8      <NA>              <NA>            <NA>        <NA>               FALSE #> 9      <NA>              <NA>            <NA>        <NA>               FALSE #> 10     <NA>              <NA>            <NA>        <NA>               FALSE #> 11     <NA>              <NA>            <NA>        <NA>               FALSE #> 12     <NA>              <NA>            <NA>        <NA>               FALSE #> 13     <NA>              <NA>            <NA>        <NA>               FALSE #> 14     <NA>              <NA>            <NA>        <NA>               FALSE #> 15     <NA>              <NA>            <NA>        <NA>               FALSE #> 16     <NA>              <NA>            <NA>        <NA>               FALSE #> 17     <NA>              <NA>            <NA>        <NA>               FALSE #> 18     <NA>              <NA>            <NA>        <NA>               FALSE #> 19     <NA>              <NA>            <NA>        <NA>               FALSE #> 20     <NA>              <NA>            <NA>        <NA>               FALSE #> 21     <NA>              <NA>            <NA>        <NA>               FALSE #>    max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1               <NA>               <NA>             <NA>         <NA> #> 2               <NA>               <NA>             <NA>         <NA> #> 3               <NA>               <NA>             <NA>         <NA> #> 4               <NA>               <NA>             <NA>         <NA> #> 5               <NA>               <NA>             <NA>         <NA> #> 6               <NA>               <NA>             <NA>         <NA> #> 7               <NA>               <NA>             <NA>         <NA> #> 8               <NA>               <NA>             <NA>         <NA> #> 9               <NA>               <NA>             <NA>         <NA> #> 10              <NA>               <NA>             <NA>         <NA> #> 11              <NA>               <NA>             <NA>         <NA> #> 12              <NA>               <NA>             <NA>         <NA> #> 13              <NA>               <NA>             <NA>         <NA> #> 14              <NA>               <NA>             <NA>         <NA> #> 15              <NA>               <NA>             <NA>         <NA> #> 16              <NA>               <NA>             <NA>         <NA> #> 17              <NA>               <NA>             <NA>         <NA> #> 18              <NA>               <NA>             <NA>         <NA> #> 19              <NA>               <NA>             <NA>         <NA> #> 20              <NA>               <NA>             <NA>         <NA> #> 21              <NA>               <NA>             <NA>         <NA> #>    reliable_fit2.linfit max_slope.spline x.max.spline     lambda.spline #> 1                 FALSE 92.2668917228958         20.5  15.5467166096303 #> 2                 FALSE 30.7727385498335           20  31.2872267087632 #> 3                 FALSE 64.1757831646139           16  20.8131240327297 #> 4                 FALSE 242.557704041646         23.5  14.9826287460236 #> 5                 FALSE 64.6529094536623           19  21.6712998092259 #> 6                 FALSE  205.57971913027           18  12.5662904914234 #> 7                 FALSE 509.394721871896         21.5  6.95952698278297 #> 8                 FALSE 204.031623957343         17.5  13.4360564669418 #> 9                 FALSE 290.961299939386           13  4.67379381987587 #> 10                FALSE 670.985334314907            6 0.373248436531114 #> 11                FALSE 327.194544214622           17  9.86802427129628 #> 12                FALSE 335.243584785665         17.5  3.65080407904781 #> 13                FALSE 728.625260083635          6.5  0.55381657857781 #> 14                FALSE  346.26811325449         16.5  9.75821807365777 #> 15                FALSE 320.246598452125         17.5  3.21350390586794 #> 16                FALSE 774.053986420781          5.5 0.246732777852532 #> 17                FALSE 337.909403917518         16.5  8.08916482172027 #> 18                FALSE 351.643501664605           18   4.8448445225091 #> 19                FALSE 779.134078966908            6 0.462268482214881 #> 20                FALSE 353.185039298378         16.5  9.57178508598632 #> 21                FALSE 338.826806405153           18  5.01597033523575 #>    max_slope2.spline x.max2.spline lambda2.spline        y0.spline #> 1               <NA>          <NA>           <NA>  1291.4242870252 #> 2               <NA>          <NA>           <NA> 1188.27831547782 #> 3               <NA>          <NA>           <NA> 1565.59217809736 #> 4               <NA>          <NA>           <NA> 1519.80363776351 #> 5               <NA>          <NA>           <NA>  1255.7213080438 #> 6               <NA>          <NA>           <NA> 1624.15289883901 #> 7               <NA>          <NA>           <NA> 1132.18524639308 #> 8               <NA>          <NA>           <NA> 1405.71652864703 #> 9               <NA>          <NA>           <NA> 1468.52438340082 #> 10              <NA>          <NA>           <NA> 1209.47395589044 #> 11              <NA>          <NA>           <NA> 1187.83879461913 #> 12              <NA>          <NA>           <NA> 1467.93981010311 #> 13              <NA>          <NA>           <NA> 891.795404947046 #> 14              <NA>          <NA>           <NA> 1282.77700477438 #> 15              <NA>          <NA>           <NA> 1542.64869773804 #> 16              <NA>          <NA>           <NA> 1132.44043950228 #> 17              <NA>          <NA>           <NA> 862.662992687728 #> 18              <NA>          <NA>           <NA> 1602.42470098365 #> 19              <NA>          <NA>           <NA> 1017.04362101536 #> 20              <NA>          <NA>           <NA>  1323.6959493112 #> 21              <NA>          <NA>           <NA> 1707.52183129309 #>            A.spline        dY.spline  integral.spline reliable_fit.spline #> 1  3427.12552423136 2135.70123720616 82881.4064741573                TRUE #> 2  1470.99207749984 282.713762022016 43222.9360971387                TRUE #> 3  2196.18856426073 630.596386163375 67033.6678589487                TRUE #> 4   7592.8006375136 6072.99699975009 151370.675832013                TRUE #> 5  2384.30375521353 1128.58244716973 58249.0814015739                TRUE #> 6  4820.28715109277 3196.13425225376 132414.081549266                TRUE #> 7  17121.2144379567 15989.0291915636 367233.851934484                TRUE #> 8  5206.54317686809 3800.82664822106 120525.231431367                TRUE #> 9   7768.1886699261 6299.66428652528 223919.428584981                TRUE #> 10  20079.009500852 18869.5355449615 490254.828661571                TRUE #> 11 6840.37784263307 5652.53904801394 169914.301957325                TRUE #> 12 9191.86346478597 7723.92365468286 269744.222628615                TRUE #> 13 20481.0977680944 19589.3023631473 497122.375105376                TRUE #> 14 7000.84532046274 5718.06831568836 179100.135589319                TRUE #> 15 9006.21056404742 7463.56186630938 267724.576457374                TRUE #> 16 20704.0909872883  19571.650547786 520199.730690859                TRUE #> 17 6952.68659445913  6090.0236017714 178120.140852738                TRUE #> 18 9322.62835009371 7720.20364911006 273698.194402021                TRUE #> 19 19774.7021395644  18757.658518549 508722.732093214                TRUE #> 20 7189.59680355257 5865.90085424137 182547.707805717                TRUE #> 21 9258.53106887535 7551.00923758226 271383.083788706                TRUE #>    reliable_fit2.spline smooth.spline max_slope.bt lambda.bt A.bt dY.bt #> 1                 FALSE          0.75           NA        NA   NA    NA #> 2                 FALSE          0.75           NA        NA   NA    NA #> 3                 FALSE          0.75           NA        NA   NA    NA #> 4                 FALSE          0.75           NA        NA   NA    NA #> 5                 FALSE          0.75           NA        NA   NA    NA #> 6                 FALSE          0.75           NA        NA   NA    NA #> 7                 FALSE          0.75           NA        NA   NA    NA #> 8                 FALSE          0.75           NA        NA   NA    NA #> 9                 FALSE          0.75           NA        NA   NA    NA #> 10                FALSE          0.75           NA        NA   NA    NA #> 11                FALSE          0.75           NA        NA   NA    NA #> 12                FALSE          0.75           NA        NA   NA    NA #> 13                FALSE          0.75           NA        NA   NA    NA #> 14                FALSE          0.75           NA        NA   NA    NA #> 15                FALSE          0.75           NA        NA   NA    NA #> 16                FALSE          0.75           NA        NA   NA    NA #> 17                FALSE          0.75           NA        NA   NA    NA #> 18                FALSE          0.75           NA        NA   NA    NA #> 19                FALSE          0.75           NA        NA   NA    NA #> 20                FALSE          0.75           NA        NA   NA    NA #> 21                FALSE          0.75           NA        NA   NA    NA #>    integral.bt stdmax_slope.bt stdlambda.bt stdA.bt stddY.bt stdintegral.bt #> 1           NA              NA           NA      NA       NA             NA #> 2           NA              NA           NA      NA       NA             NA #> 3           NA              NA           NA      NA       NA             NA #> 4           NA              NA           NA      NA       NA             NA #> 5           NA              NA           NA      NA       NA             NA #> 6           NA              NA           NA      NA       NA             NA #> 7           NA              NA           NA      NA       NA             NA #> 8           NA              NA           NA      NA       NA             NA #> 9           NA              NA           NA      NA       NA             NA #> 10          NA              NA           NA      NA       NA             NA #> 11          NA              NA           NA      NA       NA             NA #> 12          NA              NA           NA      NA       NA             NA #> 13          NA              NA           NA      NA       NA             NA #> 14          NA              NA           NA      NA       NA             NA #> 15          NA              NA           NA      NA       NA             NA #> 16          NA              NA           NA      NA       NA             NA #> 17          NA              NA           NA      NA       NA             NA #> 18          NA              NA           NA      NA       NA             NA #> 19          NA              NA           NA      NA       NA             NA #> 20          NA              NA           NA      NA       NA             NA #> 21          NA              NA           NA      NA       NA             NA #>    reliable_fit.bt ci90.mu.bt.lo ci90.mu.bt.up ci90.lambda.bt.lo #> 1               NA            NA            NA                NA #> 2               NA            NA            NA                NA #> 3               NA            NA            NA                NA #> 4               NA            NA            NA                NA #> 5               NA            NA            NA                NA #> 6               NA            NA            NA                NA #> 7               NA            NA            NA                NA #> 8               NA            NA            NA                NA #> 9               NA            NA            NA                NA #> 10              NA            NA            NA                NA #> 11              NA            NA            NA                NA #> 12              NA            NA            NA                NA #> 13              NA            NA            NA                NA #> 14              NA            NA            NA                NA #> 15              NA            NA            NA                NA #> 16              NA            NA            NA                NA #> 17              NA            NA            NA                NA #> 18              NA            NA            NA                NA #> 19              NA            NA            NA                NA #> 20              NA            NA            NA                NA #> 21              NA            NA            NA                NA #>    ci90.lambda.bt.up ci90.A.bt.lo ci90.A.bt.up ci90.integral.bt.lo #> 1                 NA           NA           NA                  NA #> 2                 NA           NA           NA                  NA #> 3                 NA           NA           NA                  NA #> 4                 NA           NA           NA                  NA #> 5                 NA           NA           NA                  NA #> 6                 NA           NA           NA                  NA #> 7                 NA           NA           NA                  NA #> 8                 NA           NA           NA                  NA #> 9                 NA           NA           NA                  NA #> 10                NA           NA           NA                  NA #> 11                NA           NA           NA                  NA #> 12                NA           NA           NA                  NA #> 13                NA           NA           NA                  NA #> 14                NA           NA           NA                  NA #> 15                NA           NA           NA                  NA #> 16                NA           NA           NA                  NA #> 17                NA           NA           NA                  NA #> 18                NA           NA           NA                  NA #> 19                NA           NA           NA                  NA #> 20                NA           NA           NA                  NA #> 21                NA           NA           NA                  NA #>    ci90.integral.bt.up ci95.mu.bt.lo ci95.mu.bt.up ci95.lambda.bt.lo #> 1                   NA            NA            NA                NA #> 2                   NA            NA            NA                NA #> 3                   NA            NA            NA                NA #> 4                   NA            NA            NA                NA #> 5                   NA            NA            NA                NA #> 6                   NA            NA            NA                NA #> 7                   NA            NA            NA                NA #> 8                   NA            NA            NA                NA #> 9                   NA            NA            NA                NA #> 10                  NA            NA            NA                NA #> 11                  NA            NA            NA                NA #> 12                  NA            NA            NA                NA #> 13                  NA            NA            NA                NA #> 14                  NA            NA            NA                NA #> 15                  NA            NA            NA                NA #> 16                  NA            NA            NA                NA #> 17                  NA            NA            NA                NA #> 18                  NA            NA            NA                NA #> 19                  NA            NA            NA                NA #> 20                  NA            NA            NA                NA #> 21                  NA            NA            NA                NA #>    ci95.lambda.bt.up ci95.A.bt.lo ci95.A.bt.up ci95.integral.bt.lo #> 1                 NA           NA           NA                  NA #> 2                 NA           NA           NA                  NA #> 3                 NA           NA           NA                  NA #> 4                 NA           NA           NA                  NA #> 5                 NA           NA           NA                  NA #> 6                 NA           NA           NA                  NA #> 7                 NA           NA           NA                  NA #> 8                 NA           NA           NA                  NA #> 9                 NA           NA           NA                  NA #> 10                NA           NA           NA                  NA #> 11                NA           NA           NA                  NA #> 12                NA           NA           NA                  NA #> 13                NA           NA           NA                  NA #> 14                NA           NA           NA                  NA #> 15                NA           NA           NA                  NA #> 16                NA           NA           NA                  NA #> 17                NA           NA           NA                  NA #> 18                NA           NA           NA                  NA #> 19                NA           NA           NA                  NA #> 20                NA           NA           NA                  NA #> 21                NA           NA           NA                  NA #>    ci95.integral.bt.up #> 1                   NA #> 2                   NA #> 3                   NA #> 4                   NA #> 5                   NA #> 6                   NA #> 7                   NA #> 8                   NA #> 9                   NA #> 10                  NA #> 11                  NA #> 12                  NA #> 13                  NA #> 14                  NA #> 15                  NA #> 16                  NA #> 17                  NA #> 18                  NA #> 19                  NA #> 20                  NA #> 21                  NA"},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Data fit via a heuristic linear method — flFitLinear","title":"Data fit via a heuristic linear method — flFitLinear","text":"Determine maximum slopes using heuristic approach similar ``growth rates made easy''-method Hall et al. (2013).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data fit via a heuristic linear method — flFitLinear","text":"","code":"flFitLinear(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   quota = 0.95,   control = fl.control(x_type = c(\"growth\", \"time\"), log.x.lin = FALSE, log.y.lin =     FALSE, t0 = 0, min.growth = NA, lin.h = NULL, lin.R2 = 0.98, lin.RSD = 0.05, lin.dY =     0.05, biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data fit via a heuristic linear method — flFitLinear","text":"time Vector independent time variable (x_type = \"time\" control object). growth Vector independent time growth (x_type = \"growth\" control object). fl_data Vector dependent fluorescence variable. ID (Character) name analyzed sample. quota (Numeric, 0 1) Define fraction max_slope slope regression windows adjacent window highest slope included overall linear fit. control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data fit via a heuristic linear method — flFitLinear","text":"gcFitLinear object parameters fit. lag time estimated intersection fit horizontal line \\(y=y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize linear fit. raw.x Filtered x values used spline fit. raw.fl Filtered fluorescence values used spline fit. filt.x Filtered x values. filt.fl Filtered fluorescence values. ID (Character) Identifies tested sample. FUN Linear function used plotting tangent mumax. fit lm object; result final call lm perform linear regression. par List determined fluorescence parameters. y0: Minimum fluorescence value considered heuristic linear method. dY: Difference maximum fluorescence minimum fluorescence : Maximum fluorescence y0_lm: Intersection linear fit abscissa. max_slope: Maximum slope linear fit. tD: Doubling time. slope.se: Standard error maximum slope. lag: Lag X. x.max_start: X value first data point within window used linear regression. x.max_end: X value last data point within window used linear regression. x.turn: biphasic: X inflection point separates two phases. max.slope2: biphasic: Slope second phase. tD2: Doubling time second phase. y0_lm2: biphasic: Intersection linear fit second phase abscissa. lag2: biphasic: Lag time determined second phase.. x.max2_start: biphasic: X value first data point within window used linear regression second phase. x.max2_end: biphasic: X value last data point within window used linear regression second phase. ndx Index data points used linear regression. ndx2 Index data points used linear regression second phase. control Object class grofit.control containing list options passed function control. rsquared R2 linear regression. rsquared2 R2 linear regression second phase. fitFlag (Logical) Indicates whether linear regression successfully performed data. fitFlag2 (Logical) Indicates whether second phase identified. reliable (Logical) Indicates whether performed fit reliable (set manually).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data fit via a heuristic linear method — flFitLinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, DOI: 10.1093/molbev/mst187 Petzoldt T (2022). growthrates: Estimate Growth Rates Experimental Data. R package version 0.8.3, https://CRAN.R-project.org/package=growthrates.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data fit via a heuristic linear method — flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"l\", x_type = \"time\",                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on fluorescence data — flFitSpline","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"flFitSpline performs smooth spline fit dataset determines greatest slope global maximum first derivative spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"","code":"flFitSpline(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   control = fl.control(biphasic = FALSE, x_type = c(\"growth\", \"time\"), log.x.spline =     FALSE, log.y.spline = FALSE, smooth.fl = 0.75, t0 = 0, min.growth = NA) )"},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"time Vector independent variable: time (x_type = 'time' fl.control object. growth Vector independent variable: growth (x_type = 'growth' fl.control object. fl_data Vector dependent variable: fluorescence. ID (Character) name analyzed sample. control fl.control object created fl.control, defining relevant fitting options. biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? x_type (Character) data type shall used independent variable? Options 'growth' 'time'. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 t0 (Numeric) Minimum time value considered linear spline fits. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"flFitSpline object. lag time estimated intersection tangent maximum slope horizontal line \\(y = y_0\\), y0 first value dependent variable. Use plot.flFitSpline visualize spline fit derivative time. x.Raw x values provided function time growth. fl.Raw fluorescence data provided function fl_data. raw.x Filtered x values used spline fit. raw.fl Filtered fluorescence values used spline fit. ID (Character) Identifies tested sample. fit.x Fitted x values. fit.fl Fitted fluorescence values. parameters List determined parameters. : Maximum fluorescence. dY: Difference maximum fluorescence minimum fluorescence. max_slope: Maximum slope fluorescence-vs.-x data (.e., maximum first derivative spline). x.max: Time maximum slope. lambda: Lag time. b.tangent: Intersection tangent maximum slope abscissa. max_slope2: biphasic course fluorescence: Maximum slope fluorescence-vs.-x data second phase. lambda2: biphasic course fluorescence: Lag time determined second phase. x.max2: biphasic course fluorescence: Time maximum slope second phase. b.tangent2: biphasic course fluorescence: Intersection tangent maximum slope second phase abscissa. integral: Area curve spline fit. spline smooth.spline object generated smooth.spline function. spline.deriv1 list time ('x') growth ('y') values describing first derivative spline fit. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether spline fit successfully performed data. fitFlag2 (Logical) Indicates whether second phase identified. control Object class fl.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"biphasic = TRUE, following steps performed define second phase: Determine local minima within first derivative smooth spline fit. Remove 'peak' containing highest value first derivative (.e., \\(mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(mu_{max}\\). Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time'))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grofit.control object. — growth.control","title":"Create a grofit.control object. — growth.control","text":"grofit.control object required perform various computations growth data stored within grodata objects (created read_data parse_data). grofit.control object created automatically part growth.workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grofit.control object. — growth.control","text":"","code":"growth.control(   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   suppress.messages = FALSE,   fit.opt = c(\"a\"),   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.gc = FALSE,   log.y.lin = TRUE,   log.y.spline = TRUE,   log.y.model = TRUE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.1,   lin.dY = 0.05,   biphasic = FALSE,   interactive = FALSE,   nboot.gc = 0,   smooth.gc = 0.55,   model.type = c(\"logistic\", \"richards\", \"gompertz\", \"gompertz.exp\", \"huang\", \"baranyi\"),   dr.method = c(\"model\", \"spline\"),   dr.model = c(\"gammadr\", \"multi2\", \"LL.2\", \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\",     \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\", \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\",     \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),   dr.have.atleast = 6,   dr.parameter = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu.spline\",     \"lambda.spline\", \"dY.spline\", \"A.spline\", \"mu.model\", \"lambda.model\",     \"dY.orig.model\", \"A.orig.model\"),   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   growth.thresh = 1.5 )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grofit.control object. — growth.control","text":"neg.nan.act (Logical) Indicates whether program stop negative growth values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. suppress.messages (Logical) Indicates whether messages (information current growth curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed processing high throughput data. Note: warnings still displayed. Default: FALSE. fit.opt (Character character vector) Indicates whether program perform linear regression ('l'), model fit ('m'), spline fit ('s'), (''). Combinations can freely chosen providing character vector, e.g. fit.opt = c('l', 's') Default:  fit.opt = c('l', 's'). t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Maximum time value considered linear spline fits. min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE log.y.spline (Logical) Indicates whether ln(y/y0) applied growth data spline fits. Default: TRUE log.y.model (Logical) Indicates whether ln(y/y0) applied growth data model fits. Default: TRUE lin.h (Numeric) Manually define size sliding window used growth.gcFitLinear NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). biphasic (Logical) Shall growth.gcFitLinear growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)? interactive (Logical) Controls whether fit growth curve method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.gc (Numeric) Number bootstrap samples used nonparametric growth curve fitting growth.gcBootSpline. Use nboot.gc = 0 disable bootstrap. Default: 0 smooth.gc (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating growth rates) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 model.type (Character) Vector providing names parametric models fitted data. Default: c('logistic', 'richards', 'gompertz', 'gompertz.exp', 'huang', 'baranyi'). dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grofit.control object. — growth.control","text":"Generates list arguments described entries.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a grofit.control object. — growth.control","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a grofit.control object. — growth.control","text":"","code":"# default option control_default <- growth.control() # user defined control_manual <- growth.control(fit.opt = c('s', 'm'),                                  smooth.gc = 0.5,                                  model.type = c('huang', 'baranyi'))"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"growth.drBootSpline resamples values dataset replacement performs spline fit bootstrap sample determine EC50.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"","code":"growth.drBootSpline(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"object class drBootSpline containing distribution growth parameters drFitSpline object bootstrap sample. Use plot.drBootSpline visualize bootstrapping splines well distribution EC50. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition. boot.conc Table concentration values per column, resulting spline fit bootstrap. boot.test Table response values per column, resulting spline fit bootstrap. boot.drSpline List containing drFitSpline objects generated call growth.drFitSpline. ec50.boot Vector estimated EC50 values bootstrap entry. ec50y.boot Vector estimated response EC50 values bootstrap entry. BootFlag (Logical) Indicates success bootstrapping operation. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = 'test',                control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8,                                         nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.918747400879126 StDev :  0.0586361541161082  #> 90% CI:  0.916818271408706 90% CI:  0.920676530349546 #> 95% CI:  0.916448863637774 95% CI:  0.921045938120477 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.5061492227222  #> 90% CI:  1.50131919677001 90% CI:  1.51098857541315 #> 95% CI:  1.50039536066776 95% CI:  1.51191632545411 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.9187474    0.05863615        0.5134555     0.07799364 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.8222909           1.015204          0.8038205           1.033674 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.506149                1.275707                1.759926 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                 1.23406                1.811377 plot(TestRun, combine = TRUE)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"growth.drFit serves determine dose-response curves every condition dataset. response parameter can chosen every physiological parameter gcTable table obtained via growth.gcFit. growth.drFit calls functions growth.drFitSpline growth.drBootSpline, growth.drFitModel generate table estimates EC50 respecting statistics.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"","code":"growth.drFit(   gcTable,   control = growth.control(dr.method = \"model\", dr.model = c(\"gammadr\", \"multi2\", \"LL.2\",     \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\", \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\",     \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\", \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),     dr.have.atleast = 6, dr.parameter = \"mu.linear\", nboot.dr = 0, smooth.dr = NULL,     log.x.dr = FALSE, log.y.dr = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"gcTable dataframe containing data dose-response curve estimation. table class gcTable can obtained running growth.gcFit. control grofit.control object created growth.control, defining relevant fitting options. dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"object class drFit. raw.data Data passed function gcTable. drTable Dataframe containing condition identifiers, fit options, results dose-response analysis. drBootSplines List drBootSpline objects generated call growth.drBootSpline distinct experiment. drFittedSplines List drFitSpline objects generated call growth.drFitSpline distinct experiment. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"Common response parameters used dose-response analysis:Linear fit:- mu.linfit: Growth rate- lambda.linfit: Lag time- dY.linfit: Density increase- .linfit: Maximum measurementSpline fit:- mu.spline: Growth rate- lambda.spline: Lag time- .spline: Maximum measurement- dY.spline: Density increase- integral.spline: IntegralParametric fit:- mu.model: Growth rate- lambda.model: Lag time- .model: Maximum measurement- integral.model: Integral'","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,              control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1599188     0.002567710  0.1546886  0.1651491 #> 2 Test2 FALSE FALSE       0     0.1119264     0.001842392  0.1081736  0.1156792 #>       yEC50      test model #> 1 0.3303041 mu.spline  W1.3 #> 2 0.2388720 mu.spline  W1.3 plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"Fit various models response vs. concentration data single sample determine EC50.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"","code":"growth.drFitModel(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"drFitModel object.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = 'test')  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50      4.170417      0.09944016   3.960616   4.380217 0.4625057 mu.linfit #>        model #> e:1:50  W1.3 plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"growth.drFitSpline performs smooth spline fit determines EC50 concentration half-maximum value response parameter spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"","code":"growth.drFitSpline(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"drFitSpline object. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition fit.conc Fitted concentration values. fit.test Fitted response values. spline smooth.spline object generated smooth.spline function. spline.low x y values lowess spline fit raw data. Used call smooth.spline. parameters List parameters estimated dose response curve fit. EC50: Concentration half-maximal response. yEC50: Response value related EC50. EC50.orig: EC50 value original scale, transformation applied. yEC50.orig: Response value EC50 original scale, transformation applied. fitFlag (Logical) Indicates whether spline fitted successfully data. reliable (Logical) Indicates whether performed fit reliable (set manually). control Object class grofit.control containing list options passed function control. Use plot.drFitSpline visualize spline fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"spline fit smooth.spline, higher weights assigned data points concentration value 0, well x-y pairs response parameter value 0 pairs concentration values zero-response parameter values.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07 Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = 'test',               control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.63460128205775 yEC50 0.476817275139336 #> --> Original scale  #> xEC50 4.12741319776589 yEC50 0.476817275139336 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.634601 0.4768173  4.127413  0.4768173   NA  plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"growth.gcBootSpline resamples growth-time value pairs dataset replacement performs spline fit bootstrap sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"","code":"growth.gcBootSpline(time, data, gcID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"time Vector independent variable (usually: time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"gcBootSpline object containing distribution growth parameters gcFitSpline object bootstrap sample. Use plot.gcBootSpline visualize bootstrapping splines well distribution physiological parameters. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. gcID (Character) Identifies tested sample. boot.time Table time values per column, resulting spline fit bootstrap. boot.data Table growth values per column, resulting spline fit bootstrap. boot.gcSpline List gcFitSpline object, created growth.gcFitSpline resample bootstrap. lambda Vector estimated lambda (lag time) values bootstrap entry. mu Vector estimated mu (maximum growth rate) values bootstrap entry. Vector estimated (maximum growth) values bootstrap entry. integral Vector estimated integral values bootstrap entry. bootFlag (Logical) Indicates success bootstrapping operation. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = 'TestFit',               control = growth.control(fit.opt = 's', nboot.gc = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"growth.gcFit performs computational growth fitting operations based user input.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"","code":"growth.gcFit(time, data, control = growth.control(), parallelize = TRUE, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"time (optional) matrix containing time values sample. data Either... grodata object created read_data parse_data, list containing 'time' matrix well 'growth' , appropriate, 'fluorescence' dataframes, dataframe containing growth values (time matrix provided separate argument). control grofit.control object created growth.control, defining relevant fitting options. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"gcFit object contains growth fitting results, compatible various plotting functions QurvE package. raw.time Raw time matrix passed function time. raw.data Raw growth dataframe passed function data. gcTable Table growth parameters related statistics growth curve evaluation performed function. table, also returned generic summary.gcFit method applied gcFit object, used input growth.drFit. gcFittedLinear List gcFitLinear objects, generated call growth.gcFitLinear. Note: access object list via double brace: gcFittedLinear[[#n]]. gcFittedModels List gcFitModel objects, generated call growth.gcFitModel. Note: access object list via double brace: gcFittedModels[[#n]]. gcFittedSplines List gcFitSpline objects, generated call growth.gcFitSpline. Note: access object via double brace: gcFittedSplines[[#n]]. gcBootSplines List gcBootSpline objects, generated call growth.gcBootSpline. Note: access object via double brace: gcFittedSplines[[#n]]. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"","code":"# Create random growth data set   rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')   rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')    rnd.data <- list()   rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time)   rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow   res <- growth.gcFit(time = rnd.data$time,                       data = rnd.data$data,                       parallelize = FALSE,                       control = growth.control(suppress.messages = TRUE,                                                fit.opt = 's'))"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"Determine maximum growth rates log-linear part growth curve using heuristic approach similar ``growth rates made easy''-method Hall et al. (2013).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"","code":"growth.gcFitLinear(   time,   data,   gcID = \"undefined\",   quota = 0.95,   control = growth.control(t0 = 0, tmax = NA, log.x.gc = FALSE, log.y.lin = TRUE,     min.growth = NA, max.growth = NA, lin.h = NULL, lin.R2 = 0.97, lin.RSD = 0.1, lin.dY     = 0.05, biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"time Vector independent variable (usually: time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. quota (Numeric, 0 1) Define fraction \\(mu_{max}\\) slope regression windows adjacent window highest slope included overall linear fit. control grofit.control object created growth.control, defining relevant fitting options. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions. t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Minimum time value considered linear spline fits. lin.h (Numeric) Manually define size sliding window . NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Enter minimum percentage growth increase linear regression cover. biphasic (Logical) Shall growth.gcFitLinear try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"gcFitLinear object parameters fit. lag time estimated intersection fit horizontal line \\(y=y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize linear fit. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. filt.time Filtered time values used heuristic linear method. filt.data Filtered growth values. log.data Log-transformed, filtered growth values used heuristic linear method. gcID (Character) Identifies tested sample. FUN Linear function used plotting tangent mumax. fit lm object; result final call lm perform linear regression. par List determined growth parameters. y0: Minimum growth value considered heuristic linear method. dY: Difference maximum growth minimum growth. : Maximum growth. y0_lm: Intersection linear fit abscissa. mumax: Maximum growth rate (.e., slope linear fit). tD: Doubling time. mu.se: Standard error maximum growth rate. lag: Lag time. tmax_start: Time value first data point within window used linear regression. tmax_end: Time value last data point within window used linear regression. t_turn: biphasic growth: Time inflection point separates two growth phases. mumax2: biphasic growth: Growth rate second growth phase. tD2: Doubling time second growth phase. y0_lm2: biphasic growth: Intersection linear fit second growth phase abscissa. lag2: biphasic growth: Lag time determined second growth phase.. tmax2_start: biphasic growth: Time value first data point within window used linear regression second growth phase. tmax2_end: biphasic growth: Time value last data point within window used linear regression second growth phase. ndx Index data points used linear regression. ndx2 Index data points used linear regression second growth phase. control Object class grofit.control containing list options passed function control. rsquared R2 linear regression. rsquared2 R2 linear regression second growth phase. fitFlag (Logical) Indicates whether linear regression successfully performed data. fitFlag2 (Logical) Indicates whether second growth phase identified. reliable (Logical) Indicates whether performed fit reliable (set manually).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"algorithm works follows: Fit linear regressions (Theil-Sen estimator) subsets h consecutive, log-transformed data points (sliding window size h). example \\(h=5\\), fit linear regression points 1 ... 5, 2 ... 6, 3 ... 7 . Find subset highest slope \\(mu_{max}\\). R2 relative standard deviation (RSD) values regression meet lin.R2 lin.RSD defined thresholds data points within regression window account fraction least lin.dY total growth increase? , evaluate subset second highest slope, . Include also data points adjacent subsets slope least \\(quota \\cdot mu{max}\\), e.g., regression windows least 95% maximum slope. Fit new linear model extended data window identified step 3. biphasic = TRUE, following steps performed define second growth phase: Perform smooth spline fit data smoothing factor 0.5. Calculate second derivative spline fit perform smooth spline fit derivative smoothing factor 0.4. Determine local maxima minima second derivative. Find local minimum following \\(mu_{max}\\) repeat heuristic linear method later time values. Find local maximum \\(mu_{max}\\) repeat heuristic linear method earlier time values. Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, DOI: 10.1093/molbev/mst187 Petzoldt T (2022). growthrates: Estimate Growth Rates Experimental Data. R package version 0.8.3, https://CRAN.R-project.org/package=growthrates. Theil, H.(1992). rank-invariant method linear polynomial regression analysis. : Henri Theil’s contributions economics econometrics. Springer, pp. 345–381. DOI: 10.1007/978-94-011-2546-8_20","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"l\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit nonlinear growth models to growth data — growth.gcFitModel","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"growth.gcFitModel determines parametric growth model best describes data.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"","code":"growth.gcFitModel(time, data, gcID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"time Vector independent variable (usually time). data Vector dependent variable (usually growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"gcFitModel object contains physiological parameters information best fit. Use plot.gcFitModel visualize parametric fit growth equation. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. gcID (Character) Identifies tested sample. fit.time Fitted time values. fit.data Fitted growth values. parameters List determined growth parameters. : Maximum growth. dY: Difference maximum growth minimum growth fitted model. mu: Maximum growth rate (.e., maximum first derivative spline). lambda: Lag time. b.tangent: Intersection tangent maximum growth rate abscissa. fitpar: models: list additional parameters used equations describing growth curve. integral: Area curve parametric fit. model (Character) model obtained fit lowest AIC, determined AIC. nls nls object chosen model generated nls function. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether parametric model successfully fitted data. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'm')) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  plot(TestFit, basesize = 18, eq.size = 1.5) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on growth data — growth.gcFitSpline","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"growth.gcFitSpline performs smooth spline fit dataset determines highest growth rate global maximum first derivative spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"","code":"growth.gcFitSpline(   time,   data,   gcID = \"undefined\",   control = growth.control(biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"time Vector independent variable (usually time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options. biphasic (Logical) Shall growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"gcFitSpline object. lag time estimated intersection tangent maximum slope horizontal line \\(y = y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize spline fit derivative time. time.Raw time values provided function time. data.Raw growth data provided function data. raw.time Filtered time values used spline fit. raw.data Filtered growth values used spline fit. gcID (Character) Identifies tested sample. fit.time Fitted time values. fit.data Fitted growth values. parameters List determined growth parameters. : Maximum growth. dY: Difference maximum growth minimum growth. mu: Maximum growth rate (.e., maximum first derivative spline). tD: Doubling time. t.max: Time maximum growth rate. lambda: Lag time. b.tangent: Intersection tangent maximum growth rate abscissa. mu2: biphasic growth: Growth rate second growth phase. tD2: Doubling time second growth phase. lambda2: biphasic growth: Lag time determined second growth phase. t.max2: biphasic growth: Time maximum growth rate second growth phase. b.tangent2: biphasic growth: Intersection tangent maximum growth rate second growth phase abscissa. integral: Area curve spline fit. spline smooth.spline object generated smooth.spline function. spline.deriv1 list time ('x') growth ('y') values describing first derivative spline fit. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether spline fit successfully performed data. fitFlag2 (Logical) Indicates whether second growth phase identified. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"biphasic = TRUE, following steps performed define second growth phase: Determine local minima within first derivative smooth spline fit. Remove 'peak' containing highest value first derivative (.e., \\(mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(mu_{max}\\). Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform spline fit TestFit <- growth.gcFitSpline(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 's'))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"growth.report requires grofit object creates report PDF HTML format summarizes results.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"","code":"growth.report(   grofit,   out.dir = tempdir(),   out.nm = NULL,   ec50 = FALSE,   format = c(\"pdf\", \"html\"),   export = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"grofit grofit object created growth.workflow. .dir (Character) path name folder report files created.  NULL, folder named combination 'Report.growth_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'GrowthReport_' current date time. ec50 (Logical) Display results dose-response analysis (TRUE) (FALSE). format (Character) Define file format report, PDF ('pdf') /HTML ('html'). Default: (c('pdf', 'html')) export (Logical) Shall plots generated report exported individual PDF PNG files TRUE FALSE? parallelize (Logical) Create plots using one available processor cores (TRUE) single core (FALSE). ... arguments passed create report. Currently supported: mean.grp: Define groups combine common plots report based sample identifiers. Partial matches sample/group names accepted. Can '', string vector, list string vectors. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc: Define concentrations combine common plots  report. Can numeric vector, list numeric vectors.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"template .Rmd file used within function can found within QurvE package installation directory.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"","code":"if (FALSE) { # Create random growth data set   rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')     # Run growth curve analysis workflow   res <- growth.workflow(time = rnd.data$time,                          data = rnd.data$data,                          fit.opt = 's',                          ec50 = FALSE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE)    growth.report(res, out.dir = tempdir(), parallelize = FALSE) }"},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"growth.workflow runs growth.control create grofit.control object performs computational fitting operations based user input. Finally, desired, final report created PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"","code":"growth.workflow(   grodata = NULL,   time = NULL,   data = NULL,   ec50 = TRUE,   mean.grp = NA,   mean.conc = NA,   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   suppress.messages = FALSE,   fit.opt = c(\"a\"),   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.gc = FALSE,   log.y.lin = TRUE,   log.y.spline = TRUE,   log.y.model = TRUE,   biphasic = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.1,   lin.dY = 0.05,   interactive = FALSE,   nboot.gc = 0,   smooth.gc = 0.55,   model.type = c(\"logistic\", \"richards\", \"gompertz\", \"gompertz.exp\", \"huang\", \"baranyi\"),   dr.method = c(\"model\", \"spline\"),   dr.model = c(\"gammadr\", \"multi2\", \"LL.2\", \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\",     \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\", \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\",     \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),   growth.thresh = 1.5,   dr.have.atleast = 6,   dr.parameter = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu.spline\",     \"lambda.spline\", \"dY.spline\", \"A.spline\", \"mu.model\", \"lambda.model\",     \"dY.orig.model\", \"A.orig.model\"),   smooth.dr = 0.1,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   report = NULL,   out.dir = NULL,   out.nm = NULL,   export.fig = FALSE,   export.res = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"grodata grodata object created read_data parse_data, list containing 'time' matrix well 'growth' dataframe. time (optional) matrix containing time values sample. data (optional) dataframe containing growth data (time matrix provided separate argument). ec50 (Logical) Perform dose-response analysis (TRUE) (FALSE). mean.grp ('', string vector, list string vectors) Define groups combine common plots final report based sample identifiers (report == TRUE). Partial matches sample/group names accepted. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc (numeric vector, list numeric vectors) Define concentrations combine common plots final report (report == TRUE). neg.nan.act (Logical) Indicates whether program stop negative growth values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. suppress.messages (Logical) Indicates whether grofit messages (information current growth curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. fit.opt (Character character vector) Indicates whether program perform linear regression ('l'), model fit ('m'), spline fit ('s'), (''). Combinations can freely chosen providing character vector, e.g. fit.opt = c('l', 's') Default:  fit.opt = c('l', 's'). t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Maximum time value considered linear spline fits. min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE log.y.spline (Logical) Indicates whether ln(y/y0) applied growth data spline fits. Default: TRUE log.y.model (Logical) Indicates whether ln(y/y0) applied growth data model fits. Default: TRUE biphasic (Logical) Shall growth.gcFitLinear growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)? lin.h (Numeric) Manually define size sliding window used growth.gcFitLinear NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). interactive (Logical) Controls whether fit growth curve method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.gc (Numeric) Number bootstrap samples used nonparametric growth curve fitting growth.gcBootSpline. Use nboot.gc = 0 disable bootstrap. Default: 0 smooth.gc (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating growth rates) produce error smooth.spline lead overestimation. usage fixed value recommended reproducible results across samples. See ?smooth.spline details. Default: 0.55 model.type (Character) Vector providing names parametric models fitted data. Default: c('logistic', 'richards', 'gompertz', 'gompertz.exp', 'huang', 'baranyi'). dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See documentation smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. report (Character NULL) Create PDF ('pdf') /HTML ('html') report running computations. Define NULL report created. Default: (c('pdf', 'html')) .dir Character NULL Define name folder result files stored. NULL, folder named combination 'GrowthResults_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'GrowthReport_' current date time. export.fig (Logical) Export figures created report separate PNG PDF files (TRUE) (FALSE). effective report = TRUE. export.res (Logical) Create tab-separated TXT files containing calculated growth parameters dose-response analysis results well .RData file resulting grofit object. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"grofit object contains computation results, compatible various plotting functions QurvE package growth.report. time Raw time matrix passed function time (grofit object provided). data Raw growth dataframe passed function data (grofit object provided). gcFit gcFit object created call growth.gcFit. drFit drFit object created call growth.drFit. expdesign Experimental design table inherited grodata created identifier columns (columns 1-3) data. control Object class grofit.control created call growth.control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"Common response parameters used dose-response analysis:Linear fit:- mu.linfit: Growth rate- lambda.linfit: Lag time- dY.linfit: Density increase- .linfit: Maximum measurementSpline fit:- mu.spline: Growth rate- lambda.spline: Lag time- .spline: Maximum measurement- dY.spline: Density increase- integral.spline: IntegralParametric fit:- mu.model: Growth rate- lambda.model: Lag time- .model: Maximum measurement- integral.model: Integral'","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"","code":"# Create random growth data set   rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')   rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')    rnd.data <- list()   rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time)   rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)    # Run growth curve analysis workflow   res <- growth.workflow(time = rnd.data$time,                          data = rnd.data$data,                          fit.opt = 's',                          ec50 = FALSE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE)  # Load custom dataset   input <- read_data(data.growth = system.file('2-FMA_toxicity.csv', package = 'QurvE')) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.    res <- growth.workflow(grodata = input,                          fit.opt = 's',                          ec50 = TRUE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE) #> The chosen 'dr.parameter' is not compatible with the selected fitting options ('fit.opt'). Dose-response analysis will not be performed.    plot(res)"},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":null,"dir":"Reference","previous_headings":"","what":"Find indices of maxima an minima in a data series — inflect","title":"Find indices of maxima an minima in a data series — inflect","text":"Find indices maxima minima data series","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find indices of maxima an minima in a data series — inflect","text":"","code":"inflect(x, threshold = 1)"},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find indices of maxima an minima in a data series — inflect","text":"x vector values minima maxima threshold Threshold consider minima maxima","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find indices of maxima an minima in a data series — inflect","text":"list 1. vector minima 2. vector maxima.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find indices of maxima an minima in a data series — inflect","text":"Evan Friedland","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find indices of maxima an minima in a data series — inflect","text":"","code":"# Pick a desired threshold to plot up to n <- 3 # Generate Data randomwalk <- 100 + cumsum(rnorm(50, 0.2, 1)) # climbs upwards most of the time bottoms <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$minima) tops <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$maxima) # Color functions cf.1 <- grDevices::colorRampPalette(c('pink','red')) cf.2 <- grDevices::colorRampPalette(c('cyan','blue')) plot(randomwalk, type = 'l', main = 'Minima & Maxima\\nVariable Thresholds') for(i in 1:n){   points(bottoms[[i]], randomwalk[bottoms[[i]]], pch = 16, col = cf.1(n)[i], cex = i/1.5) } for(i in 1:n){   points(tops[[i]], randomwalk[tops[[i]]], pch = 16, col = cf.2(n)[i], cex = i/1.5) } legend('topleft', legend = c('Minima',1:n,'Maxima',1:n),        pch = rep(c(NA, rep(16,n)), 2), col = c(1, cf.1(n),1, cf.2(n)),        pt.cex =  c(rep(c(1, c(1:n) / 1.5), 2)), cex = .75, ncol = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for handling linear fits. — lm_parms","title":"Helper functions for handling linear fits. — lm_parms","text":"lm_window performs linear regression Theil-Sen estimator subset data.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for handling linear fits. — lm_parms","text":"","code":"lm_parms(m)  lm_window(x, y, i0, h = 5)"},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for handling linear fits. — lm_parms","text":"m linear model (lm) object x vector independent variable (e.g. time). y vector dependent variable (concentration organisms). i0 index first value used window. h window (number data).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for handling linear fits. — lm_parms","text":"linear model object class lm (lm_window) resp. vector parameters fit (lm_parms).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helper functions for handling linear fits. — lm_parms","text":"Hall, B. G., H. Acar M. Barlow 2013. Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-238 doi:10.1093/molbev/mst197","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for handling linear fits. — lm_parms","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- as.numeric(rnd.dataset$data[1,-(1:3)]) # Remove identifier columns data.log <- log(data/data[1])  # Perform linear fit on 8th window of size 8 linreg <- lm_window(time, data.log, 8, h=8)  summary(linreg) #>  #> Call: #> theil_sen_regression(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.022104 -0.008858  0.000000  0.011429  0.057476  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.19938    0.04574  -4.359 0.004774 **  #> x            0.12642    0.01702   7.427 0.000307 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02758 on 6 degrees of freedom #> Multiple R-squared:  0.9019,\tAdjusted R-squared:  0.8855  #> F-statistic: 55.16 on 1 and 6 DF,  p-value: 0.0003066 #>   lm_parms(linreg) #>           a           b        b.se          r2       b.rsd  #> -0.19937856  0.12642396  0.01702262  0.90189296  0.13464709"},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"Function estimate area curve given x y(x) values","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"","code":"low.integrate(x, y)"},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"x Numeric vector x values. y Numeric vector y values length x.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"Numeric value: Area smoothed spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"function uses R internal function smooth.spline.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- as.numeric(rnd.dataset$data[1,-(1:3)]) # Remove identifier columns  plot(time, data)   print(low.integrate(time, data)) #> [1] 74.62017"},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated with the ","title":"Extract relevant data from a raw data export file generated with the ","text":"Extract relevant data raw data export file generated \"Gen5\" \"Gen6\" software.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated with the ","text":"","code":"parse_Gen5Gen6(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated with the ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated with the ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated with the ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\") ) parsed <- parse_Gen5Gen6(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"parse_data takes raw export file plate reader experiment (similar device), extracts relevant information parses format required run growth.workflow. one read type found user prompted assign correct reads growth fluorescence.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"","code":"parse_data(   data.file = NULL,   map.file = NULL,   software = c(\"Gen5\", \"Gen6\", \"Biolector\", \"Chi.Bio\", \"GrowthProfiler\", \"Tecan\",     \"VictorNivo\", \"VictorX3\"),   convert.time = NULL,   sheet.data = 1,   sheet.map = 1,   csvsep.data = \";\",   dec.data = \".\",   csvsep.map = \";\",   dec.map = \".\",   subtract.blank = TRUE,   calib.growth = NULL,   calib.fl = NULL,   calib.fl2 = NULL,   fl.normtype = c(\"growth\", \"fl2\") )"},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"data.file (Character) table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing raw plate reader (similar device) data. map.file (Character) table file column format extension '.xlsx', '.xls', '.csv', '.tsv', '.txt'  'well', 'ID', 'replicate', 'concentration' first row. Used assign sample information wells plate. software (Character) name software/device used export plate reader data. convert.time (NULL string) Convert time values formula provided form 'y = function(x)'. example: convert.time = 'y = 24 * x' sheet.data, sheet.map (Numeric Character) Number name sheets XLS XLSX files containing experimental data mapping information, respectively (optional). csvsep.data, csvsep.map (Character) separator used CSV data files (ignored file types).  Default: \";\" dec.data, dec.map (Character) decimal separator used CSV, TSV TXT files measurements mapping information, respectively. subtract.blank (Logical) Shall blank values subtracted values within experiment (TRUE, default) (FALSE). calib.growth, calib.fl, calib.fl2 (Character NULL) Provide equation form 'y = function(x)' (example: 'y = x^2 * 0.3 - 0.5') convert growth fluorescence values. can used , e.g., convert plate reader absorbance values OD600 fluorescence intensity molecule concentrations. Caution!: utilizing calibration, carefully consider whether blanks subtracted determine calibration selecting input subtract.blank = TRUE. fl.normtype (Character string) Normalize fluorescence values either diving 'growth' fluorescence2 values ('fl2').","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"grodata object suitable run growth.workflow. See read_data structure.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"Metadata provided map.file needs following layout:","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"","code":"if(interactive()){ grodata <- parse_data(data.file = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\"),                       sheet.data = 1,                       map.file = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\"),                       sheet.map = \"mapping\",                       software = \"Gen5\",                       convert.time = \"y = x * 24\", # convert days to hours                       calib.growth = \"y = x * 3.058\") # convert absorbance to OD values }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"Extract relevant data raw data export file generated software Perkin Elmer's \"Victor Nivo\" plate readers.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"parse_victornivo(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"nivo_output.csv\", package = \"QurvE\"), csvsep = \",\" ) parsed <- parse_victornivo(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"Extract relevant data raw data export file generated software Perkin Elmer's \"Victor X3\" plate readers.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"parse_victorx3(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"victorx3_output.txt\", package = \"QurvE\") ) parsed <- parse_victorx3(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"Generic plot function gcBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"","code":"# S3 method for drBootSpline plot(   x,   pch = 19,   colData = 1,   colSpline = \"black\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"x drBootSpline object created growth.drBootSpline stored within grofit drFit object created growth.workflow growth.drFit, respectively. pch (Numeric) Shape raw data symbols. colData (Numeric Character) Color used plot raw data. colSpline (Numeric Character) Color used plot splines. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether dose-response curves parameter plots shall shown within window. ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"plot dose-response spline fits bootstrapping operation.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = \"test\",         control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8, nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.906345400684037 StDev :  0.0767039378496045  #> 90% CI:  0.903821841128785 90% CI:  0.908868960239289 #> 95% CI:  0.903338606320332 95% CI:  0.909352195047741 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.475259900187  #> 90% CI:  1.46902130945258 90% CI:  1.48151425425818 #> 95% CI:  1.46782848064445 95% CI:  1.48271369810667 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.9063454    0.07670394        0.5237454     0.08201071 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.7801674           1.032523          0.7560057           1.056685 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1              1.47526                1.181838                1.808143 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                1.129752                1.876819 plot(TestRun, combine = TRUE)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFit objects. — plot.drFit","title":"Generic plot function for drFit objects. — plot.drFit","text":"codeplot.drFit calls codeplot.drFitSpline group used dose-response analysis","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFit objects. — plot.drFit","text":"","code":"# S3 method for drFit plot(   x,   combine = TRUE,   names = NULL,   exclude.nm = NULL,   pch = 16,   cex.point = 2,   basesize = 15,   colors = NULL,   lwd = 0.7,   ec50line = TRUE,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   log.y = FALSE,   log.x = FALSE,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFit objects. — plot.drFit","text":"x object class drFit, created growth.drFit. combine (Logical) Combine dose-response analysis results conditions single plot (TRUE) (FALSE). names (String vector strings) Define conditions combine single plot (combine = TRUE). Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. exclude.nm (String vector strings) Define conditions exclude plot (combine = TRUE). Partial matches sample/group names accepted. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. basesize (Numeric) Base font size. colors (Numeric character) Define colors different conditions. lwd (Numeric) Line width individual splines. ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis. x.title (Character) Optional: Provide title x-axis. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? log.x (Logical) Log-transform x-axis plot (TRUE) (FALSE)? plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFit objects. — plot.drFit","text":"One plot per condition tested dose-response analysis single plot showing conditions control = growth.control(dr.method = \"spline\") used growth.drFit combine = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFit objects. — plot.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = \"s\",                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,                  control = growth.control(dr.parameter = \"mu.spline\")) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1573535     0.001847333  0.1535906  0.1611164 #> 2 Test2 FALSE FALSE       0     0.1196618     0.001800505  0.1159943  0.1233293 #>       yEC50      test model #> 1 0.3306644 mu.spline  W1.3 #> 2 0.2331524 mu.spline  W1.3  plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"Generic plot function drFitFLModel objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"","code":"# S3 method for drFitFLModel plot(   x,   ec50line = TRUE,   broken = TRUE,   bp,   n.xbreaks,   n.ybreaks,   log = c(\"xy\"),   pch = 1,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"x Object class drFitFLModel, created fl.drFitModel. ec50line (Logical) Show pointed horizontal vertical lines EC50 value (TRUE) (FALSE). broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input.#' @param pch (Numeric) Size raw data circles. log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. pch (Numeric) Symbol used plot data points. colSpline (Numeric Character) Color used plot splines. colData (Numeric Character) Color used plot raw data. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lwd (Numeric) Line width. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"plot biosensor dose-response model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = \"test\", control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.503 | yEC50: 3074 | fold change: 49.64 | leakiness: 121.4 #>  #>   print(summary(TestRun)) #>      yEC50    y.min    y.max       fc         K        n yEC50.orig    K.orig #> 1 3073.777 121.3925 6026.161 49.64197 0.5032937 1.983443   3073.777 0.5032937 #>   test #> 1   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitModel objects. — plot.drFitModel","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"Generic plot function drFitModel objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"","code":"# S3 method for drFitModel plot(   x,   type = c(\"confidence\", \"all\", \"bars\", \"none\", \"obs\", \"average\"),   ec50line = TRUE,   add = FALSE,   broken = TRUE,   bp,   gridsize = 200,   log = \"x\",   n.xbreaks,   n.ybreaks,   x.lim,   y.lim,   pch = 1,   cex.point,   cex.axis = 1,   cex.lab = 1.3,   col = 1,   lwd = 2,   lty = 2,   xlab,   ylab,   legend = TRUE,   legendText,   legendPos,   cex.legend = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"x object class drFitModel, created growth.drFitModel. type (Character) Specify plot data. currently 5 options: \"average\" (averages fitted curve(s); default), \"none\" (fitted curve(s)), \"obs\" (data points), \"\" (data points fitted curve(s)), \"bars\" (averages fitted curve(s) model-based standard errors (see Details)), \"confidence\" (confidence bands fitted curve(s)). ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). add (Logical) TRUE add already existing plot. broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. gridsize (Numeric) Number points grid used plotting fitted curves. log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. pch (Numeric) Symbol used plot data points. cex.point (Numeric) Size raw data points. cex.axis (Numeric) Font size axis annotations. cex.lab (Numeric) Font size axis titles. col (Logical vector colors) TRUE default colours used. FALSE (default) colors used. lwd (Numeric) Line width. lty (Numeric) Specify line type. xlab (Character) optional label x axis. ylab (Character) optional label y axis. legend (Logical) TRUE legend displayed. legendText (Character) Specify legend text (position upper right corner legend box). legendPos (Numeric) Vector length 2 giving position legend. cex.legend numeric specifying legend text size. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"plot dose-response model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = \"test\")  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50       4.08864       0.1018231   3.873812   4.303468 0.4694582 mu.linfit #>        model #> e:1:50  W1.3 plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitSpline objects. — plot.drFitSpline","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"codeplot.drFitSpline generates spline fit plot response-parameter vs. concentration data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"","code":"# S3 method for drFitSpline plot(   x,   add = FALSE,   ec50line = TRUE,   log = \"\",   pch = 16,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"x object class drFitSpline, created growth.drFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.drBootSpline. ec50line (Logical) Show pointed horizontal vertical lines EC50 value (TRUE) (FALSE). log (\"x\", \"y\", \"xy\") Display x- y-axis logarithmic scale. pch (Numeric) Shape raw data symbols. colSpline (Numeric character) Spline line colour. colData (Numeric character) Contour color raw data circles. cex.point (Numeric) Size raw data symbols. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis. x.title (Character) Optional: Provide title x-axis. lwd (Numeric) Line width spline. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"plot nonparametric dose-response fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = \"test\",                      control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.62980069092101 yEC50 0.474696634316247 #> --> Original scale  #> xEC50 4.10285757133402 yEC50 0.474696634316247 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.629801 0.4746966  4.102858  0.4746966   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitFL objects. — plot.drFitfl","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"codedrFitfl calls plot.drFitFLModel group used dose-response analysis dr.method = \"model\"","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"","code":"# S3 method for drFitfl plot(   x,   ec50line = TRUE,   log = c(\"xy\"),   pch = 1,   broken = TRUE,   bp,   n.xbreaks,   n.ybreaks,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"x object class drFit, created growth.drFit. ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. pch (Numeric) Shape raw data symbols. broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. colSpline (Numeric character) Spline line colour. colData (Numeric character) Contour color raw data circles. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. lwd (Numeric) Line width individual splines. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"One plot per condition tested dose-response analysis (fl.drFit control = fl.control(dr.method = \"model\")).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = \"s\",              x_type = \"time\", norm_fl = TRUE,              dr.parameter = \"max_slope.spline\",              dr.method = \"model\",              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = control)  # Perform dose-response analysis with biosensor model drFitfl <- fl.drFit(flTable = res$flTable, control = control)  plot(drFitfl)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"plot.dr_parameter gathers parameters results dose-response analysis compares chosen parameter condition column plot. Error bars represent 95% confidence interval (shown > 2 replicates).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"","code":"# S3 method for dr_parameter plot(   x,   param = c(\"EC50\", \"EC50.Estimate\", \"y.max\", \"y.min\", \"fc\", \"K\", \"n\", \"yEC50\",     \"drboot.meanEC50\", \"drboot.meanEC50y\", \"EC50.orig\", \"yEC50.orig\"),   names = NULL,   exclude.nm = NULL,   basesize = 12,   reference.nm = NULL,   label.size = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"x grofit, drFit, drTable, flFitRes object obtained growth.workflow, growth.drFit, fl.drFit, fl.workflow. param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'y.max', 'y.min', 'fc', 'K', 'n' fluorescence dose-response analyses dr.type = 'model' control argument, 'EC50', 'yEC50', 'drboot.meanEC50', 'drboot.meanEC50y'. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. basesize (Numeric) Base font size. reference.nm (Character) Name reference condition, parameter values normalized. Partially matching strings tolerated long can uniquely identify condition. label.size (Numeric) Font size sample labels x-axis. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"column plot comparing selected parameter dose-response analysis tested conditions.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = \"s\",                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,             control = growth.control(dr.parameter = \"mu.spline\")) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      plot.dr_parameter(drFit, param = 'EC50')  # }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare fluorescence and growth over time — plot.dual","title":"Compare fluorescence and growth over time — plot.dual","text":"plot.dual creates two-panel plot fluorescence growth values shown time, allowing identification , e.g., expression patterns different growth stages.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare fluorescence and growth over time — plot.dual","text":"","code":"# S3 method for dual plot(   x,   fluorescence = c(\"fl\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y.growth = FALSE,   log.y.fl = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim.growth = NULL,   y.lim.fl = NULL,   x.lim = NULL,   x.title = NULL,   y.title.growth = NULL,   y.title.fl = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare fluorescence and growth over time — plot.dual","text":"x flFit, flFitRes, grodata object created flFit, fl.workflow read_data fluorescence (Character) Indicate, type fluorescence data displayed. IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y.growth (Logical) Log-transform y-axis growth plot (TRUE) (FALSE)? log.y.fl (Logical) Log-transform y-axis fluorescence plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim.growth (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.fl (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence plot vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence growth plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.growth (Character) Optional: Provide title y-axis growth plot. y.title.fl (Character) Optional: Provide title y-axis fluorescence plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare fluorescence and growth over time — plot.dual","text":"two-panel plot, showing raw fluorescence (fluorescence = \"fl\") normalized fluorescence (fluorescence = \"norm.fl\") time top panel, growth time bottom panel.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare fluorescence and growth over time — plot.dual","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot.dual(res, legend.ncol = 3, basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flBootSpline objects. — plot.flBootSpline","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"Generic plot function flBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"","code":"# S3 method for flBootSpline plot(   x,   pch = 1,   colData = 1,   deriv = TRUE,   colSpline = \"dodgerblue3\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"x Object class flBootSpline, created flBootSpline. pch (Numeric) Size raw data circles. colData (Numeric Character) Color used plot raw data. deriv (Logical) Show derivatives (.e., slope) time secondary plot (TRUE) (FALSE). colSpline (Numeric Character) Color used plot splines. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether growth curves parameter plots shall shown within window. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"single plot spline fits bootstrapping operation statistical distribution parameters combine = TRUE separate plots fits parameter distributions (combine = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"s\", x_type = \"time\",                        nboot.fl = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"plot.flFitLinear shows results linear regression visualizes raw data, data points included fit, tangent obtained linear regression, lag time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"","code":"# S3 method for flFitLinear plot(   x,   log = \"\",   which = c(\"fit\", \"diagnostics\", \"fit_diagnostics\"),   pch = 21,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   color = \"firebrick3\",   y.lim = NULL,   x.lim = NULL,   plot = TRUE,   export = FALSE,   height = ifelse(which == \"fit\", 7, 5),   width = ifelse(which == \"fit\", 9, 9),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"x flFittedLinear object created flFitLinear stored within flFitRes flFit object created fl.workflow flFit, respectively. log (\"x\" \"y\") Display x- y-axis logarithmic scale. (\"fit\" \"diagnostics\") Display either results linear fit raw data statistical evaluation linear regression. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Line width. color (Character string) Enter color either name (e.g., red, blue, coral3) via hexadecimal code (e.g., #AE4371, #CCFF00FF, #0066FFFF). full list colors available name can found http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"plot linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"l\", x_type = \"time\",                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine different groups of samples into a single plot — plot.flFitRes","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"Visualize fluorescence, normalized fluorescence, spline fits multiple sample groups single plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"","code":"# S3 method for flFitRes plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   deriv = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )  # S3 method for flFit plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   deriv = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"x flFitRes, flFit, grodata object created fl.workflow containing fluorescence data. data.type (Character) Indicate, type fluorescence data displayed. IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? deriv (Logical) Show derivatives time separate panel plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using axisTicks(). Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis fluorescence curve plot. x.title (Character) Optional: Provide title x-axis fluorescence curve derivative plots. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"plot curves (nonparametric fits, raw fluorescence measurements, raw normalized fluorescence time) flFitRes object created fl.workflow, replicates combined group averages (mean = TRUE) (mean = FALSE). plot curves (raw fluorescence measurements raw normalized fluorescence time) flFit object flFit, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"","code":"# \\donttest{ # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot(res, legend.ncol = 3, basesize = 15)  # }  # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = fl.control(fit.opt = \"s\", suppress.messages = TRUE,              x_type = \"time\", norm_fl = TRUE))  plot(res, legend.ncol = 3, basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flFitSpline objects. — plot.flFitSpline","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"plot.flFitSpline generates spline fit plot single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"","code":"# S3 method for flFitSpline plot(   x,   add = FALSE,   raw = TRUE,   slope = TRUE,   deriv = TRUE,   spline = TRUE,   log.y = FALSE,   basesize = 16,   pch = 1,   colData = 1,   colSpline = \"dodgerblue3\",   cex.point = 2,   lwd = 0.7,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   n.ybreaks = 6,   y.title = NULL,   x.title = NULL,   y.title.deriv = NULL,   plot = TRUE,   export = FALSE,   width = 8,   height = ifelse(deriv == TRUE, 8, 6),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"x Object class flFitSpline, created flFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.flBootSpline. raw (Logical) Display raw growth circles (TRUE) (FALSE). slope (Logical) Show slope maximum slope (TRUE) (FALSE). deriv (Logical) Show derivative (.e., slope) time secondary plot (TRUE) (FALSE). spline (Logical) add = TRUE: add current spline existing plot (FALSE). log.y (Logical) Log-transform y-axis (TRUE) (FALSE). basesize (Numeric) Base font size. pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. colSpline (Numeric character) Spline line colour. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using axisTicks(). Thus, final number breaks can deviate user input. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). width (Numeric) Width exported image inches. height (Numeric) Height exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"plot nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"s\", x_type = \"time\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"Generic plot function gcBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"","code":"# S3 method for gcBootSpline plot(   x,   pch = 1,   colData = 1,   deriv = TRUE,   colSpline = \"dodgerblue3\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"x object class gcBootSpline, created growth.gcBootSpline. pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. deriv (Logical) Show derivatives (.e., slope) time secondary plot (TRUE) (FALSE). colSpline (Numeric character) Spline line colour. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether growth curves parameter plots shall shown within window. ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"single plot spline growth fits bootstrapping operation statistical distribution growth parameters combine = TRUE separate plots growth fits parameter distributions (combine = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = \"TestFit\",               control = growth.control(fit.opt = \"s\", nboot.gc = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"plot.gcFitLinear shows results linear regression log-transformed data visualizes raw data, data points included fit, tangent obtained linear regression, lag time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"","code":"# S3 method for gcFitLinear plot(   x,   log = \"y\",   which = c(\"fit\", \"diagnostics\", \"fit_diagnostics\"),   pch = 21,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   color = \"firebrick3\",   y.lim = NULL,   x.lim = NULL,   plot = TRUE,   export = FALSE,   height = ifelse(which == \"fit\", 7, 5),   width = ifelse(which == \"fit\", 9, 9),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"x gcFittedLinear object created growth.gcFitLinear stored within grofit gcFit object created growth.workflow growth.gcFit, respectively. log (\"x\" \"y\") Display x- y-axis logarithmic scale. (\"fit\" \"diagnostics\") Display either results linear fit raw data statistical evaluation linear regression. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Line width. color (Character string) Enter color either name (e.g., red, blue, coral3) via hexadecimal code (e.g., #AE4371, #CCFF00FF, #0066FFFF). full list colors available name can found http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"plot linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"l\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFitModel objects. — plot.gcFitModel","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"Plot results parametric model fit growth vs. time data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"","code":"# S3 method for gcFitModel plot(   x,   raw = TRUE,   pch = 1,   colData = 1,   equation = TRUE,   eq.size = 1,   colModel = \"forestgreen\",   basesize = 16,   cex.point = 2,   lwd = 0.7,   x.lim = NULL,   y.lim = NULL,   n.ybreaks = 6,   plot = TRUE,   export = FALSE,   height = 6,   width = 8,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"x gcFittedModel object created growth.gcFitModel stored within grofit gcFit object created growth.workflow growth.gcFit, respectively. raw (Logical) Show raw data within plot (TRUE) (FALSE). pch (Numeric) Symbol used plot data points. colData (Numeric Character) Color used plot raw data. equation (Logical) Show equation fitted model within plot (TRUE) (FALSE). eq.size (Numeric) Provide value scale size displayed equation. colModel (Numeric Character) Color used plot fitted model. basesize (Numeric) Base font size. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated ggplot2 plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"plot parametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"m\")) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  plot(TestFit, basesize = 18, eq.size = 1.5) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"codeplot.gcFitSpline generates spline fit plot single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"","code":"# S3 method for gcFitSpline plot(   x,   add = FALSE,   raw = TRUE,   slope = TRUE,   deriv = TRUE,   spline = TRUE,   log.y = TRUE,   pch = 1,   colData = 1,   colSpline = \"dodgerblue3\",   basesize = 16,   cex.point = 2,   lwd = 0.7,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   n.ybreaks = 6,   y.title = NULL,   x.title = NULL,   y.title.deriv = NULL,   plot = TRUE,   export = FALSE,   width = 8,   height = ifelse(deriv == TRUE, 8, 6),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"x object class gcFitSpline, created growth.gcFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.gcBootSpline. raw (Logical) Display raw growth circles (TRUE) (FALSE). slope (Logical) Show slope maximum growth rate (TRUE) (FALSE). deriv (Logical) Show derivative (.e., slope) time secondary plot (TRUE) (FALSE). spline (Logical) add = TRUE: add current spline existing plot (FALSE). log.y (Logical) Log-transform y-axis (TRUE) (FALSE). pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. colSpline (Numeric character) Spline line colour. basesize (Numeric) Base font size. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). width (Numeric) Width exported image inches. height (Numeric) Height exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot (add = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"plot nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform spline fit TestFit <- growth.gcFitSpline(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"s\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a matrix of growth curve panels — plot.grid","title":"Plot a matrix of growth curve panels — plot.grid","text":"plot.grid takes grofit flFitRes object returns facet grid individual growth fluorescence plots","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a matrix of growth curve panels — plot.grid","text":"","code":"# S3 method for grid plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   param = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu2.linfit\",     \"lambda2.linfit\", \"mu.model\", \"lambda.model\", \"A.model\", \"A.orig.model\", \"dY.model\",     \"dY.orig.model\", \"tD.linfit\", \"tD2.linfit\", \"tD.spline\", \"tD2.spline\", \"mu.spline\",     \"lambda.spline\", \"A.spline\", \"dY.spline\", \"integral.spline\", \"mu2.spline\",     \"lambda2.spline\", \"mu.bt\", \"lambda.bt\", \"A.bt\", \"integral.bt\", \"max_slope.linfit\",     \"max_slope.spline\"),   pal = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\", \"Cyan\",     \"Brown\", \"Mint\"),   invert.pal = FALSE,   IDs = NULL,   sort_by_ID = FALSE,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   mean = TRUE,   log.y = TRUE,   n.ybreaks = 6,   sort_by_conc = TRUE,   nrow = NULL,   basesize = 20,   y.lim = NULL,   x.lim = NULL,   legend.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 1.1,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a matrix of growth curve panels — plot.grid","text":"x grofit flFitRes object created growth.workflow codefl.workflow containing spline fits. data.type (Character) Plot either raw data (data.type = \"raw\") spline fit results param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'mu.linfit', 'lambda.linfit', 'dY.linfit', '.linfit', 'mu.model', 'lambda.model', '.model', 'mu.spline', 'lambda.spline', '.spline', 'dY.spline', 'integral.spline', 'mu.bt', 'lambda.bt', '.bt', 'integral.bt' pal (Character string) Choose one 'Green',   'Orange',  'Purple',  'Magenta', 'Grey', 'Blue', 'Grey', 'Red', 'Cyan', 'Brown', 'Mint' visualize value parameter chosen param sample condition. invert.pal (Logical) Shall colors chosen pal inverted (TRUE) FALSE? IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. order strings within vector defines order samples within grid. sort_by_ID (Logical) Shall samples/conditions ordered entered IDs (TRUE) alphabetically (FALSE)? names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)?#' n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. sort_by_conc (Logical) Shall samples/conditions sorted concentrations rows groups columns? nrow (Numeric) Defines number rows grid sort_by_conc FALSE. basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. legend.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds color scale applied param vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. lwd (Numeric) Line width individual plots. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a matrix of growth curve panels — plot.grid","text":"plot matrix growth curves (raw measurements nonparametric fits) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a matrix of growth curve panels — plot.grid","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        suppress.messages = TRUE,                        parallelize = FALSE)   plot.grid(res, param = \"mu.spline\")"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"plot.grodata calls plot.grofit plot.flFitRes based chosen data.type, respectively.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"","code":"# S3 method for grodata plot(   x,   data.type = c(\"growth\", \"fl\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"x grodata object created read_data parse_data. data.type (Character) Plot either raw growth (data.type = \"growth\"), raw fluorescence (data.type = \"fl\"), fluorescence normalized growth (data.type = \"norm.fl\"). IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"plot growth curves (raw measurements) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"","code":"# Create random growth data sets rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  # Create dataframe with both data sets and a single time vector time <- as.data.frame(matrix(t(c(\"Time\",NA,NA, rnd.data1$time[1,])),nrow=1),              stringsAsFactors=FALSE) colnames(time) <- colnames(rnd.data1$data) data <- rbind(time, rnd.data1$data, rnd.data2$data)   # Create a grodata object grodata <- read_data(data.growth = data, data.format = \"row\") #> Sample data are stored in rows. If they are stored in column format, please run read_data() with data.format = 'col'.  plot(grodata, exclude.nm = \"Test1\", legend.ncol = 4)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"plot.grofit extracts spline fits subset samples grofit object calculates averages standard deviations conditions replicates combines single plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"","code":"# S3 method for grofit plot(   x,   ...,   data.type = c(\"spline\", \"raw\"),   IDs = NULL,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   mean = TRUE,   log.y = TRUE,   deriv = TRUE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"x grofit object created growth.workflow containing spline fits. ... (optional) Additional grofit objects created separate workflows joint plotting single graph. data.type (Character) Plot either raw data (data.type = \"raw\") spline fit results IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? deriv (Logical) Show derivatives time separate panel plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"plot growth curves (raw measurements nonparametric fits) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        suppress.messages = TRUE,                        parallelize = FALSE)   plot(res, names = \"Test1\", legend.ncol = 4) # Show only samples for condition \"Test1\""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare growth parameters between samples or conditions — plot.parameter","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"plot.parameter gathers physiological parameters results growth fit analysis compares chosen parameter sample condition column plot. Error bars represent 95% confidence interval (shown > 2 replicates).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"","code":"# S3 method for parameter plot(   x,   param = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu2.linfit\",     \"lambda2.linfit\", \"mu.model\", \"lambda.model\", \"A.model\", \"A.orig.model\", \"dY.model\",     \"dY.orig.model\", \"tD.linfit\", \"tD2.linfit\", \"tD.spline\", \"tD2.spline\", \"mu.spline\",     \"lambda.spline\", \"A.spline\", \"dY.spline\", \"integral.spline\", \"mu2.spline\",     \"lambda2.spline\", \"mu.bt\", \"lambda.bt\", \"A.bt\", \"integral.bt\", \"max_slope.linfit\",     \"max_slope.spline\"),   IDs = NULL,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   reference.nm = NULL,   reference.conc = NULL,   order_by_conc = FALSE,   colors = NULL,   basesize = 12,   label.size = NULL,   shape.size = 2.5,   legend.position = \"right\",   legend.ncol = 1,   plot = TRUE,   export = FALSE,   height = 7,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"x grofit, gcFit, gcTable object obtained growth.workflow growth.gcFit. param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'mu.linfit', 'lambda.linfit', 'dY.linfit', '.linfit', 'mu.model', 'lambda.model', '.model', 'mu.spline', 'lambda.spline', '.spline', 'dY.spline', 'integral.spline', 'mu.bt', 'lambda.bt', '.bt', 'integral.bt' IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. reference.nm (Character) Name reference condition, parameter values normalized. Partially matching strings tolerated long can uniquely identify condition. reference.conc (Numeric) Concentration reference condition, parameter values normalized. order_by_conc (Logical) Shall columns sorted order ascending concentrations (TRUE) sample groups FALSE? colors (vector strings) Define color palette used draw columns. NULL, default palettes chosen. Note: number provided colors least match number groups. basesize (Numeric) Base font size. label.size (Numeric) Font size sample labels x-axis. shape.size (Numeric) size symbols indicating replicate values. Default: 2.5 legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"column plot comparing selected growth parameter tested conditions.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)   plot.parameter(res,                param = \"mu.spline\",                legend.ncol = 4,                legend.position = \"bottom\",                basesize = 15,                label.size = 11)"},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":null,"dir":"Reference","previous_headings":"","what":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"function calls baranyi function generate curves time zero t adds random noise x- y-axes. three growth parameters given input values slightly changed produce different growth curves. resulting datasets can used test growth.workflow function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"","code":"rdm.data(d, y0 = 0.05, tmax = 24, mu = 0.6, lambda = 5, A = 3, label = \"Test1\")"},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"d Numeric value, number data sets. d vector, first entry used. y0 Numeric value, start growth. t vector, first entry used. tmax Numeric value, number time points per data set. t vector, first entry used. mu Numeric value, maximum slope. mu vector, first entry used. lambda Numeric value, lag-phase. lambda vector, first entry used. Numeric value, maximum growth. vector, first entry used. label Character string, condition label  label vector, first entry used.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"list containing simulated data three tests (e.g., 'organisms'): time numeric matrix size dxt, row represent time points growth data simulated stored row data. data data.frame size dx(3+t), 1. column, character experiment identifier; 2. column: Replicate number; 3. column: concentration substrate compound experiment obtained; 4.-(3+t). column: growth data corresponding time points time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # \\donttest{ # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,              control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1588760     0.002772677  0.1532283  0.1645238 #> 2 Test2 FALSE FALSE       0     0.1154314     0.001625024  0.1121214  0.1187415 #>       yEC50      test model #> 1 0.3306216 mu.spline  W1.3 #> 2 0.2365277 mu.spline  W1.3 plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read growth and fluorescence data in table format — read_data","title":"Read growth and fluorescence data in table format — read_data","text":"read_data reads table files R dataframe objects containing growth fluorescence data extracts datasets, sample group information, performs blank correction, applies data transformation (calibration), combines technical replicates.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read growth and fluorescence data in table format — read_data","text":"","code":"read_data(   data.growth = NA,   data.fl = NA,   data.fl2 = NA,   data.format = \"col\",   csvsep = \";\",   dec = \".\",   csvsep.fl = \";\",   dec.fl = \".\",   csvsep.fl2 = \";\",   dec.fl2 = \".\",   sheet.growth = 1,   sheet.fl = 1,   sheet.fl2 = 1,   fl.normtype = c(\"growth\", \"fl2\"),   subtract.blank = TRUE,   convert.time = NULL,   calib.growth = NULL,   calib.fl = NULL,   calib.fl2 = NULL )"},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read growth and fluorescence data in table format — read_data","text":"data.growth R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing growth data. data must either 'QurvE custom layout' 'tidy' (long) format. first three table rows 'custom QurvE layout' contain: Sample description Replicate number (optional: followed letter indicate technical replicates) Concentration value (optional) Data 'tidy' format requires following column headers: \"Time\": time values \"Description\": sample description \"Replicate\": replicate number (optional) \"Concentration\": concentration value (optional) \"Values\": growth values (e.g., optical density) data.fl (optional) R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing fluorescence data. Table layout must mimic data.growth. data.fl2 (optional) R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing measurements second fluorescence channel (used normalize fluorescence data). Table layout must mimic data.growth. data.format (Character) \"col\" samples columns, \"row\" samples rows. Default: \"col\" csvsep (Character) separator used CSV file storing growth data (ignored file types). Default: \";\" dec (Character) decimal separator used CSV, TSV TXT file storing growth data. Default: \".\" csvsep.fl, csvsep.fl2 (Character) separator used CSV file storing fluorescence data (ignored file types). Default: \";\" dec.fl, dec.fl2 (Character) decimal separator used CSV, TSV TXT file storing fluorescence data. Default: \".\" sheet.growth, sheet.fl, sheet.fl2 (Numeric Character) Number name sheet respective data type XLS XLSX files (optional). fl.normtype (Character string) Normalize fluorescence values either diving 'growth' fluorescence2 values ('fl2'). subtract.blank (Logical) Shall blank values subtracted values within experiment (TRUE, default) (FALSE). convert.time (NULL string) Convert time values formula provided form 'y = function(x)'. example: convert.time = 'y = 24 * x' calib.growth, calib.fl, calib.fl2 (Character NULL) Provide equation form 'y = function(x)' (example: 'y = x^2 * 0.3 - 0.5') convert growth fluorescence values. can used , e.g., convert plate reader absorbance values OD600 fluorescence intensity molecule concentrations. Caution!: utilizing calibration, carefully consider whether blanks subtracted determine calibration selecting input subtract.blank = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read growth and fluorescence data in table format — read_data","text":"R list object class grodata containing time matrix, dataframes growth fluorescence data (applicable), experimental design table. grodata object can directly used run growth.workflow/fl.workflow , together growth.control/fl.control object, growth.gcFit/flFit. time Matrix raw time values extracted data.growth. growth Dataframe raw growth values sample identifiers extracted data.growth. fluorescence Dataframe raw fluorescence values sample identifiers extracted data.fl. NA, fluorescence data provided. norm.fluorescence fluorescence data divided growth values. NA, fluorescence data provided. expdesign Experimental design table created first three identifier rows/columns (see argument data.format) (data.growth.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read growth and fluorescence data in table format — read_data","text":"","code":"# Load CSV file containing only growth data data_growth <- read_data(data.growth = system.file(\"2-FMA_toxicity.csv\",                          package = \"QurvE\"), csvsep = \";\" ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Load XLSX file containing both growth and fluorescence data data_growth_fl <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                             sheet.growth = \"OD\",                             data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                             sheet.fl = 2) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'."},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"read_file automatically detects format file provided filename calls appropriate function read table file.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"","code":"read_file(filename, csvsep = \";\", dec = \".\", sheet = 1)"},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"filename (Character) Name path table file read. Can type CSV, XLS, XLSX, TSV, TXT. csvsep (Character) separator used CSV file (ignored file types). dec (Character) decimal separator used CSV, TSV TXT files. sheet (Numeric Character) Number name sheet XLS XLSX files (optional). Default: \";\"","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"dataframe object headers first row.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"","code":"input <- read_file(filename = system.file(\"2-FMA_toxicity.csv\", package = \"QurvE\"), csvsep = \";\" )"},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny QurvE App — run_app","title":"Run Shiny QurvE App — run_app","text":"Run Shiny QurvE App","code":""},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny QurvE App — run_app","text":"","code":"run_app()"},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Shiny QurvE App — run_app","text":"Launches browser shiny app","code":""},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Shiny QurvE App — run_app","text":"","code":"if(interactive()){ # Run the app run_app() }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drBootSpline objects — summary.drBootSpline","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"Generic summary function drBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"","code":"# S3 method for drBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"object object class drBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"dataframe statistical parameters extracted dose-response bootstrapping analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = 'test',         control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8, nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.914673029438997 StDev :  0.0611634658843753  #> 90% CI:  0.912660751411401 90% CI:  0.916685307466593 #> 95% CI:  0.91227542157633 95% CI:  0.917070637301665 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.49595901335034  #> 90% CI:  1.49094149987915 90% CI:  1.50098663361907 #> 95% CI:  1.48998185070443 95% CI:  1.50195052408207 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1        0.914673    0.06116347        0.5277334     0.08246152 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.8140591           1.015287          0.7947926           1.034553 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.495959                1.257051                1.760155 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                1.213982                1.813849"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFit objects — summary.drFit","title":"Generic summary function for drFit objects — summary.drFit","text":"Generic summary function drFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFit objects — summary.drFit","text":"","code":"# S3 method for drFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFit objects — summary.drFit","text":"object object class drFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFit objects — summary.drFit","text":"dataframe parameters samples extracted dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFit objects — summary.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,                  control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1569230     0.002425114  0.1519832  0.1618628 #> 2 Test2 FALSE FALSE       0     0.1155311     0.001725849  0.1120157  0.1190466 #>       yEC50      test model #> 1 0.3323605 mu.spline  W1.3 #> 2 0.2357320 mu.spline  W1.3 # }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"Generic summary function drFitFLModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"","code":"# S3 method for drFitFLModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"object object class drFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"dataframe biosensor response parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = 'test', control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.516 | yEC50: 3101 | fold change: 27.29 | leakiness: 219.2 #>  #>   print(summary(TestRun)) #>      yEC50    y.min    y.max       fc         K        n yEC50.orig    K.orig #> 1 3100.889 219.2335 5982.544 27.28845 0.5159924 2.025121   3100.889 0.5159924 #>   test #> 1   NA"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitModel objects — summary.drFitModel","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"Generic summary function drFitModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"","code":"# S3 method for drFitModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"object object class drFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"dataframe parameters extracted dose-response analysis single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = 'test')  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50      4.050301        0.085376   3.870174   4.230429 0.4651913 mu.linfit #>        model #> e:1:50  W1.3"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitSpline objects — summary.drFitSpline","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"Generic summary function drFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"","code":"# S3 method for drFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"object object class drFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"dataframe parameters extracted dose-response analysis single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = 'test',               control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.61779921307918 yEC50 0.47416028128924 #> --> Original scale  #> xEC50 4.04198176974139 yEC50 0.47416028128924 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.617799 0.4741603  4.041982  0.4741603   NA"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitfl objects — summary.drFitfl","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"Generic summary function drFitfl objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"","code":"# S3 method for drFitfl summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"object object class drFitfl ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"dataframe parameters samples extracted dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = 's',              x_type = 'time', norm_fl = TRUE,              dr.parameter = 'max_slope.spline',              dr.method = 'model',              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = control)  # Perform dose-response analysis with biosensor model drFitfl <- fl.drFit(flTable = res$flTable, control = control)  summary(drFitfl) #>             Test log.x log.y    yEC50    y.min    y.max        fc          K #> 1 pSEVA634rκ∙GFP FALSE FALSE 205.9582 64.17578 347.7406  5.418564 0.01018009 #> 2  pSEVA634r∙GFP FALSE FALSE 190.4524 30.77274 350.1320 11.377993 0.04563558 #> 3   pSEVA634∙GFP FALSE FALSE 446.4529 92.26689 800.6389  8.677423 0.03285860 #>           n yEC50.orig     K.orig             test #> 1 0.9764883   205.9582 0.01018009 max_slope.spline #> 2 2.7157213   190.4524 0.04563558 max_slope.spline #> 3 1.1757158   446.4529 0.03285860 max_slope.spline"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flBootSpline objects — summary.flBootSpline","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"Generic summary function flBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"","code":"# S3 method for flBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"object object class flBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"dataframe statistical parameters extracted dose-response bootstrapping analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time',                        nboot.fl = 50))  summary(TestFit) #>       max_slope.bt        lambda.bt             A.bt            dY.bt #> 1 241.942209561106 14.9683914347486 7555.64792998561 6032.01440488256 #>        integral.bt  stdmax_slope.bt      stdlambda.bt          stdA.bt #> 1 148619.682246431 2.17005298779539 0.309031494161157 63.0283033824399 #>           stddY.bt   stdintegral.bt reliable_fit.bt    ci90.mu.bt.lo #> 1 101.800506676547 3325.27944144569            TRUE 238.372472396182 #>      ci90.mu.bt.up ci90.lambda.bt.lo ci90.lambda.bt.up    ci90.A.bt.lo #> 1 245.511946726029  14.4600346268535  15.4767482426437 7451.9663709215 #>       ci90.A.bt.up ci90.integral.bt.lo ci90.integral.bt.up    ci95.mu.bt.lo #> 1 7659.32948904973    143149.597565252    154089.766927609 237.688905705027 #>      ci95.mu.bt.up ci95.lambda.bt.lo ci95.lambda.bt.up     ci95.A.bt.lo #> 1 246.195513417185  14.3626897061927  15.5740931633045 7432.11245535603 #>      ci95.A.bt.up ci95.integral.bt.lo ci95.integral.bt.up #> 1 7679.1834046152    142102.134541197    155137.229951664"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFit objects — summary.flFit","title":"Generic summary function for flFit objects — summary.flFit","text":"Generic summary function flFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFit objects — summary.flFit","text":"","code":"# S3 method for flFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFit objects — summary.flFit","text":"object object class flFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFit objects — summary.flFit","text":"dataframe parameters extracted fits workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFit objects — summary.flFit","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = fl.control(fit.opt = 's', suppress.messages = TRUE,              x_type = 'time', norm_fl = TRUE, nboot.fl = 20))  summary(res) #>            TestId AddId concentration reliability_tag log.x.spline log.y.spline #> 1    pSEVA634∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 2   pSEVA634r∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 3  pSEVA634rκ∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 4    pSEVA634∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 5   pSEVA634r∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 6  pSEVA634rκ∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 7    pSEVA634∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 8   pSEVA634r∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 9  pSEVA634rκ∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 10   pSEVA634∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 11  pSEVA634r∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 12 pSEVA634rκ∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 13   pSEVA634∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 14  pSEVA634r∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 15 pSEVA634rκ∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 16   pSEVA634∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 17  pSEVA634r∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 18 pSEVA634rκ∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 19   pSEVA634∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 20  pSEVA634r∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 21 pSEVA634rκ∙GFP  <NA>             1            TRUE        FALSE        FALSE #>    log.x.lin log.y.lin nboot.fl max_slope.linfit lambda.linfit dY.linfit #> 1      FALSE     FALSE       20                0          <NA>      <NA> #> 2      FALSE     FALSE       20                0          <NA>      <NA> #> 3      FALSE     FALSE       20                0          <NA>      <NA> #> 4      FALSE     FALSE       20                0          <NA>      <NA> #> 5      FALSE     FALSE       20                0          <NA>      <NA> #> 6      FALSE     FALSE       20                0          <NA>      <NA> #> 7      FALSE     FALSE       20                0          <NA>      <NA> #> 8      FALSE     FALSE       20                0          <NA>      <NA> #> 9      FALSE     FALSE       20                0          <NA>      <NA> #> 10     FALSE     FALSE       20                0          <NA>      <NA> #> 11     FALSE     FALSE       20                0          <NA>      <NA> #> 12     FALSE     FALSE       20                0          <NA>      <NA> #> 13     FALSE     FALSE       20                0          <NA>      <NA> #> 14     FALSE     FALSE       20                0          <NA>      <NA> #> 15     FALSE     FALSE       20                0          <NA>      <NA> #> 16     FALSE     FALSE       20                0          <NA>      <NA> #> 17     FALSE     FALSE       20                0          <NA>      <NA> #> 18     FALSE     FALSE       20                0          <NA>      <NA> #> 19     FALSE     FALSE       20                0          <NA>      <NA> #> 20     FALSE     FALSE       20                0          <NA>      <NA> #> 21     FALSE     FALSE       20                0          <NA>      <NA> #>    A.linfit x.mu.start.linfit x.mu.end.linfit r2mu.linfit reliable_fit.linfit #> 1      <NA>              <NA>            <NA>        <NA>               FALSE #> 2      <NA>              <NA>            <NA>        <NA>               FALSE #> 3      <NA>              <NA>            <NA>        <NA>               FALSE #> 4      <NA>              <NA>            <NA>        <NA>               FALSE #> 5      <NA>              <NA>            <NA>        <NA>               FALSE #> 6      <NA>              <NA>            <NA>        <NA>               FALSE #> 7      <NA>              <NA>            <NA>        <NA>               FALSE #> 8      <NA>              <NA>            <NA>        <NA>               FALSE #> 9      <NA>              <NA>            <NA>        <NA>               FALSE #> 10     <NA>              <NA>            <NA>        <NA>               FALSE #> 11     <NA>              <NA>            <NA>        <NA>               FALSE #> 12     <NA>              <NA>            <NA>        <NA>               FALSE #> 13     <NA>              <NA>            <NA>        <NA>               FALSE #> 14     <NA>              <NA>            <NA>        <NA>               FALSE #> 15     <NA>              <NA>            <NA>        <NA>               FALSE #> 16     <NA>              <NA>            <NA>        <NA>               FALSE #> 17     <NA>              <NA>            <NA>        <NA>               FALSE #> 18     <NA>              <NA>            <NA>        <NA>               FALSE #> 19     <NA>              <NA>            <NA>        <NA>               FALSE #> 20     <NA>              <NA>            <NA>        <NA>               FALSE #> 21     <NA>              <NA>            <NA>        <NA>               FALSE #>    max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1               <NA>               <NA>             <NA>         <NA> #> 2               <NA>               <NA>             <NA>         <NA> #> 3               <NA>               <NA>             <NA>         <NA> #> 4               <NA>               <NA>             <NA>         <NA> #> 5               <NA>               <NA>             <NA>         <NA> #> 6               <NA>               <NA>             <NA>         <NA> #> 7               <NA>               <NA>             <NA>         <NA> #> 8               <NA>               <NA>             <NA>         <NA> #> 9               <NA>               <NA>             <NA>         <NA> #> 10              <NA>               <NA>             <NA>         <NA> #> 11              <NA>               <NA>             <NA>         <NA> #> 12              <NA>               <NA>             <NA>         <NA> #> 13              <NA>               <NA>             <NA>         <NA> #> 14              <NA>               <NA>             <NA>         <NA> #> 15              <NA>               <NA>             <NA>         <NA> #> 16              <NA>               <NA>             <NA>         <NA> #> 17              <NA>               <NA>             <NA>         <NA> #> 18              <NA>               <NA>             <NA>         <NA> #> 19              <NA>               <NA>             <NA>         <NA> #> 20              <NA>               <NA>             <NA>         <NA> #> 21              <NA>               <NA>             <NA>         <NA> #>    reliable_fit2.linfit max_slope.spline x.max.spline     lambda.spline #> 1                 FALSE 92.2668917228958         20.5  15.5467166096303 #> 2                 FALSE 30.7727385498335           20  31.2872267087632 #> 3                 FALSE 64.1757831646139           16  20.8131240327297 #> 4                 FALSE 242.557704041646         23.5  14.9826287460236 #> 5                 FALSE 64.6529094536623           19  21.6712998092259 #> 6                 FALSE  205.57971913027           18  12.5662904914234 #> 7                 FALSE 509.394721871896         21.5  6.95952698278297 #> 8                 FALSE 204.031623957343         17.5  13.4360564669418 #> 9                 FALSE 290.961299939386           13  4.67379381987587 #> 10                FALSE 670.985334314907            6 0.373248436531114 #> 11                FALSE 327.194544214622           17  9.86802427129628 #> 12                FALSE 335.243584785665         17.5  3.65080407904781 #> 13                FALSE 728.625260083635          6.5  0.55381657857781 #> 14                FALSE  346.26811325449         16.5  9.75821807365777 #> 15                FALSE 320.246598452125         17.5  3.21350390586794 #> 16                FALSE 774.053986420781          5.5 0.246732777852532 #> 17                FALSE 337.909403917518         16.5  8.08916482172027 #> 18                FALSE 351.643501664605           18   4.8448445225091 #> 19                FALSE 779.134078966908            6 0.462268482214881 #> 20                FALSE 353.185039298378         16.5  9.57178508598632 #> 21                FALSE 338.826806405153           18  5.01597033523575 #>    max_slope2.spline x.max2.spline lambda2.spline        y0.spline #> 1               <NA>          <NA>           <NA>  1291.4242870252 #> 2               <NA>          <NA>           <NA> 1188.27831547782 #> 3               <NA>          <NA>           <NA> 1565.59217809736 #> 4               <NA>          <NA>           <NA> 1519.80363776351 #> 5               <NA>          <NA>           <NA>  1255.7213080438 #> 6               <NA>          <NA>           <NA> 1624.15289883901 #> 7               <NA>          <NA>           <NA> 1132.18524639308 #> 8               <NA>          <NA>           <NA> 1405.71652864703 #> 9               <NA>          <NA>           <NA> 1468.52438340082 #> 10              <NA>          <NA>           <NA> 1209.47395589044 #> 11              <NA>          <NA>           <NA> 1187.83879461913 #> 12              <NA>          <NA>           <NA> 1467.93981010311 #> 13              <NA>          <NA>           <NA> 891.795404947046 #> 14              <NA>          <NA>           <NA> 1282.77700477438 #> 15              <NA>          <NA>           <NA> 1542.64869773804 #> 16              <NA>          <NA>           <NA> 1132.44043950228 #> 17              <NA>          <NA>           <NA> 862.662992687728 #> 18              <NA>          <NA>           <NA> 1602.42470098365 #> 19              <NA>          <NA>           <NA> 1017.04362101536 #> 20              <NA>          <NA>           <NA>  1323.6959493112 #> 21              <NA>          <NA>           <NA> 1707.52183129309 #>            A.spline        dY.spline  integral.spline reliable_fit.spline #> 1  3427.12552423136 2135.70123720616 82881.4064741573                TRUE #> 2  1470.99207749984 282.713762022016 43222.9360971387                TRUE #> 3  2196.18856426073 630.596386163375 67033.6678589487                TRUE #> 4   7592.8006375136 6072.99699975009 151370.675832013                TRUE #> 5  2384.30375521353 1128.58244716973 58249.0814015739                TRUE #> 6  4820.28715109277 3196.13425225376 132414.081549266                TRUE #> 7  17121.2144379567 15989.0291915636 367233.851934484                TRUE #> 8  5206.54317686809 3800.82664822106 120525.231431367                TRUE #> 9   7768.1886699261 6299.66428652528 223919.428584981                TRUE #> 10  20079.009500852 18869.5355449615 490254.828661571                TRUE #> 11 6840.37784263307 5652.53904801394 169914.301957325                TRUE #> 12 9191.86346478597 7723.92365468286 269744.222628615                TRUE #> 13 20481.0977680944 19589.3023631473 497122.375105376                TRUE #> 14 7000.84532046274 5718.06831568836 179100.135589319                TRUE #> 15 9006.21056404742 7463.56186630938 267724.576457374                TRUE #> 16 20704.0909872883  19571.650547786 520199.730690859                TRUE #> 17 6952.68659445913  6090.0236017714 178120.140852738                TRUE #> 18 9322.62835009371 7720.20364911006 273698.194402021                TRUE #> 19 19774.7021395644  18757.658518549 508722.732093214                TRUE #> 20 7189.59680355257 5865.90085424137 182547.707805717                TRUE #> 21 9258.53106887535 7551.00923758226 271383.083788706                TRUE #>    reliable_fit2.spline smooth.spline     max_slope.bt         lambda.bt #> 1                 FALSE          0.75 93.0894682252451  15.5340042572768 #> 2                 FALSE          0.75 32.0495772563672  30.9046551988378 #> 3                 FALSE          0.75 65.3829737210963  21.2099708097334 #> 4                 FALSE          0.75 242.280029606264  14.8763364059805 #> 5                 FALSE          0.75 65.4366251162898  22.5325726246374 #> 6                 FALSE          0.75 205.619539344714  12.4569007053025 #> 7                 FALSE          0.75 514.873585550747  7.30228751327026 #> 8                 FALSE          0.75 200.774428918002  13.1595173301919 #> 9                 FALSE          0.75 293.578466017421  4.71377706572094 #> 10                FALSE          0.75 659.733503211847 0.478993058091008 #> 11                FALSE          0.75 319.410931924262  9.68855444156247 #> 12                FALSE          0.75 331.685446264404  3.70405255861831 #> 13                FALSE          0.75 740.737530016558 0.788607873392764 #> 14                FALSE          0.75 342.623821046306  9.81730696456535 #> 15                FALSE          0.75 319.207591535787  3.38382977895614 #> 16                FALSE          0.75 769.227968371615 0.430692729422154 #> 17                FALSE          0.75 340.118127637363  8.07924761334738 #> 18                FALSE          0.75  350.90762347745  5.00577637582048 #> 19                FALSE          0.75 769.740912654494 0.638361542024679 #> 20                FALSE          0.75 347.808039789154  9.51304677874319 #> 21                FALSE          0.75 336.919743941324  5.25530826731021 #>                A.bt            dY.bt      integral.bt  stdmax_slope.bt #> 1  3419.94805253881 2131.27344077127 82084.6223234082 3.17932438497924 #> 2  1449.49143553829 277.422333389824  42357.325746103  2.1386467436452 #> 3  2194.95220897468 633.535011903945 66550.4725782615  1.6496335811459 #> 4  7550.96013962929 6055.09388792434 148698.256883707 2.58979139964009 #> 5  2334.76054346746 1096.10447899394 56372.7760128771 3.15773572464059 #> 6  4821.97161730101 3224.23481973511 130242.194344898 2.25240070918384 #> 7  17060.8893772987  15832.020670818 362377.894785149 7.90618670354183 #> 8  5177.05458308315 3807.07193728419 118370.727269745 10.8493982988775 #> 9  7767.29835738529 6293.78033986627 219320.347077658 6.61139504682504 #> 10 20110.8448515342 18759.4240180852 486571.143833443 16.0353036632381 #> 11 6806.42769834596 5605.76135796975 169149.112094225 14.2461060188919 #> 12 9186.56945557938   7644.436854738 266904.638507535 5.22511357044321 #> 13 20467.5229481773 19458.2189384116 492004.421886316 25.2662359041115 #> 14 6960.66050184381 5666.05209789365 175425.172739733 13.4851769186802 #> 15 9006.35261244683 7395.53183097686 263681.097485525  6.0896183561833 #> 16 20665.0634861881 19344.6401606472 514436.607245381 20.2619636000566 #> 17 6895.79587607707 6057.11475950198 175088.592475529 12.4611105751518 #> 18 9324.63295275177 7662.01114526548 272113.820109863 6.54308764334506 #> 19 19761.6437628137 18556.3994420251 502448.363036101 21.8257515655317 #> 20  7140.5394069093 5819.20701386701 179836.034883019 10.7079854433333 #> 21 9256.83274977645 7439.75196057704 268550.713519288 8.12948228464165 #>         stdlambda.bt          stdA.bt         stddY.bt   stdintegral.bt #> 1  0.523206128902734 13.4372884973209 47.4904383628492 1095.67071673997 #> 2   2.63315620314439  17.914205636501 80.6574531184791 802.528966448015 #> 3   1.42188644385834 4.53167009107663 81.8331879406589 576.351104426407 #> 4  0.330207967597156 93.8175103915491 107.262782977699  4843.1685260869 #> 5   2.35676397112564 81.6597878293663 157.455117624082 3045.45546115412 #> 6  0.604952385813699 11.3468970321411 127.718726454585 3458.72288224086 #> 7  0.358163045570587 150.755757574382 199.051640253041 8120.56798791026 #> 8  0.609989386285446 56.8711547710857 109.692452329857 3092.06563319137 #> 9  0.293171400138908 24.1923321753381 91.6460752189616 4526.67012435691 #> 10 0.300785578585808 68.5220342304489  195.30041255999 7945.37039402138 #> 11 0.740707399346723 43.8465367897691 140.910277570378 1561.19732060619 #> 12 0.637230960815745  11.891996147046 170.193814157159 4624.94960082992 #> 13 0.401373293910512  96.792711998917 279.058533956808 9573.00627163506 #> 14 0.885763111177539 54.0762962190114 252.160644954572 3546.25851974049 #> 15 0.553934758148926 16.3223864237079 158.264502581002 6273.12752607298 #> 16  0.27979972869282 87.9325150354407  202.95376373603 8642.66525426495 #> 17 0.569207295552142 135.010238882566  200.14781090401 5541.18818194796 #> 18  0.33718504978619 7.35935270254445 97.6707140939635 3422.79748220547 #> 19 0.304363719367686 76.0811410166699 197.661137891165 7447.82755729607 #> 20 0.343201217889403 87.2489993642025  106.34821611455 3534.79992230853 #> 21 0.549306206380933 11.9671417691591 142.550156161417 3920.79139895679 #>    reliable_fit.bt    ci90.mu.bt.lo    ci90.mu.bt.up   ci90.lambda.bt.lo #> 1             TRUE 87.8594796119543  98.319456838536    14.6733301752318 #> 2             TRUE 28.5315033630708 35.5676511496635    26.5731132446653 #> 3             TRUE 62.6693264801113 68.0966209620813    18.8709676095864 #> 4             TRUE 238.019822753856 246.540236458672    14.3331442992832 #> 5             TRUE 60.2421498492561 70.6311003833236    18.6556958921357 #> 6             TRUE 201.914340178107 209.324738511322     11.461754030639 #> 7             TRUE 501.867908423421 527.879262678073    6.71310930330665 #> 8             TRUE 182.927168716349 218.621689119656    12.1560847897524 #> 9             TRUE 282.702721165393 304.454210869448    4.23151011249244 #> 10            TRUE  633.35542868582 686.111577737874 -0.0157992186826471 #> 11            TRUE 295.976087523185 342.845776325339    8.47009076963711 #> 12            TRUE 323.090134441025 340.280758087783    2.65580762807641 #> 13            TRUE 699.174571954295 782.300488078822   0.128348804909971 #> 14            TRUE 320.440705015077 364.806937077535     8.3602266466783 #> 15            TRUE 309.190169339866 329.225013731709    2.47260710180116 #> 16            TRUE 735.897038249522 802.558898493708 -0.0295778242775353 #> 17            TRUE 319.619600741238 360.616654533488    7.14290161216411 #> 18            TRUE 340.144244304147 361.671002650752     4.4511069689222 #> 19            TRUE 733.837551329194 805.644273979794   0.137683223664836 #> 20            TRUE  330.19340373487 365.422675843437    8.94848077531512 #> 21            TRUE 323.546745583088 350.292742299559    4.35169955781357 #>    ci90.lambda.bt.up     ci90.A.bt.lo     ci90.A.bt.up ci90.integral.bt.lo #> 1   16.3946783393218 3397.84371296071  3442.0523921169     80282.243994371 #> 2   35.2361971530103 1420.02256726625 1478.96030381034     41037.165596296 #> 3   23.5489740098804 2187.49761167486  2202.4068062745    65602.3750114801 #> 4   15.4195285126779  7396.6303350352 7705.28994422339    140731.244658294 #> 5   26.4094493571391 2200.43019248815 2469.09089444677    51363.0017792786 #> 6    13.452047379966 4803.30597168313 4840.63726291888    124552.595203611 #> 7   7.89146572323388 16812.8961560889 17308.8825985086    349019.560445036 #> 8   14.1629498706315 5083.50153348471 5270.60763268158    113284.279303145 #> 9   5.19604401894944 7727.50197095686 7807.09474381372    211873.974723091 #> 10 0.973785334864663 19998.1261052251 20223.5635978433    473501.009535278 #> 11  10.9070181134878  6734.3001453268 6878.55525136513    166580.942501828 #> 12  4.75229748916021 9167.00712191749 9206.13178924127     259296.59641417 #> 13  1.44886694187556 20308.2989369391 20626.7469594156    476256.826569477 #> 14  11.2743872824524 6871.70499456353 7049.61600912408    169591.577474759 #> 15  4.29505245611112 8979.50228677983 9033.20293811383    253361.802705135 #> 16 0.890963283121842 20520.4144989548 20809.7124734214    500219.422902115 #> 17  9.01559361453066 6673.70403311525 7117.88771903889    165973.337916225 #> 18  5.56044578271876 9312.52681755609 9336.73908794746    266483.318251635 #> 19  1.13903986038452 19636.4902858413 19886.7972397861    490196.686704348 #> 20  10.0776127821713 6997.01480295519 7284.06401086342    174021.289010822 #> 21  6.15891697680684 9237.14680156618 9276.51869798672    262101.011668004 #>    ci90.integral.bt.up    ci95.mu.bt.lo    ci95.mu.bt.up   ci95.lambda.bt.lo #> 1     83887.0006524455 86.8579924306858 99.3209440198044    14.5085202446274 #> 2       43677.48589591 27.8578296388226 36.2413248739118    25.7436690406748 #> 3     67498.5701450429 62.1496919020503 68.6162555401422    18.4230733797711 #> 4      156665.26910912 237.204038462969 247.356020749558    14.2291287894901 #> 5     61382.5502464757 59.2474630959943 71.6257871365854    17.9133152412312 #> 6     135931.793486184 201.204833954714 210.034244734714    11.2711940291077 #> 7     375736.229125261 499.377459611805 530.369711489689    6.60028794395191 #> 8     123457.175236345 179.509608252202 222.039249583802    11.9639381330725 #> 9     226766.719432225 280.620131725643 306.536800309198    4.13916112144868 #> 10    499641.278131609   628.3043080319 691.162698391793  -0.110546675937177 #> 11    171717.281686622 291.488564127234  347.33329972129    8.23676793884289 #> 12      274512.6806009 321.444223666335 341.926668862472    2.45507987541945 #> 13    507752.017203156   691.2157076445 790.259352388617 0.00191621732816005 #> 14    181258.768004706 316.192874285692 369.054767806919    8.08121126665738 #> 15    274000.392265915 307.271939557668 331.143243513907    2.29811765298425 #> 16    528653.791588647 729.514519715504 808.941417027726  -0.117714738815774 #> 17    184203.847034834 315.694350910065 364.541904364661    6.96360131406518 #> 18    277744.321968091 338.083171696494 363.732075258406    4.34489367823955 #> 19    514700.039367853 726.962439586052 812.519385722936  0.0418086520640153 #> 20    185650.780755217  326.82038832022 368.795691258087    8.84037239167996 #> 21    275000.415370572 320.985958663426 352.853529219222    4.17866810280358 #>    ci95.lambda.bt.up     ci95.A.bt.lo     ci95.A.bt.up ci95.integral.bt.lo #> 1   16.5594882699261 3393.61096708406 3446.28513799355    79937.1077185979 #> 2   36.0656413570008 1414.37959249075 1484.60327858583    40784.3689718649 #> 3   23.9968682396958 2186.07013559617 2203.83428235319    65420.8244135858 #> 4    15.523544022471 7367.07781926186 7734.84245999673    139205.646572577 #> 5   27.1518300080437  2174.7073593219 2494.81372761302    50403.6833090151 #> 6   13.6426073814974 4799.73169911801   4844.211535484    123463.097495706 #> 7   8.00428708258861 16765.4080924529 17356.3706621445    346461.581528845 #> 8   14.3550965273114 5065.58711973182 5288.52204643448     112310.27862869 #> 9    5.2883930099932 7719.88138632163 7814.71532844895    210448.073633918 #> 10  1.06853279211919 19976.5416644425 20245.1480386259    470998.217861161 #> 11   11.140340944282 6720.48848623802 6892.36691045391    166089.165345837 #> 12  4.95302524181717 9163.26114313117 9209.87776802759    257839.737289909 #> 13  1.57529952945737 20277.8092326595 20657.2366636952    473241.329593912 #> 14  11.5534026624733 6854.67096125454 7066.65004243307    168474.506041041 #> 15  4.46954190492804 8974.36073505636  9038.3444898373    251385.767534422 #> 16 0.979100197660081 20492.7157567186 20837.4112156575    497496.983347022 #> 17  9.19489391262958 6631.17580786724  7160.4159442869    164227.863638911 #> 18  5.66665907340141 9310.20862145478 9339.05728404876     265405.13704474 #> 19  1.23491443198534  19612.524726421 19910.7627992064      487850.6210238 #> 20  10.1857211658064 6969.53136815547 7311.54744566314    172907.827035295 #> 21  6.33194843181683  9233.3771519089   9280.288347644    260865.962377333 #>    ci95.integral.bt.up #> 1     84232.1369282186 #> 2     43930.2825203411 #> 3     67680.1207429373 #> 4     158190.867194837 #> 5     62341.8687167392 #> 6      137021.29119409 #> 7     378294.208041453 #> 8       124431.1759108 #> 9     228192.620521397 #> 10    502144.069805725 #> 11    172209.058842613 #> 12    275969.539725162 #> 13    510767.514178721 #> 14    182375.839438424 #> 15    275976.427436628 #> 16     531376.23114374 #> 17    185949.321312148 #> 18    278822.503174985 #> 19    517046.105048401 #> 20    186764.242730744 #> 21    276235.464661244"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFitLinear objects — summary.flFitLinear","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"Generic summary function flFitLinear objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"","code":"# S3 method for flFitLinear summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"object object class flFitLinear ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"dataframe parameters extracted linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 'l', x_type = 'time',                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  summary(TestFit) #>   max_slope.linfit    lambda.linfit        dY.linfit         A.linfit #> 1 233.480098034089 15.2207558251445 5820.56714471966 7503.25945241197 #>   x.mu.start.linfit x.mu.end.linfit       r2mu.linfit reliable_fit.linfit #> 1              14.5            30.5 0.996370266149326                TRUE #>   max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1              <NA>               <NA>             <NA>         <NA> #>   reliable_fit2.linfit #> 1                FALSE"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFitSpline objects — summary.flFitSpline","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"Generic summary function flFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"","code":"# S3 method for flFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"object object class flFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"dataframe parameters extracted nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time'))  summary(TestFit) #>   max_slope.spline x.max.spline    lambda.spline max_slope2.spline #> 1 242.557704041646         23.5 14.9826287460236              <NA> #>   x.max2.spline lambda2.spline        y0.spline        A.spline #> 1          <NA>           <NA> 1519.80363776351 7592.8006375136 #>          dY.spline  integral.spline reliable_fit.spline reliable_fit2.spline #> 1 6072.99699975009 151370.675832013                TRUE                FALSE #>   smooth.spline #> 1          0.75"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"Generic summary function gcBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"","code":"# S3 method for gcBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"object object class gcBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"dataframe statistical parameters extracted spline fit bootstrapping computation.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = 'TestFit',               control = growth.control(fit.opt = 's', nboot.gc = 50))  summary(TestFit) #>               mu.bt        lambda.bt             A.bt            dY.bt #> 1 0.652978192515759 4.60615936570828 6.08320999346338 6.00409081820921 #>        integral.bt           stdmu.bt      stdlambda.bt          stdA.bt #> 1 72.9374880645905 0.0222669396852772 0.257236030624455 0.02448660509081 #>             stddY.bt   stdintegral.bt reliable_fit.bt     ci90.mu.bt.lo #> 1 0.0254964089472092 1.05476232371605            TRUE 0.616349076733478 #>      ci90.mu.bt.up ci90.lambda.bt.lo ci90.lambda.bt.up   ci90.A.bt.lo #> 1 0.68960730829804  4.18300609533105   5.0293126360855 6.042929528089 #>       ci90.A.bt.up ci90.integral.bt.lo ci90.integral.bt.up     ci95.mu.bt.lo #> 1 6.12349045883776    71.2024040420776    74.6725720871034 0.609334990732616 #>       ci95.mu.bt.up ci95.lambda.bt.lo ci95.lambda.bt.up     ci95.A.bt.lo #> 1 0.696621394298903  4.10197674568434  5.11034198573221 6.03521624748539 #>       ci95.A.bt.up ci95.integral.bt.lo ci95.integral.bt.up #> 1 6.13120373944137    70.8701539101071     75.004822219074"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFit objects — summary.gcFit","title":"Generic summary function for gcFit objects — summary.gcFit","text":"Generic summary function gcFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFit objects — summary.gcFit","text":"","code":"# S3 method for gcFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFit objects — summary.gcFit","text":"object object class gcFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFit objects — summary.gcFit","text":"dataframe parameters extracted fits workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFit objects — summary.gcFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE,                                                 nboot.gc = 20)) summary(gcFit) #>    TestId AddId concentration reliability_tag used.model log.x log.y.lin #> 1   Test1     1         0.000            TRUE         NA FALSE      TRUE #> 2   Test1     1         0.017            TRUE         NA FALSE      TRUE #> 3   Test1     1         0.026            TRUE         NA FALSE      TRUE #> 4   Test1     1         0.039            TRUE         NA FALSE      TRUE #> 5   Test1     1         0.059            TRUE         NA FALSE      TRUE #> 6   Test1     1         0.088            TRUE         NA FALSE      TRUE #> 7   Test1     1         0.130            TRUE         NA FALSE      TRUE #> 8   Test1     1         0.200            TRUE         NA FALSE      TRUE #> 9   Test1     1         0.300            TRUE         NA FALSE      TRUE #> 10  Test1     1         0.440            TRUE         NA FALSE      TRUE #> 11  Test1     1         0.670            TRUE         NA FALSE      TRUE #> 12  Test1     1         1.000            TRUE         NA FALSE      TRUE #> 13  Test1     2         0.000            TRUE         NA FALSE      TRUE #> 14  Test1     2         0.017            TRUE         NA FALSE      TRUE #> 15  Test1     2         0.026            TRUE         NA FALSE      TRUE #> 16  Test1     2         0.039            TRUE         NA FALSE      TRUE #> 17  Test1     2         0.059            TRUE         NA FALSE      TRUE #> 18  Test1     2         0.088            TRUE         NA FALSE      TRUE #> 19  Test1     2         0.130            TRUE         NA FALSE      TRUE #> 20  Test1     2         0.200            TRUE         NA FALSE      TRUE #> 21  Test1     2         0.300            TRUE         NA FALSE      TRUE #> 22  Test1     2         0.440            TRUE         NA FALSE      TRUE #> 23  Test1     2         0.670            TRUE         NA FALSE      TRUE #> 24  Test1     2         1.000            TRUE         NA FALSE      TRUE #> 25  Test1     3         0.000            TRUE         NA FALSE      TRUE #> 26  Test1     3         0.026            TRUE         NA FALSE      TRUE #> 27  Test1     3         0.039            TRUE         NA FALSE      TRUE #> 28  Test1     3         0.059            TRUE         NA FALSE      TRUE #> 29  Test1     3         0.088            TRUE         NA FALSE      TRUE #> 30  Test1     3         0.130            TRUE         NA FALSE      TRUE #> 31  Test1     3         0.200            TRUE         NA FALSE      TRUE #> 32  Test1     3         0.300            TRUE         NA FALSE      TRUE #> 33  Test1     3         0.440            TRUE         NA FALSE      TRUE #> 34  Test1     3         0.670            TRUE         NA FALSE      TRUE #> 35  Test1     3         1.000            TRUE         NA FALSE      TRUE #> 36  Test2     1         0.000            TRUE         NA FALSE      TRUE #> 37  Test2     1         0.017            TRUE         NA FALSE      TRUE #> 38  Test2     1         0.026            TRUE         NA FALSE      TRUE #> 39  Test2     1         0.039            TRUE         NA FALSE      TRUE #> 40  Test2     1         0.059            TRUE         NA FALSE      TRUE #> 41  Test2     1         0.088            TRUE         NA FALSE      TRUE #> 42  Test2     1         0.130            TRUE         NA FALSE      TRUE #> 43  Test2     1         0.200            TRUE         NA FALSE      TRUE #> 44  Test2     1         0.300            TRUE         NA FALSE      TRUE #> 45  Test2     1         0.440            TRUE         NA FALSE      TRUE #> 46  Test2     1         0.670            TRUE         NA FALSE      TRUE #> 47  Test2     1         1.000            TRUE         NA FALSE      TRUE #> 48  Test2     2         0.000            TRUE         NA FALSE      TRUE #> 49  Test2     2         0.017            TRUE         NA FALSE      TRUE #> 50  Test2     2         0.026            TRUE         NA FALSE      TRUE #> 51  Test2     2         0.039            TRUE         NA FALSE      TRUE #> 52  Test2     2         0.059            TRUE         NA FALSE      TRUE #> 53  Test2     2         0.088            TRUE         NA FALSE      TRUE #> 54  Test2     2         0.130            TRUE         NA FALSE      TRUE #> 55  Test2     2         0.200            TRUE         NA FALSE      TRUE #> 56  Test2     2         0.300            TRUE         NA FALSE      TRUE #> 57  Test2     2         0.440            TRUE         NA FALSE      TRUE #> 58  Test2     2         0.670            TRUE         NA FALSE      TRUE #> 59  Test2     2         1.000            TRUE         NA FALSE      TRUE #> 60  Test2     3         0.000            TRUE         NA FALSE      TRUE #> 61  Test2     3         0.026            TRUE         NA FALSE      TRUE #> 62  Test2     3         0.039            TRUE         NA FALSE      TRUE #> 63  Test2     3         0.059            TRUE         NA FALSE      TRUE #> 64  Test2     3         0.088            TRUE         NA FALSE      TRUE #> 65  Test2     3         0.130            TRUE         NA FALSE      TRUE #> 66  Test2     3         0.200            TRUE         NA FALSE      TRUE #> 67  Test2     3         0.300            TRUE         NA FALSE      TRUE #> 68  Test2     3         0.440            TRUE         NA FALSE      TRUE #> 69  Test2     3         0.670            TRUE         NA FALSE      TRUE #> 70  Test2     3         1.000            TRUE         NA FALSE      TRUE #>    log.y.spline log.y.model nboot.gc mu.linfit tD.linfit lambda.linfit #> 1          TRUE        TRUE       20         0      <NA>          <NA> #> 2          TRUE        TRUE       20         0      <NA>          <NA> #> 3          TRUE        TRUE       20         0      <NA>          <NA> #> 4          TRUE        TRUE       20         0      <NA>          <NA> #> 5          TRUE        TRUE       20         0      <NA>          <NA> #> 6          TRUE        TRUE       20         0      <NA>          <NA> #> 7          TRUE        TRUE       20         0      <NA>          <NA> #> 8          TRUE        TRUE       20         0      <NA>          <NA> #> 9          TRUE        TRUE       20         0      <NA>          <NA> #> 10         TRUE        TRUE       20         0      <NA>          <NA> #> 11         TRUE        TRUE       20         0      <NA>          <NA> #> 12         TRUE        TRUE       20         0      <NA>          <NA> #> 13         TRUE        TRUE       20         0      <NA>          <NA> #> 14         TRUE        TRUE       20         0      <NA>          <NA> #> 15         TRUE        TRUE       20         0      <NA>          <NA> #> 16         TRUE        TRUE       20         0      <NA>          <NA> #> 17         TRUE        TRUE       20         0      <NA>          <NA> #> 18         TRUE        TRUE       20         0      <NA>          <NA> #> 19         TRUE        TRUE       20         0      <NA>          <NA> #> 20         TRUE        TRUE       20         0      <NA>          <NA> #> 21         TRUE        TRUE       20         0      <NA>          <NA> #> 22         TRUE        TRUE       20         0      <NA>          <NA> #> 23         TRUE        TRUE       20         0      <NA>          <NA> #> 24         TRUE        TRUE       20         0      <NA>          <NA> #> 25         TRUE        TRUE       20         0      <NA>          <NA> #> 26         TRUE        TRUE       20         0      <NA>          <NA> #> 27         TRUE        TRUE       20         0      <NA>          <NA> #> 28         TRUE        TRUE       20         0      <NA>          <NA> #> 29         TRUE        TRUE       20         0      <NA>          <NA> #> 30         TRUE        TRUE       20         0      <NA>          <NA> #> 31         TRUE        TRUE       20         0      <NA>          <NA> #> 32         TRUE        TRUE       20         0      <NA>          <NA> #> 33         TRUE        TRUE       20         0      <NA>          <NA> #> 34         TRUE        TRUE       20         0      <NA>          <NA> #> 35         TRUE        TRUE       20         0      <NA>          <NA> #> 36         TRUE        TRUE       20         0      <NA>          <NA> #> 37         TRUE        TRUE       20         0      <NA>          <NA> #> 38         TRUE        TRUE       20         0      <NA>          <NA> #> 39         TRUE        TRUE       20         0      <NA>          <NA> #> 40         TRUE        TRUE       20         0      <NA>          <NA> #> 41         TRUE        TRUE       20         0      <NA>          <NA> #> 42         TRUE        TRUE       20         0      <NA>          <NA> #> 43         TRUE        TRUE       20         0      <NA>          <NA> #> 44         TRUE        TRUE       20         0      <NA>          <NA> #> 45         TRUE        TRUE       20         0      <NA>          <NA> #> 46         TRUE        TRUE       20         0      <NA>          <NA> #> 47         TRUE        TRUE       20         0      <NA>          <NA> #> 48         TRUE        TRUE       20         0      <NA>          <NA> #> 49         TRUE        TRUE       20         0      <NA>          <NA> #> 50         TRUE        TRUE       20         0      <NA>          <NA> #> 51         TRUE        TRUE       20         0      <NA>          <NA> #> 52         TRUE        TRUE       20         0      <NA>          <NA> #> 53         TRUE        TRUE       20         0      <NA>          <NA> #> 54         TRUE        TRUE       20         0      <NA>          <NA> #> 55         TRUE        TRUE       20         0      <NA>          <NA> #> 56         TRUE        TRUE       20         0      <NA>          <NA> #> 57         TRUE        TRUE       20         0      <NA>          <NA> #> 58         TRUE        TRUE       20         0      <NA>          <NA> #> 59         TRUE        TRUE       20         0      <NA>          <NA> #> 60         TRUE        TRUE       20         0      <NA>          <NA> #> 61         TRUE        TRUE       20         0      <NA>          <NA> #> 62         TRUE        TRUE       20         0      <NA>          <NA> #> 63         TRUE        TRUE       20         0      <NA>          <NA> #> 64         TRUE        TRUE       20         0      <NA>          <NA> #> 65         TRUE        TRUE       20         0      <NA>          <NA> #> 66         TRUE        TRUE       20         0      <NA>          <NA> #> 67         TRUE        TRUE       20         0      <NA>          <NA> #> 68         TRUE        TRUE       20         0      <NA>          <NA> #> 69         TRUE        TRUE       20         0      <NA>          <NA> #> 70         TRUE        TRUE       20         0      <NA>          <NA> #>    dY.linfit A.linfit tmu.start.linfit tmu.end.linfit r2mu.linfit #> 1          0     <NA>             <NA>           <NA>        <NA> #> 2          0     <NA>             <NA>           <NA>        <NA> #> 3          0     <NA>             <NA>           <NA>        <NA> #> 4          0     <NA>             <NA>           <NA>        <NA> #> 5          0     <NA>             <NA>           <NA>        <NA> #> 6          0     <NA>             <NA>           <NA>        <NA> #> 7          0     <NA>             <NA>           <NA>        <NA> #> 8          0     <NA>             <NA>           <NA>        <NA> #> 9          0     <NA>             <NA>           <NA>        <NA> #> 10         0     <NA>             <NA>           <NA>        <NA> #> 11         0     <NA>             <NA>           <NA>        <NA> #> 12         0     <NA>             <NA>           <NA>        <NA> #> 13         0     <NA>             <NA>           <NA>        <NA> #> 14         0     <NA>             <NA>           <NA>        <NA> #> 15         0     <NA>             <NA>           <NA>        <NA> #> 16         0     <NA>             <NA>           <NA>        <NA> #> 17         0     <NA>             <NA>           <NA>        <NA> #> 18         0     <NA>             <NA>           <NA>        <NA> #> 19         0     <NA>             <NA>           <NA>        <NA> #> 20         0     <NA>             <NA>           <NA>        <NA> #> 21         0     <NA>             <NA>           <NA>        <NA> #> 22         0     <NA>             <NA>           <NA>        <NA> #> 23         0     <NA>             <NA>           <NA>        <NA> #> 24         0     <NA>             <NA>           <NA>        <NA> #> 25         0     <NA>             <NA>           <NA>        <NA> #> 26         0     <NA>             <NA>           <NA>        <NA> #> 27         0     <NA>             <NA>           <NA>        <NA> #> 28         0     <NA>             <NA>           <NA>        <NA> #> 29         0     <NA>             <NA>           <NA>        <NA> #> 30         0     <NA>             <NA>           <NA>        <NA> #> 31         0     <NA>             <NA>           <NA>        <NA> #> 32         0     <NA>             <NA>           <NA>        <NA> #> 33         0     <NA>             <NA>           <NA>        <NA> #> 34         0     <NA>             <NA>           <NA>        <NA> #> 35         0     <NA>             <NA>           <NA>        <NA> #> 36         0     <NA>             <NA>           <NA>        <NA> #> 37         0     <NA>             <NA>           <NA>        <NA> #> 38         0     <NA>             <NA>           <NA>        <NA> #> 39         0     <NA>             <NA>           <NA>        <NA> #> 40         0     <NA>             <NA>           <NA>        <NA> #> 41         0     <NA>             <NA>           <NA>        <NA> #> 42         0     <NA>             <NA>           <NA>        <NA> #> 43         0     <NA>             <NA>           <NA>        <NA> #> 44         0     <NA>             <NA>           <NA>        <NA> #> 45         0     <NA>             <NA>           <NA>        <NA> #> 46         0     <NA>             <NA>           <NA>        <NA> #> 47         0     <NA>             <NA>           <NA>        <NA> #> 48         0     <NA>             <NA>           <NA>        <NA> #> 49         0     <NA>             <NA>           <NA>        <NA> #> 50         0     <NA>             <NA>           <NA>        <NA> #> 51         0     <NA>             <NA>           <NA>        <NA> #> 52         0     <NA>             <NA>           <NA>        <NA> #> 53         0     <NA>             <NA>           <NA>        <NA> #> 54         0     <NA>             <NA>           <NA>        <NA> #> 55         0     <NA>             <NA>           <NA>        <NA> #> 56         0     <NA>             <NA>           <NA>        <NA> #> 57         0     <NA>             <NA>           <NA>        <NA> #> 58         0     <NA>             <NA>           <NA>        <NA> #> 59         0     <NA>             <NA>           <NA>        <NA> #> 60         0     <NA>             <NA>           <NA>        <NA> #> 61         0     <NA>             <NA>           <NA>        <NA> #> 62         0     <NA>             <NA>           <NA>        <NA> #> 63         0     <NA>             <NA>           <NA>        <NA> #> 64         0     <NA>             <NA>           <NA>        <NA> #> 65         0     <NA>             <NA>           <NA>        <NA> #> 66         0     <NA>             <NA>           <NA>        <NA> #> 67         0     <NA>             <NA>           <NA>        <NA> #> 68         0     <NA>             <NA>           <NA>        <NA> #> 69         0     <NA>             <NA>           <NA>        <NA> #> 70         0     <NA>             <NA>           <NA>        <NA> #>    reliable_fit.linfit mu2.linfit tD2.linfit tmu2.start.linfit tmu2.end.linfit #> 1                FALSE       <NA>       <NA>              <NA>            <NA> #> 2                FALSE       <NA>       <NA>              <NA>            <NA> #> 3                FALSE       <NA>       <NA>              <NA>            <NA> #> 4                FALSE       <NA>       <NA>              <NA>            <NA> #> 5                FALSE       <NA>       <NA>              <NA>            <NA> #> 6                FALSE       <NA>       <NA>              <NA>            <NA> #> 7                FALSE       <NA>       <NA>              <NA>            <NA> #> 8                FALSE       <NA>       <NA>              <NA>            <NA> #> 9                FALSE       <NA>       <NA>              <NA>            <NA> #> 10               FALSE       <NA>       <NA>              <NA>            <NA> #> 11               FALSE       <NA>       <NA>              <NA>            <NA> #> 12               FALSE       <NA>       <NA>              <NA>            <NA> #> 13               FALSE       <NA>       <NA>              <NA>            <NA> #> 14               FALSE       <NA>       <NA>              <NA>            <NA> #> 15               FALSE       <NA>       <NA>              <NA>            <NA> #> 16               FALSE       <NA>       <NA>              <NA>            <NA> #> 17               FALSE       <NA>       <NA>              <NA>            <NA> #> 18               FALSE       <NA>       <NA>              <NA>            <NA> #> 19               FALSE       <NA>       <NA>              <NA>            <NA> #> 20               FALSE       <NA>       <NA>              <NA>            <NA> #> 21               FALSE       <NA>       <NA>              <NA>            <NA> #> 22               FALSE       <NA>       <NA>              <NA>            <NA> #> 23               FALSE       <NA>       <NA>              <NA>            <NA> #> 24               FALSE       <NA>       <NA>              <NA>            <NA> #> 25               FALSE       <NA>       <NA>              <NA>            <NA> #> 26               FALSE       <NA>       <NA>              <NA>            <NA> #> 27               FALSE       <NA>       <NA>              <NA>            <NA> #> 28               FALSE       <NA>       <NA>              <NA>            <NA> #> 29               FALSE       <NA>       <NA>              <NA>            <NA> #> 30               FALSE       <NA>       <NA>              <NA>            <NA> #> 31               FALSE       <NA>       <NA>              <NA>            <NA> #> 32               FALSE       <NA>       <NA>              <NA>            <NA> #> 33               FALSE       <NA>       <NA>              <NA>            <NA> #> 34               FALSE       <NA>       <NA>              <NA>            <NA> #> 35               FALSE       <NA>       <NA>              <NA>            <NA> #> 36               FALSE       <NA>       <NA>              <NA>            <NA> #> 37               FALSE       <NA>       <NA>              <NA>            <NA> #> 38               FALSE       <NA>       <NA>              <NA>            <NA> #> 39               FALSE       <NA>       <NA>              <NA>            <NA> #> 40               FALSE       <NA>       <NA>              <NA>            <NA> #> 41               FALSE       <NA>       <NA>              <NA>            <NA> #> 42               FALSE       <NA>       <NA>              <NA>            <NA> #> 43               FALSE       <NA>       <NA>              <NA>            <NA> #> 44               FALSE       <NA>       <NA>              <NA>            <NA> #> 45               FALSE       <NA>       <NA>              <NA>            <NA> #> 46               FALSE       <NA>       <NA>              <NA>            <NA> #> 47               FALSE       <NA>       <NA>              <NA>            <NA> #> 48               FALSE       <NA>       <NA>              <NA>            <NA> #> 49               FALSE       <NA>       <NA>              <NA>            <NA> #> 50               FALSE       <NA>       <NA>              <NA>            <NA> #> 51               FALSE       <NA>       <NA>              <NA>            <NA> #> 52               FALSE       <NA>       <NA>              <NA>            <NA> #> 53               FALSE       <NA>       <NA>              <NA>            <NA> #> 54               FALSE       <NA>       <NA>              <NA>            <NA> #> 55               FALSE       <NA>       <NA>              <NA>            <NA> #> 56               FALSE       <NA>       <NA>              <NA>            <NA> #> 57               FALSE       <NA>       <NA>              <NA>            <NA> #> 58               FALSE       <NA>       <NA>              <NA>            <NA> #> 59               FALSE       <NA>       <NA>              <NA>            <NA> #> 60               FALSE       <NA>       <NA>              <NA>            <NA> #> 61               FALSE       <NA>       <NA>              <NA>            <NA> #> 62               FALSE       <NA>       <NA>              <NA>            <NA> #> 63               FALSE       <NA>       <NA>              <NA>            <NA> #> 64               FALSE       <NA>       <NA>              <NA>            <NA> #> 65               FALSE       <NA>       <NA>              <NA>            <NA> #> 66               FALSE       <NA>       <NA>              <NA>            <NA> #> 67               FALSE       <NA>       <NA>              <NA>            <NA> #> 68               FALSE       <NA>       <NA>              <NA>            <NA> #> 69               FALSE       <NA>       <NA>              <NA>            <NA> #> 70               FALSE       <NA>       <NA>              <NA>            <NA> #>    r2mu2.linfit reliable_fit2.linfit mu.model tD.model lambda.model A.model #> 1          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 2          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 3          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 4          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 5          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 6          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 7          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 8          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 9          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 10         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 11         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 12         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 13         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 14         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 15         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 16         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 17         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 18         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 19         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 20         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 21         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 22         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 23         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 24         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 25         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 26         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 27         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 28         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 29         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 30         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 31         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 32         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 33         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 34         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 35         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 36         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 37         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 38         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 39         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 40         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 41         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 42         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 43         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 44         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 45         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 46         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 47         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 48         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 49         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 50         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 51         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 52         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 53         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 54         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 55         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 56         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 57         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 58         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 59         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 60         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 61         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 62         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 63         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 64         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 65         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 66         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 67         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 68         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 69         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 70         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #>    dY.model A.orig.model dY.orig.model integral.model parameter_nu.model #> 1      <NA>         <NA>          <NA>           <NA>               <NA> #> 2      <NA>         <NA>          <NA>           <NA>               <NA> #> 3      <NA>         <NA>          <NA>           <NA>               <NA> #> 4      <NA>         <NA>          <NA>           <NA>               <NA> #> 5      <NA>         <NA>          <NA>           <NA>               <NA> #> 6      <NA>         <NA>          <NA>           <NA>               <NA> #> 7      <NA>         <NA>          <NA>           <NA>               <NA> #> 8      <NA>         <NA>          <NA>           <NA>               <NA> #> 9      <NA>         <NA>          <NA>           <NA>               <NA> #> 10     <NA>         <NA>          <NA>           <NA>               <NA> #> 11     <NA>         <NA>          <NA>           <NA>               <NA> #> 12     <NA>         <NA>          <NA>           <NA>               <NA> #> 13     <NA>         <NA>          <NA>           <NA>               <NA> #> 14     <NA>         <NA>          <NA>           <NA>               <NA> #> 15     <NA>         <NA>          <NA>           <NA>               <NA> #> 16     <NA>         <NA>          <NA>           <NA>               <NA> #> 17     <NA>         <NA>          <NA>           <NA>               <NA> #> 18     <NA>         <NA>          <NA>           <NA>               <NA> #> 19     <NA>         <NA>          <NA>           <NA>               <NA> #> 20     <NA>         <NA>          <NA>           <NA>               <NA> #> 21     <NA>         <NA>          <NA>           <NA>               <NA> #> 22     <NA>         <NA>          <NA>           <NA>               <NA> #> 23     <NA>         <NA>          <NA>           <NA>               <NA> #> 24     <NA>         <NA>          <NA>           <NA>               <NA> #> 25     <NA>         <NA>          <NA>           <NA>               <NA> #> 26     <NA>         <NA>          <NA>           <NA>               <NA> #> 27     <NA>         <NA>          <NA>           <NA>               <NA> #> 28     <NA>         <NA>          <NA>           <NA>               <NA> #> 29     <NA>         <NA>          <NA>           <NA>               <NA> #> 30     <NA>         <NA>          <NA>           <NA>               <NA> #> 31     <NA>         <NA>          <NA>           <NA>               <NA> #> 32     <NA>         <NA>          <NA>           <NA>               <NA> #> 33     <NA>         <NA>          <NA>           <NA>               <NA> #> 34     <NA>         <NA>          <NA>           <NA>               <NA> #> 35     <NA>         <NA>          <NA>           <NA>               <NA> #> 36     <NA>         <NA>          <NA>           <NA>               <NA> #> 37     <NA>         <NA>          <NA>           <NA>               <NA> #> 38     <NA>         <NA>          <NA>           <NA>               <NA> #> 39     <NA>         <NA>          <NA>           <NA>               <NA> #> 40     <NA>         <NA>          <NA>           <NA>               <NA> #> 41     <NA>         <NA>          <NA>           <NA>               <NA> #> 42     <NA>         <NA>          <NA>           <NA>               <NA> #> 43     <NA>         <NA>          <NA>           <NA>               <NA> #> 44     <NA>         <NA>          <NA>           <NA>               <NA> #> 45     <NA>         <NA>          <NA>           <NA>               <NA> #> 46     <NA>         <NA>          <NA>           <NA>               <NA> #> 47     <NA>         <NA>          <NA>           <NA>               <NA> #> 48     <NA>         <NA>          <NA>           <NA>               <NA> #> 49     <NA>         <NA>          <NA>           <NA>               <NA> #> 50     <NA>         <NA>          <NA>           <NA>               <NA> #> 51     <NA>         <NA>          <NA>           <NA>               <NA> #> 52     <NA>         <NA>          <NA>           <NA>               <NA> #> 53     <NA>         <NA>          <NA>           <NA>               <NA> #> 54     <NA>         <NA>          <NA>           <NA>               <NA> #> 55     <NA>         <NA>          <NA>           <NA>               <NA> #> 56     <NA>         <NA>          <NA>           <NA>               <NA> #> 57     <NA>         <NA>          <NA>           <NA>               <NA> #> 58     <NA>         <NA>          <NA>           <NA>               <NA> #> 59     <NA>         <NA>          <NA>           <NA>               <NA> #> 60     <NA>         <NA>          <NA>           <NA>               <NA> #> 61     <NA>         <NA>          <NA>           <NA>               <NA> #> 62     <NA>         <NA>          <NA>           <NA>               <NA> #> 63     <NA>         <NA>          <NA>           <NA>               <NA> #> 64     <NA>         <NA>          <NA>           <NA>               <NA> #> 65     <NA>         <NA>          <NA>           <NA>               <NA> #> 66     <NA>         <NA>          <NA>           <NA>               <NA> #> 67     <NA>         <NA>          <NA>           <NA>               <NA> #> 68     <NA>         <NA>          <NA>           <NA>               <NA> #> 69     <NA>         <NA>          <NA>           <NA>               <NA> #> 70     <NA>         <NA>          <NA>           <NA>               <NA> #>    parameter_alpha.model parameter_t_shift.model parameter_y0.model stdmu.model #> 1                   <NA>                    <NA>               <NA>        <NA> #> 2                   <NA>                    <NA>               <NA>        <NA> #> 3                   <NA>                    <NA>               <NA>        <NA> #> 4                   <NA>                    <NA>               <NA>        <NA> #> 5                   <NA>                    <NA>               <NA>        <NA> #> 6                   <NA>                    <NA>               <NA>        <NA> #> 7                   <NA>                    <NA>               <NA>        <NA> #> 8                   <NA>                    <NA>               <NA>        <NA> #> 9                   <NA>                    <NA>               <NA>        <NA> #> 10                  <NA>                    <NA>               <NA>        <NA> #> 11                  <NA>                    <NA>               <NA>        <NA> #> 12                  <NA>                    <NA>               <NA>        <NA> #> 13                  <NA>                    <NA>               <NA>        <NA> #> 14                  <NA>                    <NA>               <NA>        <NA> #> 15                  <NA>                    <NA>               <NA>        <NA> #> 16                  <NA>                    <NA>               <NA>        <NA> #> 17                  <NA>                    <NA>               <NA>        <NA> #> 18                  <NA>                    <NA>               <NA>        <NA> #> 19                  <NA>                    <NA>               <NA>        <NA> #> 20                  <NA>                    <NA>               <NA>        <NA> #> 21                  <NA>                    <NA>               <NA>        <NA> #> 22                  <NA>                    <NA>               <NA>        <NA> #> 23                  <NA>                    <NA>               <NA>        <NA> #> 24                  <NA>                    <NA>               <NA>        <NA> #> 25                  <NA>                    <NA>               <NA>        <NA> #> 26                  <NA>                    <NA>               <NA>        <NA> #> 27                  <NA>                    <NA>               <NA>        <NA> #> 28                  <NA>                    <NA>               <NA>        <NA> #> 29                  <NA>                    <NA>               <NA>        <NA> #> 30                  <NA>                    <NA>               <NA>        <NA> #> 31                  <NA>                    <NA>               <NA>        <NA> #> 32                  <NA>                    <NA>               <NA>        <NA> #> 33                  <NA>                    <NA>               <NA>        <NA> #> 34                  <NA>                    <NA>               <NA>        <NA> #> 35                  <NA>                    <NA>               <NA>        <NA> #> 36                  <NA>                    <NA>               <NA>        <NA> #> 37                  <NA>                    <NA>               <NA>        <NA> #> 38                  <NA>                    <NA>               <NA>        <NA> #> 39                  <NA>                    <NA>               <NA>        <NA> #> 40                  <NA>                    <NA>               <NA>        <NA> #> 41                  <NA>                    <NA>               <NA>        <NA> #> 42                  <NA>                    <NA>               <NA>        <NA> #> 43                  <NA>                    <NA>               <NA>        <NA> #> 44                  <NA>                    <NA>               <NA>        <NA> #> 45                  <NA>                    <NA>               <NA>        <NA> #> 46                  <NA>                    <NA>               <NA>        <NA> #> 47                  <NA>                    <NA>               <NA>        <NA> #> 48                  <NA>                    <NA>               <NA>        <NA> #> 49                  <NA>                    <NA>               <NA>        <NA> #> 50                  <NA>                    <NA>               <NA>        <NA> #> 51                  <NA>                    <NA>               <NA>        <NA> #> 52                  <NA>                    <NA>               <NA>        <NA> #> 53                  <NA>                    <NA>               <NA>        <NA> #> 54                  <NA>                    <NA>               <NA>        <NA> #> 55                  <NA>                    <NA>               <NA>        <NA> #> 56                  <NA>                    <NA>               <NA>        <NA> #> 57                  <NA>                    <NA>               <NA>        <NA> #> 58                  <NA>                    <NA>               <NA>        <NA> #> 59                  <NA>                    <NA>               <NA>        <NA> #> 60                  <NA>                    <NA>               <NA>        <NA> #> 61                  <NA>                    <NA>               <NA>        <NA> #> 62                  <NA>                    <NA>               <NA>        <NA> #> 63                  <NA>                    <NA>               <NA>        <NA> #> 64                  <NA>                    <NA>               <NA>        <NA> #> 65                  <NA>                    <NA>               <NA>        <NA> #> 66                  <NA>                    <NA>               <NA>        <NA> #> 67                  <NA>                    <NA>               <NA>        <NA> #> 68                  <NA>                    <NA>               <NA>        <NA> #> 69                  <NA>                    <NA>               <NA>        <NA> #> 70                  <NA>                    <NA>               <NA>        <NA> #>    stdlambda.model stdA.model RMSE.model reliable_fit.model ci90.mu.model.lo #> 1             <NA>       <NA>       <NA>              FALSE             <NA> #> 2             <NA>       <NA>       <NA>              FALSE             <NA> #> 3             <NA>       <NA>       <NA>              FALSE             <NA> #> 4             <NA>       <NA>       <NA>              FALSE             <NA> #> 5             <NA>       <NA>       <NA>              FALSE             <NA> #> 6             <NA>       <NA>       <NA>              FALSE             <NA> #> 7             <NA>       <NA>       <NA>              FALSE             <NA> #> 8             <NA>       <NA>       <NA>              FALSE             <NA> #> 9             <NA>       <NA>       <NA>              FALSE             <NA> #> 10            <NA>       <NA>       <NA>              FALSE             <NA> #> 11            <NA>       <NA>       <NA>              FALSE             <NA> #> 12            <NA>       <NA>       <NA>              FALSE             <NA> #> 13            <NA>       <NA>       <NA>              FALSE             <NA> #> 14            <NA>       <NA>       <NA>              FALSE             <NA> #> 15            <NA>       <NA>       <NA>              FALSE             <NA> #> 16            <NA>       <NA>       <NA>              FALSE             <NA> #> 17            <NA>       <NA>       <NA>              FALSE             <NA> #> 18            <NA>       <NA>       <NA>              FALSE             <NA> #> 19            <NA>       <NA>       <NA>              FALSE             <NA> #> 20            <NA>       <NA>       <NA>              FALSE             <NA> #> 21            <NA>       <NA>       <NA>              FALSE             <NA> #> 22            <NA>       <NA>       <NA>              FALSE             <NA> #> 23            <NA>       <NA>       <NA>              FALSE             <NA> #> 24            <NA>       <NA>       <NA>              FALSE             <NA> #> 25            <NA>       <NA>       <NA>              FALSE             <NA> #> 26            <NA>       <NA>       <NA>              FALSE             <NA> #> 27            <NA>       <NA>       <NA>              FALSE             <NA> #> 28            <NA>       <NA>       <NA>              FALSE             <NA> #> 29            <NA>       <NA>       <NA>              FALSE             <NA> #> 30            <NA>       <NA>       <NA>              FALSE             <NA> #> 31            <NA>       <NA>       <NA>              FALSE             <NA> #> 32            <NA>       <NA>       <NA>              FALSE             <NA> #> 33            <NA>       <NA>       <NA>              FALSE             <NA> #> 34            <NA>       <NA>       <NA>              FALSE             <NA> #> 35            <NA>       <NA>       <NA>              FALSE             <NA> #> 36            <NA>       <NA>       <NA>              FALSE             <NA> #> 37            <NA>       <NA>       <NA>              FALSE             <NA> #> 38            <NA>       <NA>       <NA>              FALSE             <NA> #> 39            <NA>       <NA>       <NA>              FALSE             <NA> #> 40            <NA>       <NA>       <NA>              FALSE             <NA> #> 41            <NA>       <NA>       <NA>              FALSE             <NA> #> 42            <NA>       <NA>       <NA>              FALSE             <NA> #> 43            <NA>       <NA>       <NA>              FALSE             <NA> #> 44            <NA>       <NA>       <NA>              FALSE             <NA> #> 45            <NA>       <NA>       <NA>              FALSE             <NA> #> 46            <NA>       <NA>       <NA>              FALSE             <NA> #> 47            <NA>       <NA>       <NA>              FALSE             <NA> #> 48            <NA>       <NA>       <NA>              FALSE             <NA> #> 49            <NA>       <NA>       <NA>              FALSE             <NA> #> 50            <NA>       <NA>       <NA>              FALSE             <NA> #> 51            <NA>       <NA>       <NA>              FALSE             <NA> #> 52            <NA>       <NA>       <NA>              FALSE             <NA> #> 53            <NA>       <NA>       <NA>              FALSE             <NA> #> 54            <NA>       <NA>       <NA>              FALSE             <NA> #> 55            <NA>       <NA>       <NA>              FALSE             <NA> #> 56            <NA>       <NA>       <NA>              FALSE             <NA> #> 57            <NA>       <NA>       <NA>              FALSE             <NA> #> 58            <NA>       <NA>       <NA>              FALSE             <NA> #> 59            <NA>       <NA>       <NA>              FALSE             <NA> #> 60            <NA>       <NA>       <NA>              FALSE             <NA> #> 61            <NA>       <NA>       <NA>              FALSE             <NA> #> 62            <NA>       <NA>       <NA>              FALSE             <NA> #> 63            <NA>       <NA>       <NA>              FALSE             <NA> #> 64            <NA>       <NA>       <NA>              FALSE             <NA> #> 65            <NA>       <NA>       <NA>              FALSE             <NA> #> 66            <NA>       <NA>       <NA>              FALSE             <NA> #> 67            <NA>       <NA>       <NA>              FALSE             <NA> #> 68            <NA>       <NA>       <NA>              FALSE             <NA> #> 69            <NA>       <NA>       <NA>              FALSE             <NA> #> 70            <NA>       <NA>       <NA>              FALSE             <NA> #>    ci90.mu.model.up ci90.lambda.model.lo ci90.lambda.model.up ci90.A.model.lo #> 1              <NA>                 <NA>                 <NA>            <NA> #> 2              <NA>                 <NA>                 <NA>            <NA> #> 3              <NA>                 <NA>                 <NA>            <NA> #> 4              <NA>                 <NA>                 <NA>            <NA> #> 5              <NA>                 <NA>                 <NA>            <NA> #> 6              <NA>                 <NA>                 <NA>            <NA> #> 7              <NA>                 <NA>                 <NA>            <NA> #> 8              <NA>                 <NA>                 <NA>            <NA> #> 9              <NA>                 <NA>                 <NA>            <NA> #> 10             <NA>                 <NA>                 <NA>            <NA> #> 11             <NA>                 <NA>                 <NA>            <NA> #> 12             <NA>                 <NA>                 <NA>            <NA> #> 13             <NA>                 <NA>                 <NA>            <NA> #> 14             <NA>                 <NA>                 <NA>            <NA> #> 15             <NA>                 <NA>                 <NA>            <NA> #> 16             <NA>                 <NA>                 <NA>            <NA> #> 17             <NA>                 <NA>                 <NA>            <NA> #> 18             <NA>                 <NA>                 <NA>            <NA> #> 19             <NA>                 <NA>                 <NA>            <NA> #> 20             <NA>                 <NA>                 <NA>            <NA> #> 21             <NA>                 <NA>                 <NA>            <NA> #> 22             <NA>                 <NA>                 <NA>            <NA> #> 23             <NA>                 <NA>                 <NA>            <NA> #> 24             <NA>                 <NA>                 <NA>            <NA> #> 25             <NA>                 <NA>                 <NA>            <NA> #> 26             <NA>                 <NA>                 <NA>            <NA> #> 27             <NA>                 <NA>                 <NA>            <NA> #> 28             <NA>                 <NA>                 <NA>            <NA> #> 29             <NA>                 <NA>                 <NA>            <NA> #> 30             <NA>                 <NA>                 <NA>            <NA> #> 31             <NA>                 <NA>                 <NA>            <NA> #> 32             <NA>                 <NA>                 <NA>            <NA> #> 33             <NA>                 <NA>                 <NA>            <NA> #> 34             <NA>                 <NA>                 <NA>            <NA> #> 35             <NA>                 <NA>                 <NA>            <NA> #> 36             <NA>                 <NA>                 <NA>            <NA> #> 37             <NA>                 <NA>                 <NA>            <NA> #> 38             <NA>                 <NA>                 <NA>            <NA> #> 39             <NA>                 <NA>                 <NA>            <NA> #> 40             <NA>                 <NA>                 <NA>            <NA> #> 41             <NA>                 <NA>                 <NA>            <NA> #> 42             <NA>                 <NA>                 <NA>            <NA> #> 43             <NA>                 <NA>                 <NA>            <NA> #> 44             <NA>                 <NA>                 <NA>            <NA> #> 45             <NA>                 <NA>                 <NA>            <NA> #> 46             <NA>                 <NA>                 <NA>            <NA> #> 47             <NA>                 <NA>                 <NA>            <NA> #> 48             <NA>                 <NA>                 <NA>            <NA> #> 49             <NA>                 <NA>                 <NA>            <NA> #> 50             <NA>                 <NA>                 <NA>            <NA> #> 51             <NA>                 <NA>                 <NA>            <NA> #> 52             <NA>                 <NA>                 <NA>            <NA> #> 53             <NA>                 <NA>                 <NA>            <NA> #> 54             <NA>                 <NA>                 <NA>            <NA> #> 55             <NA>                 <NA>                 <NA>            <NA> #> 56             <NA>                 <NA>                 <NA>            <NA> #> 57             <NA>                 <NA>                 <NA>            <NA> #> 58             <NA>                 <NA>                 <NA>            <NA> #> 59             <NA>                 <NA>                 <NA>            <NA> #> 60             <NA>                 <NA>                 <NA>            <NA> #> 61             <NA>                 <NA>                 <NA>            <NA> #> 62             <NA>                 <NA>                 <NA>            <NA> #> 63             <NA>                 <NA>                 <NA>            <NA> #> 64             <NA>                 <NA>                 <NA>            <NA> #> 65             <NA>                 <NA>                 <NA>            <NA> #> 66             <NA>                 <NA>                 <NA>            <NA> #> 67             <NA>                 <NA>                 <NA>            <NA> #> 68             <NA>                 <NA>                 <NA>            <NA> #> 69             <NA>                 <NA>                 <NA>            <NA> #> 70             <NA>                 <NA>                 <NA>            <NA> #>    ci90.A.model.up ci95.mu.model.lo ci95.mu.model.up ci95.lambda.model.lo #> 1             <NA>             <NA>             <NA>                 <NA> #> 2             <NA>             <NA>             <NA>                 <NA> #> 3             <NA>             <NA>             <NA>                 <NA> #> 4             <NA>             <NA>             <NA>                 <NA> #> 5             <NA>             <NA>             <NA>                 <NA> #> 6             <NA>             <NA>             <NA>                 <NA> #> 7             <NA>             <NA>             <NA>                 <NA> #> 8             <NA>             <NA>             <NA>                 <NA> #> 9             <NA>             <NA>             <NA>                 <NA> #> 10            <NA>             <NA>             <NA>                 <NA> #> 11            <NA>             <NA>             <NA>                 <NA> #> 12            <NA>             <NA>             <NA>                 <NA> #> 13            <NA>             <NA>             <NA>                 <NA> #> 14            <NA>             <NA>             <NA>                 <NA> #> 15            <NA>             <NA>             <NA>                 <NA> #> 16            <NA>             <NA>             <NA>                 <NA> #> 17            <NA>             <NA>             <NA>                 <NA> #> 18            <NA>             <NA>             <NA>                 <NA> #> 19            <NA>             <NA>             <NA>                 <NA> #> 20            <NA>             <NA>             <NA>                 <NA> #> 21            <NA>             <NA>             <NA>                 <NA> #> 22            <NA>             <NA>             <NA>                 <NA> #> 23            <NA>             <NA>             <NA>                 <NA> #> 24            <NA>             <NA>             <NA>                 <NA> #> 25            <NA>             <NA>             <NA>                 <NA> #> 26            <NA>             <NA>             <NA>                 <NA> #> 27            <NA>             <NA>             <NA>                 <NA> #> 28            <NA>             <NA>             <NA>                 <NA> #> 29            <NA>             <NA>             <NA>                 <NA> #> 30            <NA>             <NA>             <NA>                 <NA> #> 31            <NA>             <NA>             <NA>                 <NA> #> 32            <NA>             <NA>             <NA>                 <NA> #> 33            <NA>             <NA>             <NA>                 <NA> #> 34            <NA>             <NA>             <NA>                 <NA> #> 35            <NA>             <NA>             <NA>                 <NA> #> 36            <NA>             <NA>             <NA>                 <NA> #> 37            <NA>             <NA>             <NA>                 <NA> #> 38            <NA>             <NA>             <NA>                 <NA> #> 39            <NA>             <NA>             <NA>                 <NA> #> 40            <NA>             <NA>             <NA>                 <NA> #> 41            <NA>             <NA>             <NA>                 <NA> #> 42            <NA>             <NA>             <NA>                 <NA> #> 43            <NA>             <NA>             <NA>                 <NA> #> 44            <NA>             <NA>             <NA>                 <NA> #> 45            <NA>             <NA>             <NA>                 <NA> #> 46            <NA>             <NA>             <NA>                 <NA> #> 47            <NA>             <NA>             <NA>                 <NA> #> 48            <NA>             <NA>             <NA>                 <NA> #> 49            <NA>             <NA>             <NA>                 <NA> #> 50            <NA>             <NA>             <NA>                 <NA> #> 51            <NA>             <NA>             <NA>                 <NA> #> 52            <NA>             <NA>             <NA>                 <NA> #> 53            <NA>             <NA>             <NA>                 <NA> #> 54            <NA>             <NA>             <NA>                 <NA> #> 55            <NA>             <NA>             <NA>                 <NA> #> 56            <NA>             <NA>             <NA>                 <NA> #> 57            <NA>             <NA>             <NA>                 <NA> #> 58            <NA>             <NA>             <NA>                 <NA> #> 59            <NA>             <NA>             <NA>                 <NA> #> 60            <NA>             <NA>             <NA>                 <NA> #> 61            <NA>             <NA>             <NA>                 <NA> #> 62            <NA>             <NA>             <NA>                 <NA> #> 63            <NA>             <NA>             <NA>                 <NA> #> 64            <NA>             <NA>             <NA>                 <NA> #> 65            <NA>             <NA>             <NA>                 <NA> #> 66            <NA>             <NA>             <NA>                 <NA> #> 67            <NA>             <NA>             <NA>                 <NA> #> 68            <NA>             <NA>             <NA>                 <NA> #> 69            <NA>             <NA>             <NA>                 <NA> #> 70            <NA>             <NA>             <NA>                 <NA> #>    ci95.lambda.model.up ci95.A.model.lo ci95.A.model.up          mu.spline #> 1                  <NA>            <NA>            <NA>  0.654816001499465 #> 2                  <NA>            <NA>            <NA>  0.619747299450474 #> 3                  <NA>            <NA>            <NA>  0.592057829691052 #> 4                  <NA>            <NA>            <NA>    0.5735343483318 #> 5                  <NA>            <NA>            <NA>  0.525062295704787 #> 6                  <NA>            <NA>            <NA>  0.456316502447919 #> 7                  <NA>            <NA>            <NA>  0.390726560790268 #> 8                  <NA>            <NA>            <NA>  0.251940922118165 #> 9                  <NA>            <NA>            <NA>  0.146967983991676 #> 10                 <NA>            <NA>            <NA> 0.0706085915782222 #> 11                 <NA>            <NA>            <NA> 0.0350781162806419 #> 12                 <NA>            <NA>            <NA>                  0 #> 13                 <NA>            <NA>            <NA>  0.667805440947091 #> 14                 <NA>            <NA>            <NA>  0.634842424530568 #> 15                 <NA>            <NA>            <NA>  0.616843918525468 #> 16                 <NA>            <NA>            <NA>  0.576428112727031 #> 17                 <NA>            <NA>            <NA>  0.536799871775423 #> 18                 <NA>            <NA>            <NA>  0.466925760091179 #> 19                 <NA>            <NA>            <NA>  0.367382135963074 #> 20                 <NA>            <NA>            <NA>  0.273396717365075 #> 21                 <NA>            <NA>            <NA>  0.147877837533728 #> 22                 <NA>            <NA>            <NA> 0.0743706308808013 #> 23                 <NA>            <NA>            <NA> 0.0303031319763864 #> 24                 <NA>            <NA>            <NA>                  0 #> 25                 <NA>            <NA>            <NA>    0.6624494819273 #> 26                 <NA>            <NA>            <NA>  0.609809130581689 #> 27                 <NA>            <NA>            <NA>  0.571418706086157 #> 28                 <NA>            <NA>            <NA>  0.536165297069835 #> 29                 <NA>            <NA>            <NA>  0.477829740989422 #> 30                 <NA>            <NA>            <NA>  0.398096668083663 #> 31                 <NA>            <NA>            <NA>  0.274061700149322 #> 32                 <NA>            <NA>            <NA>  0.136487192419594 #> 33                 <NA>            <NA>            <NA> 0.0677039279984363 #> 34                 <NA>            <NA>            <NA> 0.0332828286556106 #> 35                 <NA>            <NA>            <NA>                  0 #> 36                 <NA>            <NA>            <NA>   0.48469579102388 #> 37                 <NA>            <NA>            <NA>  0.434206070063908 #> 38                 <NA>            <NA>            <NA>  0.419332358527617 #> 39                 <NA>            <NA>            <NA>    0.3974558314294 #> 40                 <NA>            <NA>            <NA>  0.354077278397827 #> 41                 <NA>            <NA>            <NA>  0.295664839586189 #> 42                 <NA>            <NA>            <NA>   0.21539968014915 #> 43                 <NA>            <NA>            <NA>  0.116690893067837 #> 44                 <NA>            <NA>            <NA> 0.0463581928155975 #> 45                 <NA>            <NA>            <NA>                  0 #> 46                 <NA>            <NA>            <NA>                  0 #> 47                 <NA>            <NA>            <NA>                  0 #> 48                 <NA>            <NA>            <NA>  0.478931052552663 #> 49                 <NA>            <NA>            <NA>  0.439926937373464 #> 50                 <NA>            <NA>            <NA>  0.437400390446621 #> 51                 <NA>            <NA>            <NA>  0.401595057193846 #> 52                 <NA>            <NA>            <NA>  0.336528726431806 #> 53                 <NA>            <NA>            <NA>  0.295500607722341 #> 54                 <NA>            <NA>            <NA>  0.218716128495191 #> 55                 <NA>            <NA>            <NA>  0.118405282160346 #> 56                 <NA>            <NA>            <NA> 0.0507505039422879 #> 57                 <NA>            <NA>            <NA>                  0 #> 58                 <NA>            <NA>            <NA>                  0 #> 59                 <NA>            <NA>            <NA>                  0 #> 60                 <NA>            <NA>            <NA>  0.493620456147023 #> 61                 <NA>            <NA>            <NA>  0.415230230526334 #> 62                 <NA>            <NA>            <NA>  0.396908571388617 #> 63                 <NA>            <NA>            <NA>  0.360909757631024 #> 64                 <NA>            <NA>            <NA>  0.295937276476211 #> 65                 <NA>            <NA>            <NA>   0.21183330033937 #> 66                 <NA>            <NA>            <NA>  0.118788543267378 #> 67                 <NA>            <NA>            <NA> 0.0473593813944298 #> 68                 <NA>            <NA>            <NA>                  0 #> 69                 <NA>            <NA>            <NA>                  0 #> 70                 <NA>            <NA>            <NA>                  0 #>           tD.spline tmax.spline    lambda.spline mu2.spline tD2.spline #> 1  1.05853732800161           8  4.3720744311304       <NA>       <NA> #> 2   1.1184351770061        7.75 4.30331678184435       <NA>       <NA> #> 3  1.17074235961315        7.75 4.28611522597722       <NA>       <NA> #> 4  1.20855391237867        7.75 4.25486972442437       <NA>       <NA> #> 5  1.32012370004504        7.75 4.34725096205511       <NA>       <NA> #> 6  1.51900528874486           8 4.57583031435558       <NA>       <NA> #> 7  1.77399555115479        8.75 4.59138000697819       <NA>       <NA> #> 8  2.75122903707896        8.75 4.09892534039635       <NA>       <NA> #> 9  4.71631413682046          10 3.36988520568674       <NA>       <NA> #> 10 9.81675409559837        14.5 2.13346017708193       <NA>       <NA> #> 11 19.7601027094623        4.75 1.46259540978047       <NA>       <NA> #> 12             <NA>        <NA>             <NA>       <NA>       <NA> #> 13 1.03794778847102        7.75 4.14970125577473       <NA>       <NA> #> 14 1.09184130388339           8 4.61856899177319       <NA>       <NA> #> 15  1.1236994639047           8 4.64316716711887       <NA>       <NA> #> 16 1.20248677199439           8  4.5424507245061       <NA>       <NA> #> 17 1.29125809636917        7.75 4.29149826622495       <NA>       <NA> #> 18 1.48449119711149         8.5   4.639947018867       <NA>       <NA> #> 19 1.88671988294394           8 4.00767334893729       <NA>       <NA> #> 20 2.53531639750584           8 3.90856474034723       <NA>       <NA> #> 21 4.68729589315135        9.25 3.20852808373242       <NA>       <NA> #> 22 9.32017346566412          12 2.58589691076908       <NA>       <NA> #> 23 22.8737802118962       12.75 3.64323351357615       <NA>       <NA> #> 24             <NA>        <NA>             <NA>       <NA>       <NA> #> 25 1.04633968245146        8.25 4.67093123186752       <NA>       <NA> #> 26 1.13666251585764        8.25 4.65232158213748       <NA>       <NA> #> 27 1.21302850812769        7.75 4.17673089273765       <NA>       <NA> #> 28 1.29278635590185           8 4.65220393665169       <NA>       <NA> #> 29 1.45061539937777         8.5 4.83612197277681       <NA>       <NA> #> 30  1.7411529312631        8.75 4.35858257495773       <NA>       <NA> #> 31 2.52916471065561        8.25 3.73729279764856       <NA>       <NA> #> 32 5.07847782837417       10.75  2.7104315687967       <NA>       <NA> #> 33 10.2379167804851         9.5 1.55843403269274       <NA>       <NA> #> 34 20.8259696834121        8.25 2.61218098295795       <NA>       <NA> #> 35             <NA>        <NA>             <NA>       <NA>       <NA> #> 36 1.43006643217538        8.75 4.18278953034097       <NA>       <NA> #> 37 1.59635534449789        8.75   4.234415582499       <NA>       <NA> #> 38 1.65297804107883         8.5 4.22391441146881       <NA>       <NA> #> 39 1.74396027369162           9 4.26858572931337       <NA>       <NA> #> 40 1.95761553437256        8.25 3.69466498434672       <NA>       <NA> #> 41 2.34436797263439         8.5 3.59987585081625       <NA>       <NA> #> 42 3.21795826289058          10 3.20699438269069       <NA>       <NA> #> 43 5.94002807191638          14 2.58091867800995       <NA>       <NA> #> 44 14.9519888171036       15.25 3.90416084943337       <NA>       <NA> #> 45             <NA>        <NA>             <NA>       <NA>       <NA> #> 46             <NA>        <NA>             <NA>       <NA>       <NA> #> 47             <NA>        <NA>             <NA>       <NA>       <NA> #> 48 1.44727968016592         8.5 3.93062141866339       <NA>       <NA> #> 49 1.57559613125376         8.5 4.02855443316407       <NA>       <NA> #> 50 1.58469721495261        8.25 3.99847078847781       <NA>       <NA> #> 51 1.72598533807494        8.25 3.82078254366025       <NA>       <NA> #> 52 2.05969691773224         8.5 3.82088030554671       <NA>       <NA> #> 53 2.34567091385221        8.75  4.0061970159479       <NA>       <NA> #> 54 3.16916354239137           9 3.41335634271809       <NA>       <NA> #> 55 5.85402245502254       11.75 2.72708043287139       <NA>       <NA> #> 56 13.6579369014379          24 6.89661351212749       <NA>       <NA> #> 57             <NA>        <NA>             <NA>       <NA>       <NA> #> 58             <NA>        <NA>             <NA>       <NA>       <NA> #> 59             <NA>        <NA>             <NA>       <NA>       <NA> #> 60 1.40421081000236           9 4.35884335465669       <NA>       <NA> #> 61 1.66930808405094        8.75 3.88370819427071       <NA>       <NA> #> 62 1.74636485711285         8.5 4.21311715550415       <NA>       <NA> #> 63 1.92055539065969           9 4.07518688950368       <NA>       <NA> #> 64 2.34220977098052         9.5 4.06299903217365       <NA>       <NA> #> 65 3.27213511496767       10.75 3.49826397421944       <NA>       <NA> #> 66 5.83513495068088          13 2.25448314767243       <NA>       <NA> #> 67 14.6359002197919       18.75 4.44378004928396       <NA>       <NA> #> 68             <NA>        <NA>             <NA>       <NA>       <NA> #> 69             <NA>        <NA>             <NA>       <NA>       <NA> #> 70             <NA>        <NA>             <NA>       <NA>       <NA> #>    tmax2.spline lambda2.spline          y0.spline           A.spline #> 1          <NA>           <NA> 0.0537320016119995   5.95754060892047 #> 2          <NA>           <NA> 0.0501949963595214   3.86774365961436 #> 3          <NA>           <NA> 0.0554752058854544   3.20955570088028 #> 4          <NA>           <NA> 0.0518906272762418   2.74041741490283 #> 5          <NA>           <NA> 0.0511952656851473   1.98920324336498 #> 6          <NA>           <NA> 0.0497967168368223   1.52175678118214 #> 7          <NA>           <NA> 0.0478805953226173   1.09605562990966 #> 8          <NA>           <NA> 0.0505843077138639  0.739305494006649 #> 9          <NA>           <NA> 0.0516557655892934  0.425225777875766 #> 10         <NA>           <NA> 0.0541930974916315  0.211883856172768 #> 11         <NA>           <NA> 0.0573377060677433  0.100260786128907 #> 12         <NA>           <NA>               <NA>               <NA> #> 13         <NA>           <NA> 0.0521373219161836   6.09378529406314 #> 14         <NA>           <NA> 0.0557921132158308   4.26575614489891 #> 15         <NA>           <NA> 0.0478764049599092   3.23012438122247 #> 16         <NA>           <NA> 0.0468755296940477   2.58018766647322 #> 17         <NA>           <NA> 0.0574562643794367    2.3919089552096 #> 18         <NA>           <NA> 0.0518784726510155   1.59444862048912 #> 19         <NA>           <NA> 0.0531057747564372   1.11121693749835 #> 20         <NA>           <NA>  0.048520721991994    0.7602497172751 #> 21         <NA>           <NA> 0.0582804612232336  0.476391562016172 #> 22         <NA>           <NA> 0.0521148506070439   0.19485603508063 #> 23         <NA>           <NA> 0.0489991140813205 0.0805570628262743 #> 24         <NA>           <NA>               <NA>               <NA> #> 25         <NA>           <NA> 0.0497189484507299   6.34764516709224 #> 26         <NA>           <NA> 0.0552822100819483   3.74626684121359 #> 27         <NA>           <NA> 0.0480206909350582   2.54572175325506 #> 28         <NA>           <NA> 0.0504663209917502   1.95410295654713 #> 29         <NA>           <NA> 0.0522579724454733    1.7820068455366 #> 30         <NA>           <NA> 0.0550427856962323   1.42786425636183 #> 31         <NA>           <NA> 0.0576760643875496  0.875746041473968 #> 32         <NA>           <NA> 0.0494735609877412  0.393352035259628 #> 33         <NA>           <NA> 0.0527037060454391  0.195465653272879 #> 34         <NA>           <NA> 0.0573939190769829 0.0955852675615071 #> 35         <NA>           <NA>               <NA>               <NA> #> 36         <NA>           <NA> 0.0543227348279522     4.160908665993 #> 37         <NA>           <NA>   0.04694175483379   2.16883784145893 #> 38         <NA>           <NA> 0.0475624642852157   1.89900534192614 #> 39         <NA>           <NA> 0.0472114239963848   1.68099136971541 #> 40         <NA>           <NA> 0.0472029292719749   1.33090122213485 #> 41         <NA>           <NA> 0.0575349384613268   1.35076585758205 #> 42         <NA>           <NA> 0.0492888622592412  0.877577405885171 #> 43         <NA>           <NA> 0.0531756610399088  0.461763746427722 #> 44         <NA>           <NA> 0.0542546149336001  0.122458668867252 #> 45         <NA>           <NA>               <NA>               <NA> #> 46         <NA>           <NA>               <NA>               <NA> #> 47         <NA>           <NA>               <NA>               <NA> #> 48         <NA>           <NA> 0.0526266493662639   4.07019966001492 #> 49         <NA>           <NA> 0.0535193206065894   2.77402667501241 #> 50         <NA>           <NA>  0.056968221568753    2.5248257208153 #> 51         <NA>           <NA> 0.0522789652870344   2.01323332992592 #> 52         <NA>           <NA> 0.0548245261418066   1.41451258188155 #> 53         <NA>           <NA>  0.053790590411154   1.12074312411888 #> 54         <NA>           <NA>  0.050329582802489  0.890650453674988 #> 55         <NA>           <NA> 0.0544607082177372  0.437391469920274 #> 56         <NA>           <NA> 0.0548812263728144  0.130735580383643 #> 57         <NA>           <NA>               <NA>               <NA> #> 58         <NA>           <NA>               <NA>               <NA> #> 59         <NA>           <NA>               <NA>               <NA> #> 60         <NA>           <NA> 0.0494769035194493   3.95846137272821 #> 61         <NA>           <NA> 0.0502093788706039   2.12846185003114 #> 62         <NA>           <NA> 0.0575212561641127   2.02224279386559 #> 63         <NA>           <NA> 0.0517960966436326   1.66464121654655 #> 64         <NA>           <NA> 0.0539890314181297   1.30190788396363 #> 65         <NA>           <NA> 0.0556403486377173  0.872771153976291 #> 66         <NA>           <NA> 0.0483684872073579  0.432551525731246 #> 67         <NA>           <NA> 0.0545645529901931   0.12962945555415 #> 68         <NA>           <NA>               <NA>               <NA> #> 69         <NA>           <NA>               <NA>               <NA> #> 70         <NA>           <NA>               <NA>               <NA> #>             dY.spline  integral.spline reliable_fit.spline reliable_fit2.spline #> 1    5.90380860730847 74.9752764136098                TRUE                FALSE #> 2    3.81754866325484 70.1993984386966                TRUE                FALSE #> 3    3.15408049499482 66.1005288455527                TRUE                FALSE #> 4    2.68852678762659 63.9191460968656                TRUE                FALSE #> 5    1.93800797767983 58.9232699118384                TRUE                FALSE #> 6    1.47196006434532 53.0013904483723                TRUE                FALSE #> 7    1.04817503458704 48.2421827079738                TRUE                FALSE #> 8   0.688721186292785  38.101527366973                TRUE                FALSE #> 9   0.373570012286472 27.8447547684793                TRUE                FALSE #> 10  0.157690758681137 16.6205149946112                TRUE                FALSE #> 11 0.0429230800611641 6.90785014159475                TRUE                FALSE #> 12                  0                0               FALSE                FALSE #> 13   6.04164797214695 77.1453179168429                TRUE                FALSE #> 14   4.20996403168308 69.0138451229132                TRUE                FALSE #> 15   3.18224797626256 66.9390143102873                TRUE                FALSE #> 16   2.53331213677917 63.5982433162838                TRUE                FALSE #> 17   2.33445269083016 60.3728982265121                TRUE                FALSE #> 18    1.5425701478381 53.4999020004779                TRUE                FALSE #> 19   1.05811116274191 47.9834502183897                TRUE                FALSE #> 20  0.711728995283106 40.8170443701258                TRUE                FALSE #> 21  0.418111100792938 28.2100381215171                TRUE                FALSE #> 22  0.142741184473586 16.5281051759629                TRUE                FALSE #> 23 0.0315579487449538 6.17696902421538                TRUE                FALSE #> 24                  0                0               FALSE                FALSE #> 25   6.29792621864151 75.7132979356477                TRUE                FALSE #> 26   3.69098463113164 66.9019255638839                TRUE                FALSE #> 27      2.49770106232 64.2928353429179                TRUE                FALSE #> 28   1.90363663555538 58.3535121425108                TRUE                FALSE #> 29   1.72974887309112 53.7484530928529                TRUE                FALSE #> 30   1.37282147066559 50.6038439496836                TRUE                FALSE #> 31  0.818069977086418 40.5418085298631                TRUE                FALSE #> 32  0.343878474271887 27.8908415268677                TRUE                FALSE #> 33   0.14276194722744 16.1738402665738                TRUE                FALSE #> 34 0.0381913484845242 6.56427858641756                TRUE                FALSE #> 35                  0                0               FALSE                FALSE #> 36   4.10658593116504 66.1867589758337                TRUE                FALSE #> 37   2.12189608662514 58.4923685513965                TRUE                FALSE #> 38   1.85144287764092 56.6566959912856                TRUE                FALSE #> 39   1.63377994571903 53.8950129568207                TRUE                FALSE #> 40   1.28369829286287 51.4395296681258                TRUE                FALSE #> 41   1.29323091912072 46.6970291952982                TRUE                FALSE #> 42   0.82828854362593 39.6722431456569                TRUE                FALSE #> 43  0.408588085387813 26.5188874913066                TRUE                FALSE #> 44 0.0682040539336521 9.91198476882075                TRUE                FALSE #> 45                  0                0               FALSE                FALSE #> 46                  0                0               FALSE                FALSE #> 47                  0                0               FALSE                FALSE #> 48   4.01757301064866 67.1753253136198                TRUE                FALSE #> 49   2.72050735440582 60.5945893762762                TRUE                FALSE #> 50   2.46785749924655 58.9945456149905                TRUE                FALSE #> 51   1.96095436463889 57.0120125619707                TRUE                FALSE #> 52   1.35968805573974 49.6935961561795                TRUE                FALSE #> 53   1.06695253370773 44.2956549102391                TRUE                FALSE #> 54  0.840320870872499 39.8756269915434                TRUE                FALSE #> 55  0.382930761702537 25.4867383696967                TRUE                FALSE #> 56 0.0758543540108289  10.405801055063                TRUE                FALSE #> 57                  0                0               FALSE                FALSE #> 58                  0                0               FALSE                FALSE #> 59                  0                0               FALSE                FALSE #> 60   3.90898446920876 66.1843642239279                TRUE                FALSE #> 61   2.07825247116054 57.7891197675185                TRUE                FALSE #> 62   1.96472153770147 54.2144814386492                TRUE                FALSE #> 63   1.61284511990292 52.2128988605694                TRUE                FALSE #> 64    1.2479188525455 45.7171499113396                TRUE                FALSE #> 65  0.817130805338573 37.8225837089685                TRUE                FALSE #> 66  0.384183038523888 27.3034080061218                TRUE                FALSE #> 67 0.0750649025639571 10.0716336698098                TRUE                FALSE #> 68                  0                0               FALSE                FALSE #> 69                  0                0               FALSE                FALSE #> 70                  0                0               FALSE                FALSE #>    smooth.spline              mu.bt        lambda.bt               A.bt #> 1           0.55  0.654933466965753 4.38079884143158   5.96726116001705 #> 2           0.55  0.618541754133495 4.29965665530658   3.89895790442995 #> 3           0.55  0.590813834105457 4.27547473994733   3.23464532030603 #> 4           0.55  0.572078718326458 4.25649550099808   2.75183183399353 #> 5           0.55  0.522500806648362 4.33612783735464   1.99042207832425 #> 6           0.55  0.456500283727939 4.58755391415107   1.52551375663463 #> 7           0.55  0.391582193496282 4.59503553763758   1.10045997709092 #> 8           0.55  0.253281442830202 4.16436233299427  0.731554926265307 #> 9           0.55  0.146280532944689 3.36900783007924  0.424050382141584 #> 10          0.55 0.0734393869134612 2.29469741162444  0.205151542195347 #> 11          0.55 0.0359979226287891 2.36965045765189 0.0986790263249533 #> 12          0.55               <NA>             <NA>               <NA> #> 13          0.55  0.667064763477259 4.14950349805547   6.09446615110981 #> 14          0.55  0.634426986224863 4.61952391205052   4.28054601162446 #> 15          0.55  0.615752488174248 4.63595473245096   3.23225539116565 #> 16          0.55  0.575417657763611 4.54173922773688   2.57066165823528 #> 17          0.55  0.534136970647397 4.27028007058653   2.39868265654741 #> 18          0.55   0.46559878222864 4.62174310013956   1.59685299637092 #> 19          0.55  0.365598215729356  3.9914337839272   1.11304394937238 #> 20          0.55  0.276792928469225 3.97850098546339  0.757589207374859 #> 21          0.55  0.147828010103275 3.23136308103816   0.47647514471587 #> 22          0.55 0.0743343751551707 2.57717662684495  0.192977674887741 #> 23          0.55 0.0362054143283994 3.72561786178363 0.0800576122019836 #> 24          0.55               <NA>             <NA>               <NA> #> 25          0.55  0.664147876876302 4.68443324291497   6.40041000273473 #> 26          0.55  0.608495539034375 4.64503853554755   3.75377650306484 #> 27          0.55  0.570386469960417 4.17897586954199   2.55531400027811 #> 28          0.55  0.532477482174709 4.62262180924806   1.96255171988429 #> 29          0.55  0.477943366570753 4.85715698247557   1.79144718552904 #> 30          0.55  0.398936676185808 4.35137236511132   1.43549577141719 #> 31          0.55  0.272511987981009 3.73396598523017  0.875529555153169 #> 32          0.55   0.14013569237424 2.86707108967913  0.390223540669669 #> 33          0.55 0.0696082260675188  1.8338807429662  0.192089688331695 #> 34          0.55 0.0357184349275283 3.22848128750153 0.0956896216547435 #> 35          0.55               <NA>             <NA>               <NA> #> 36          0.55  0.484144942508076 4.17663648882521   4.14164456171494 #> 37          0.55  0.435267004491857  4.2495989374878   2.17558166249388 #> 38          0.55  0.418694012709586  4.2140840303061   1.90074194445674 #> 39          0.55  0.397303044585241 4.27684099004513   1.68994448933777 #> 40          0.55  0.351732557740232 3.66630349639849   1.33342310219194 #> 41          0.55  0.295311247923551 3.60428939591599   1.35311204296563 #> 42          0.55   0.21620199051268 3.24352357030104  0.861729246979732 #> 43          0.55  0.118954543277908 2.74194999697426  0.450062757001039 #> 44          0.55 0.0477594638555094 4.36757752452587  0.120986019306696 #> 45          0.55               <NA>             <NA>               <NA> #> 46          0.55               <NA>             <NA>               <NA> #> 47          0.55               <NA>             <NA>               <NA> #> 48          0.55  0.478202411778551  3.9283724982722   4.08103461567972 #> 49          0.55   0.43879297219327 4.01648040146379   2.78787282880081 #> 50          0.55  0.436717868117503 3.99764944050491   2.53006295839214 #> 51          0.55  0.400713342738157 3.79652418597358      2.01357997243 #> 52          0.55  0.337206549913046 3.82863860725829   1.41807918007445 #> 53          0.55  0.295549302822051 4.02147720928743   1.11140061499141 #> 54          0.55  0.218892780243187 3.42449221059094   0.88876624480181 #> 55          0.55   0.11639723325553 2.60206937923331  0.430707052661984 #> 56          0.55 0.0457963754098244 2.96603695827237  0.126998837540519 #> 57          0.55               <NA>             <NA>               <NA> #> 58          0.55               <NA>             <NA>               <NA> #> 59          0.55               <NA>             <NA>               <NA> #> 60          0.55  0.492039211936741 4.34482326848778   3.95927859700919 #> 61          0.55  0.416109989589818 3.89987101361756   2.12959272480599 #> 62          0.55  0.396698287176784 4.20634922262402   2.02150614546741 #> 63          0.55  0.360497872582642 4.06091692670109   1.66168956028254 #> 64          0.55  0.295571568667493  4.0617015905364   1.30504638714816 #> 65          0.55  0.213275259092588 3.54734827098398  0.869329243460374 #> 66          0.55  0.120297542548298 2.38006186951083  0.424572112832554 #> 67          0.55 0.0512726309924925 4.62704483516107   0.12770486144934 #> 68          0.55               <NA>             <NA>               <NA> #> 69          0.55               <NA>             <NA>               <NA> #> 70          0.55               <NA>             <NA>               <NA> #>                 dY.bt      integral.bt            stdmu.bt       stdlambda.bt #> 1    5.91325668160825 73.0458404393983 0.00248025272363649 0.0150041081609213 #> 2    3.84869907149678  68.456833077008 0.00315690823474389 0.0181128721186718 #> 3    3.17928567314818 64.4676647725546 0.00510565809083253  0.026104794649081 #> 4    2.69965935063162  62.555508068881 0.00419184189396693  0.028366747534203 #> 5    1.93904354332897 57.6468294916983 0.00444638571492074 0.0354660096212221 #> 6    1.47552527156041 51.8144836464997 0.00380716680698428 0.0281895233214735 #> 7    1.05270011957963 47.0235202442688 0.00417607757322078 0.0548683075049769 #> 8   0.680560214513055 37.0082821179869 0.00325904880089041 0.0735538168628768 #> 9   0.372301928251968 27.0491616440643 0.00402433031954416  0.179960141526788 #> 10  0.150778777779011 16.0683170101637 0.00294158278672843  0.570926577545089 #> 11 0.0412587058727604 6.65965989264445 0.00402009072429403   1.49602054384828 #> 12               <NA>             <NA>                <NA>               <NA> #> 13   6.04222188072341 75.1821262583195 0.00319610880149414 0.0221216176564178 #> 14   4.22468830149871 67.1808199422024 0.00808609774046808 0.0397952930456317 #> 15   3.18441851646399 65.6779690488256 0.00349467075798581 0.0174895385826002 #> 16   2.52364296021879 61.9604401362853 0.00435613757240848 0.0247414467654949 #> 17   2.34133816502998 59.1572595698714 0.00472558568095054    0.0314279752155 #> 18   1.54507521993784  52.097479180078 0.00403906876260268  0.036440781504514 #> 19   1.05986885352145 47.1111888619749 0.00461240978853374 0.0461514345197733 #> 20  0.708902015473584 39.6254754389905 0.00713060166440337  0.131887200735772 #> 21  0.418173034446295 27.4316558868634 0.00282931248435498  0.130268652121719 #> 22  0.140897304949157  15.931039974791 0.00199044032408069  0.242543104427837 #> 23 0.0310557836600441 6.00277582521128 0.00484983444234312   1.55833706212666 #> 24               <NA>             <NA>                <NA>               <NA> #> 25   6.35059558107303 74.0289920420431 0.00542761430561361  0.033203585924771 #> 26   3.69847266555259 65.2623806424451 0.00293843474554491 0.0196374428990951 #> 27   2.50700559941285 62.6770899131105 0.00540970616802452 0.0376371312179427 #> 28   1.91225047233824  56.934580921311 0.00630801777326966  0.040246631669121 #> 29   1.73869034839328 51.9698328350789 0.00513997562262232 0.0418941829710223 #> 30   1.38071773431355  49.384195733623 0.00417954127640836 0.0430449519381422 #> 31  0.817465986788167 39.5054018347372 0.00338090400174088 0.0694978558334066 #> 32  0.340739948189153 27.0672274751372 0.00235486720594399 0.0957414101937046 #> 33  0.139252973680603 15.5755680446556  0.0017955433833709  0.237346474643254 #> 34  0.038386189425552 6.34846106519395 0.00327740860786284   1.81254138599083 #> 35               <NA>             <NA>                <NA>               <NA> #> 36   4.08733961060073 64.2834227046185 0.00355307404389105 0.0324809583648377 #> 37   2.12858793187758 56.9670284486464 0.00292180573492407 0.0317036068403553 #> 38   1.85324382987783 55.3027876319874  0.0033732400048081 0.0362754361142304 #> 39   1.64252164574215 52.1320576606559 0.00637217752278548 0.0751806521430896 #> 40   1.28611334374466 49.8994891709934  0.0056485070506827 0.0877083051469365 #> 41   1.29542497900756 45.6712922675485 0.00217532980965764 0.0433468340577687 #> 42  0.812319971668841   38.21023953623 0.00208784342796492 0.0624703213370834 #> 43  0.396970755474582 25.7113953080493 0.00301909880146944  0.290441094309751 #> 44  0.066695648601175 9.55999018429333 0.00247633723104058   1.23094189955697 #> 45               <NA>             <NA>                <NA>               <NA> #> 46               <NA>             <NA>                <NA>               <NA> #> 47               <NA>             <NA>                <NA>               <NA> #> 48   4.02826454478003 65.6577735704716 0.00251432353659605 0.0234673978829497 #> 49    2.7342601153038 59.3779209854848 0.00391708642274381 0.0474294438678829 #> 50   2.47290062671984 57.4900488366081 0.00461377666492384 0.0478179933532124 #> 51   1.96158933138824 55.8192314541424 0.00470467310754045 0.0521974324831246 #> 52    1.3632865759774 48.2416511541263 0.00434897045071675 0.0579732411205687 #> 53   1.05744235952562 43.3874271272439 0.00419488012491366 0.0637583627757972 #> 54  0.838427043832907 38.8548180361889 0.00302639470487074 0.0861352122293093 #> 55  0.376060637066639 24.6803829995445 0.00335583703373273  0.264923884242669 #> 56 0.0722143263891635 10.0640810650876 0.00277333374713012   1.38458229199224 #> 57               <NA>             <NA>                <NA>               <NA> #> 58               <NA>             <NA>                <NA>               <NA> #> 59               <NA>             <NA>                <NA>               <NA> #> 60   3.90974395701622 64.8170587235945 0.00352228379790986 0.0328045679615869 #> 61   2.07924911218406 56.2486361123133 0.00426564203687224 0.0498970448675485 #> 62   1.96404000600075 52.3892707873749 0.00305873713799649 0.0329187022317617 #> 63   1.60997173143123 50.9922319984302 0.00482962794311939 0.0721292034696958 #> 64   1.25091071533504 44.3805881025547 0.00372705389739082 0.0775425667135648 #> 65  0.813556141520264 36.6720458874633 0.00316730976947404 0.0983627191791125 #> 66  0.376153123777923 26.4300425724507 0.00263055300626294  0.237566912464508 #> 67 0.0730218928312452 9.78689541110897 0.00393301831662078   1.67866798649579 #> 68               <NA>             <NA>                <NA>               <NA> #> 69               <NA>             <NA>                <NA>               <NA> #> 70               <NA>             <NA>                <NA>               <NA> #>                 stdA.bt             stddY.bt     stdintegral.bt reliable_fit.bt #> 1    0.0257368092147246   0.0256896635113568   1.32102041313728            TRUE #> 2    0.0254097757974616   0.0253926220694544  0.957674917123074            TRUE #> 3    0.0172567868922457   0.0172747079180619  0.828365133993176            TRUE #> 4    0.0139050603053709   0.0139452770052244  0.581951175331428            TRUE #> 5   0.00507408777814889  0.00500242625732562  0.551207035572865            TRUE #> 6   0.00559042639219514  0.00568245542555842  0.575329706402424            TRUE #> 7   0.00360168331910177  0.00367012723917286  0.768031222313806            TRUE #> 8   0.00939988125125887  0.00937259223710276   0.57745635742964            TRUE #> 9   0.00232232161387134  0.00233272223638895  0.463196170875299            TRUE #> 10   0.0012050691414581  0.00111870949848548  0.249138073677281            TRUE #> 11 0.000884902152924954 0.000899856680162057  0.110010630797897            TRUE #> 12                 <NA>                 <NA>               <NA>            <NA> #> 13   0.0232642527948879   0.0232890616025535   1.18195115946946            TRUE #> 14   0.0205339489033657   0.0205210119301582   1.10701768528599            TRUE #> 15     0.00789255068582  0.00789765411672836  0.642089122686346            TRUE #> 16   0.0174888216703693   0.0174746528249616   1.04090663433428            TRUE #> 17  0.00700810177559605     0.00699841010421  0.447384728460117            TRUE #> 18  0.00644867702081098  0.00642883906975516   1.08882246798969            TRUE #> 19  0.00362240690822061  0.00360477400259291  0.374228925476723            TRUE #> 20  0.00259040288705481  0.00263176822644826  0.634406198842644            TRUE #> 21  0.00348846346885679   0.0034724886746847  0.329018423500822            TRUE #> 22  0.00342470946379272  0.00338152172395462  0.440332708746291            TRUE #> 23 0.000482278853845278 0.000493304680255679 0.0742505128889927            TRUE #> 24                 <NA>                 <NA>               <NA>            <NA> #> 25    0.051910357391675   0.0519245402893721   0.72567751983302            TRUE #> 26   0.0170520524978719    0.017086890154561  0.803583192287443            TRUE #> 27  0.00955580251912771  0.00957390323391186  0.797679703975676            TRUE #> 28  0.00790654649674608  0.00797285604047497  0.629863131810095            TRUE #> 29  0.00827347549102823  0.00824468495686711   1.57019248891283            TRUE #> 30   0.0140934440961987    0.014112412422752  0.937052513957241            TRUE #> 31  0.00465012793144529  0.00462094046080841  0.418882278949329            TRUE #> 32  0.00438917106114052   0.0043981655217285  0.509753696629509            TRUE #> 33  0.00248022782190605  0.00255108306714053  0.454294727102005            TRUE #> 34 0.000962056549244284  0.00105848270251392  0.108338831179994            TRUE #> 35                 <NA>                 <NA>               <NA>            <NA> #> 36   0.0135456810032257   0.0136534373209393   0.97961423365773            TRUE #> 37  0.00610395905135866  0.00608924683862982   1.08500905266403            TRUE #> 38  0.00716571450054753  0.00722982038848098  0.555758796520202            TRUE #> 39  0.00771800347799348  0.00770944027517801  0.955392499253944            TRUE #> 40  0.00576203448395281  0.00585913982249265   1.34691384448142            TRUE #> 41  0.00642471762104596   0.0065085504816138  0.451125172202827            TRUE #> 42  0.00730430063212523   0.0073351245169083  0.958827670108985            TRUE #> 43  0.00747913875417463  0.00745453882137974  0.541483410106062            TRUE #> 44  0.00114344727236091  0.00120370947937232  0.237625134161791            TRUE #> 45                 <NA>                 <NA>               <NA>            <NA> #> 46                 <NA>                 <NA>               <NA>            <NA> #> 47                 <NA>                 <NA>               <NA>            <NA> #> 48   0.0142753620846249   0.0142719581846802  0.736932284105438            TRUE #> 49   0.0203398686106288   0.0202652234802281  0.697080407231634            TRUE #> 50  0.00709286573807531  0.00708819707654745  0.997792896913288            TRUE #> 51  0.00763648840279729   0.0075916541568335  0.425097753286281            TRUE #> 52  0.00556181864394392  0.00554822070933167   1.10156736663562            TRUE #> 53  0.00440925068171803   0.0044402786088764  0.401072745599916            TRUE #> 54  0.00432789806655156  0.00425373658417465  0.705387812864651            TRUE #> 55   0.0064023895873605  0.00633616468939681  0.591283673578066            TRUE #> 56  0.00126831315989641  0.00126560255426826  0.172949075180672            TRUE #> 57                 <NA>                 <NA>               <NA>            <NA> #> 58                 <NA>                 <NA>               <NA>            <NA> #> 59                 <NA>                 <NA>               <NA>            <NA> #> 60   0.0100819072529984   0.0101520956034066  0.598984611038089            TRUE #> 61  0.00608573095200125  0.00604759344279377   1.05478765334255            TRUE #> 62   0.0110324405742193   0.0110662764318643   1.34982036492606            TRUE #> 63  0.00715255963049971  0.00716811181355654  0.913102305464628            TRUE #> 64  0.00470787530409498  0.00474292169801058  0.679387529196758            TRUE #> 65   0.0040385436511454  0.00413936579776032   0.58275232970876            TRUE #> 66   0.0053003305224192  0.00531301183926902  0.490492620749775            TRUE #> 67  0.00145658634707654   0.0015192314238147  0.157389399403788            TRUE #> 68                 <NA>                 <NA>               <NA>            <NA> #> 69                 <NA>                 <NA>               <NA>            <NA> #> 70                 <NA>                 <NA>               <NA>            <NA> #>         ci90.mu.bt.lo      ci90.mu.bt.up  ci90.lambda.bt.lo ci90.lambda.bt.up #> 1   0.650853451235371  0.659013482696135   4.35611708350686  4.40548059935629 #> 2   0.613348640087341  0.623734868179649   4.26986098067137   4.3294523299418 #> 3   0.582415026546038  0.599212641664877   4.23253235274959  4.31841712714507 #> 4   0.565183138410883  0.578974298242034   4.20983220130432  4.30315880069185 #> 5   0.515186502147318  0.529815111149407   4.27778625152773  4.39446942318155 #> 6    0.45023749433045  0.462763073125428   4.54118214828725  4.63392568001489 #> 7   0.384712545888334   0.39845184110423   4.50477717179189  4.68529390348327 #> 8   0.247920307552737  0.258642578107666   4.04336630425483   4.2853583617337 #> 9   0.139660509569039  0.152900556320339   3.07297339726767  3.66504226289081 #> 10 0.0686004832292929 0.0782782905976295   1.35552319156277  3.23387163168611 #> 11 0.0293848733873254 0.0426109718702528 -0.091303336978537  4.83060425228232 #> 12               <NA>               <NA>               <NA>              <NA> #> 13  0.661807164498801  0.672322362455717   4.11311343701066  4.18589355910027 #> 14  0.621125355441793  0.647728617007933   4.55406065499046  4.68498716911059 #> 15  0.610003754777361  0.621501221571134   4.60718444148258  4.66472502341934 #> 16  0.568251811456999  0.582583504070223   4.50103954780764  4.58243890766612 #> 17  0.526363382202234  0.541910559092561   4.21858105135703  4.32197908981602 #> 18  0.458954514114159  0.472243050343121   4.56179801456464  4.68168818571449 #> 19  0.358010801627218  0.373185629831494   3.91551467414217  4.06735289371222 #> 20  0.265063088731281  0.288522768207168   3.76154654025304  4.19545543067373 #> 21  0.143173791066511  0.152482229140039   3.01707114829794  3.44565501377839 #> 22  0.071060100822058 0.0776086494882834   2.17819322006116  2.97616003362874 #> 23 0.0282274366707449 0.0441833919860538   1.16215339458527  6.28908232898199 #> 24               <NA>               <NA>               <NA>              <NA> #> 25  0.655219451343567  0.673076302409036   4.62981334406873  4.73905314176122 #> 26  0.603661813877954  0.613329264190797   4.61273494197854  4.67734212911656 #> 27  0.561487503314016  0.579285436606817   4.11706278868847   4.2408889503955 #> 28   0.52210079293768  0.542854171411737   4.55641610015236  4.68882751834377 #> 29  0.469488106671539  0.486398626469966   4.78824105148824   4.9260729134629 #> 30  0.392061330786116    0.4058120215855   4.28056341917308  4.42218131104957 #> 31  0.266950400898146  0.278073575063873   3.61964201238422  3.84828995807613 #> 32  0.136261935820462  0.144009448928017   2.70957646991048  3.02456570944777 #> 33 0.0666545572018737  0.072561894933164   1.44344579217804  2.22431569375435 #> 34 0.0303270977675939 0.0411097720874627  0.246850707546612  6.21011186745644 #> 35               <NA>               <NA>               <NA>              <NA> #> 36  0.478300135705876  0.489989749310277   4.12320531231506  4.23006766533537 #> 37  0.430460634057907  0.440073374925807   4.19744650423541  4.30175137074018 #> 38  0.413145032901676  0.424242992517495   4.15441093789819    4.273757122714 #> 39  0.386820812560259  0.407785276610223   4.15316881726975  4.40051316282052 #> 40  0.342440763641859  0.361024351838605   3.52202333443178   3.8105836583652 #> 41  0.291732830386664  0.298889665460438   3.53298385389096  3.67559493794102 #> 42  0.212767488073678  0.219636492951683   3.14075989170154  3.34628724890054 #> 43  0.113988125749491  0.123920960806326   2.26417439683472   3.2197255971138 #> 44 0.0436858891104476 0.0518330386005711   2.34267809975465  6.39247694929709 #> 45               <NA>               <NA>               <NA>              <NA> #> 46               <NA>               <NA>               <NA>              <NA> #> 47               <NA>               <NA>               <NA>              <NA> #> 48   0.47406634956085  0.482338473996251   3.88976862875474  3.96697636778965 #> 49  0.432349365027856  0.445236579358683   3.93845896630112  4.09450183662646 #> 50  0.429128205503703  0.444307530731303   3.91898884143888  4.07631003957095 #> 51  0.392974155476253  0.408452530000061   3.71065940953884  3.88238896240832 #> 52  0.330052493521617  0.344360606304475   3.73327262561495  3.92400458890163 #> 53  0.288648725016568  0.302449880627534   3.91659470252125  4.12635971605362 #> 54  0.213914360953674  0.223871199532699   3.28279978647372  3.56618463470815 #> 55   0.11087688133504  0.121917585176021   2.16626958965412   3.0378691688125 #> 56 0.0412342413957953 0.0503585094238534  0.688399087945134  5.24367482859962 #> 57               <NA>               <NA>               <NA>              <NA> #> 58               <NA>               <NA>               <NA>              <NA> #> 59               <NA>               <NA>               <NA>              <NA> #> 60  0.486245055089179  0.497833368784302   4.29085975419097  4.39878678278459 #> 61  0.409093008439163  0.423126970740472   3.81779037481045  3.98195165242468 #> 62   0.39166666458478  0.401729909768788   4.15219795745278  4.26050048779527 #> 63   0.35255313461621  0.368442610549073   3.94226438699344  4.17956946640874 #> 64  0.289440565006285  0.301702572328701   3.93414406829258  4.18925911278021 #> 65  0.208065034521804  0.218485483663373   3.38554159793435  3.70915494403362 #> 66  0.115970282852995    0.1246248022436   1.98926429850671  2.77085944051494 #> 67 0.0448028158616513 0.0577424461233336   1.86563599737549  7.38845367294665 #> 68               <NA>               <NA>               <NA>              <NA> #> 69               <NA>               <NA>               <NA>              <NA> #> 70               <NA>               <NA>               <NA>              <NA> #>          ci90.A.bt.lo       ci90.A.bt.up ci90.integral.bt.lo #> 1    5.92492410885883   6.00959821117527    70.8727618597875 #> 2    3.85715882324313   3.94075698561678    66.8814578383406 #> 3    3.20625790586828   3.26303273474377    63.1050041271358 #> 4    2.72895800979119   2.77470565819586    61.5981983854608 #> 5    1.98207520392919    1.9987689527193    56.7400939181809 #> 6    1.51631750521947   1.53471000804979    50.8680662794678 #> 7      1.094535208031   1.10638474615084    45.7601088835626 #> 8   0.716092121606986  0.747017730923628    36.0583664100151 #> 9   0.420230163086766  0.427870601196403    26.2872039429745 #> 10  0.203169203457649  0.207133880933046    15.6584848789646 #> 11 0.0972233622833917  0.100134690366515    6.47869240498191 #> 12               <NA>               <NA>                <NA> #> 13   6.05619645526222    6.1327358469574    73.2378166009923 #> 14   4.24676766567843    4.3143243575705    65.3597758499069 #> 15   3.21927214528747   3.24523863704382    64.6217324420066 #> 16   2.54189254658752   2.59943076988303    60.2481487228054 #> 17   2.38715432912656   2.41021098396827    58.4213116915545 #> 18   1.58624492267169   1.60746107007016    50.3063662202349 #> 19   1.10708509000836   1.11900280873641    46.4955822795657 #> 20  0.753327994625654  0.761850420124065    38.5818772418944 #> 21    0.4707366223096  0.482213667122139    26.8904205802046 #> 22  0.187344027819802   0.19861132195568    15.2066926689034 #> 23 0.0792642634874081 0.0808509609165591    5.88063373150888 #> 24               <NA>               <NA>                <NA> #> 25   6.31501746482543   6.48580254064404    72.8352525219178 #> 26   3.72572587670584   3.78182712942384    63.9404862911323 #> 27   2.53959470513415   2.57103329542208    61.3649068000705 #> 28   1.94954545089714   1.97555798887143    55.8984560694834 #> 29    1.7778373183463   1.80505705271179    49.3868661908173 #> 30   1.41231205587894   1.45867948695544    47.8427443481633 #> 31  0.867880094705941  0.883179015600396    38.8163404858656 #> 32  0.383003354274093  0.397443727065245    26.2286826441816 #> 33   0.18800971356466   0.19616966309873    14.8282532185728 #> 34 0.0941070386312366 0.0972722046782503    6.17024368790286 #> 35               <NA>               <NA>                <NA> #> 36   4.11936191646463   4.16392720696525    62.6719572902515 #> 37   2.16554064985439   2.18562267513336    55.1821885570141 #> 38   1.88895434410334   1.91252954481015    54.3885644117117 #> 39   1.67724837361647   1.70264060505906    50.5604369993831 #> 40   1.32394455546584   1.34290164891805    47.6838158968214 #> 41   1.34254338247901   1.36368070345226    44.9291913592748 #> 42  0.849713672439886  0.873744821519578    36.6329680189008 #> 43  0.437759573750421  0.462365940251656    24.8206550984248 #> 44  0.119105048543662  0.122866990069729    9.16909683859718 #> 45               <NA>               <NA>                <NA> #> 46               <NA>               <NA>                <NA> #> 47               <NA>               <NA>                <NA> #> 48   4.05755164505051   4.10451758630893    64.4455199631182 #> 49   2.75441374493632   2.82133191266529    58.2312237155887 #> 50   2.51839519425301   2.54173072253127    55.8486795211857 #> 51   2.00101794900739    2.0261419958526    55.1199456499865 #> 52   1.40892998840517   1.42722837174374    46.4295728360107 #> 53   1.10414739761998   1.11865383236283     42.727662460732 #> 54  0.881646852482333  0.895885637121287    37.6944550840265 #> 55  0.420175121790776  0.441238983533192    23.7077213565085 #> 56  0.124912462392489  0.129085212688548    9.77957983641538 #> 57               <NA>               <NA>                <NA> #> 58               <NA>               <NA>                <NA> #> 59               <NA>               <NA>                <NA> #> 60   3.94269385957801   3.97586333444037    63.8317290384368 #> 61   2.11958169738995   2.13960375222204    54.5135104225648 #> 62   2.00335778072282     2.039654510212    50.1688162870715 #> 63   1.64992359969037   1.67345552087472    49.4901787059409 #> 64   1.29730193227293    1.3127908420234     43.262995617026 #> 65  0.862685839154239  0.875972647766508    35.7134183050924 #> 66  0.415853069123175  0.433291156541934    25.6231822113173 #> 67  0.125308776908399  0.130100945990281    9.52798984908974 #> 68               <NA>               <NA>                <NA> #> 69               <NA>               <NA>                <NA> #> 70               <NA>               <NA>                <NA> #>    ci90.integral.bt.up      ci95.mu.bt.lo      ci95.mu.bt.up  ci95.lambda.bt.lo #> 1     75.2189190190091  0.650072171627425  0.659794762304081   4.35139078943617 #> 2     70.0322083156755  0.612354213993397  0.624729294273593   4.26415542595399 #> 3     65.8303254179733  0.580806744247426  0.600820923963489   4.22430934243513 #> 4     63.5128177523012  0.563862708214283  0.580294728438634   4.20089667583105 #> 5     58.5535650652157  0.513785890647118  0.531215722649607   4.26661445849705 #> 6     52.7609010135317   0.44903823678625  0.463962330669628   4.53230244844098 #> 7      48.286931604975   0.38339708145277  0.399767305539795   4.48749365492783 #> 8     37.9581978259586  0.246893707180457  0.259669178479947   4.02019685194303 #> 9     27.8111193451542  0.138392845518383  0.154168220370996   3.01628595268673 #> 10    16.4781491413629 0.0676738846514735 0.0792048891754489   1.17568131963607 #> 11    6.84062738030699 0.0281185448091728 0.0438773004484054 -0.562549808290747 #> 12                <NA>               <NA>               <NA>               <NA> #> 13    77.1264359156468  0.660800390226331  0.673329136728188   4.10614512744889 #> 14    69.0018640344978  0.618578234653546  0.650275737796181   4.54152513768108 #> 15    66.7342056556446  0.608902933488595    0.6226020428599   4.60167523682906 #> 16    63.6727315497652  0.566879628121691  0.583955687405532   4.49324599207651 #> 17    59.8932074481883  0.524874822712734   0.54339911858206   4.20868123916415 #> 18     53.888592139921  0.457682207453939  0.473515357003341   4.55031916839072 #> 19    47.7267954443841   0.35655789254383  0.374638538914882   3.90097697226844 #> 20    40.6690736360867  0.262816949206994  0.290768907731456   3.72000207202127 #> 21    27.9728911935223  0.142282557633939  0.153373462572611   2.97603652287959 #> 22    16.6553872806787 0.0704331121199726 0.0782356381903688   2.10179214216639 #> 23    6.12491791891367 0.0266997388214069 0.0457110898353919  0.671277220015371 #> 24                <NA>               <NA>               <NA>               <NA> #> 25    75.2227315621684  0.653509752837299  0.674786000915304   4.61935421450242 #> 26     66.584274993758  0.602736206933107  0.614254871135643   4.60654914746532 #> 27    63.9892730261505  0.559783445871089  0.580989494049745   4.10520709235482 #> 28    57.9707057731386    0.5201137673391  0.544841197010317   4.54373841117658 #> 29    54.5527994793406  0.467869014350413  0.488017718791092   4.77504438385237 #> 30    50.9256471190827  0.390744775284048  0.407128577087568   4.26700425931256 #> 31    40.1944631836089  0.265885416137597  0.279138559824421    3.5977501877967 #> 32    27.9057723060927  0.135520152650589   0.14475123209789   2.67941792569947 #> 33    16.3228828707384 0.0660889610361119 0.0731274910989258   1.36868165266542 #> 34    6.52667844248504 0.0292947140561171 0.0421421557989395   -0.3240998290405 #> 35                <NA>               <NA>               <NA>               <NA> #> 36    65.8948881189854   0.47718091738205  0.491108967634103   4.11297381043013 #> 37    58.7518683402787  0.429540265251406  0.440993743732308    4.1874598680807 #> 38    56.2170108522632  0.412082462300162   0.42530556311901    4.1429841755222 #> 39    53.7036783219286  0.384813576640582  0.409792512529901   4.12948691184468 #> 40    52.1151624451653  0.340661483920894   0.36280363155957   3.49439521831049 #> 41    46.4133931758221  0.291047601496622   0.29957489435048   3.51932960116276 #> 42    39.7875110535593  0.212109817393869  0.220294163631491   3.12108174048036 #> 43    26.6021355176737  0.113037109627028  0.124871976928788   2.17268545212715 #> 44    9.95088352998947 0.0429058428826698 0.0526130848283489   1.95493140139421 #> 45                <NA>               <NA>               <NA>               <NA> #> 46                <NA>               <NA>               <NA>               <NA> #> 47                <NA>               <NA>               <NA>               <NA> #> 48    66.8700271778251  0.473274337646823  0.483130485910279   3.88237639842162 #> 49    60.5246182553808  0.431115482804692  0.446470461581847   3.92351869148274 #> 50    59.1314181520305  0.427674865854252  0.445760870380754   3.90392617353262 #> 51    56.5185172582984  0.391492183447378  0.409934502028936   3.69421721830665 #> 52    50.0537294722419  0.328682567829641  0.345730531996451   3.71501105466198 #> 53    44.0471917937557   0.28732733777722  0.303771267866882   3.89651081824687 #> 54    40.0151809883512   0.21296104662164  0.224824513864733   3.25566719462149 #> 55    25.6530446425804  0.109819792669414  0.122974673841646   2.08281856611768 #> 56    10.3485822937598 0.0403606412654494 0.0512321095541994  0.252255665967577 #> 57                <NA>               <NA>               <NA>               <NA> #> 58                <NA>               <NA>               <NA>               <NA> #> 59                <NA>               <NA>               <NA>               <NA> #> 60    65.8023884087521  0.485135535692837  0.498942888180644   4.28052631528307 #> 61    57.9837618020618  0.407749331197548  0.424470647982087   3.80207280567717 #> 62    54.6097252876782  0.390703162386311  0.402693411967257   4.14182856624977 #> 63    52.4942852909195  0.351031801814128  0.369963943351156   3.91954368790049 #> 64    45.4981805880833  0.288266543028607  0.302876594306379   3.90971815977781 #> 65    37.6306734698342  0.207067331944419  0.219483186240757   3.35455734139292 #> 66     27.236902933584  0.115141658656023  0.125453426440573   1.91443072108039 #> 67    10.0458009731282 0.0435639150919157 0.0589813468930692   1.33685558162932 #> 68                <NA>               <NA>               <NA>               <NA> #> 69                <NA>               <NA>               <NA>               <NA> #> 70                <NA>               <NA>               <NA>               <NA> #>    ci95.lambda.bt.up       ci95.A.bt.lo       ci95.A.bt.up ci95.integral.bt.lo #> 1   4.41020689342698   5.91681701395619   6.01770530607791    70.4566404296492 #> 2   4.33515788465918   3.84915474386693   3.94876106499298    66.5797902394468 #> 3   4.32664013745953   3.20082201799723   3.26846862261483    62.8440691099279 #> 4   4.31209432616512     2.724577915795   2.77908575219206    61.4148837652314 #> 5   4.40564121621224   1.98047686627908   2.00036729036942    56.5664637019755 #> 6   4.64280537986116   1.51455652090593   1.53647099236333     50.686837421951 #> 7   4.70257742034733   1.09340067778548   1.10751927639636    45.5181790485338 #> 8   4.30852781404551   0.71313115901284  0.749978693517774    35.8764676574248 #> 9   3.72172970747174  0.419498631778396  0.428602132504772    26.1412971491487 #> 10  3.41371350361282   0.20278960667809  0.207513477712605    15.5800063857563 #> 11  5.30185072359453 0.0969446181052204  0.100413434544686    6.44403905628057 #> 12              <NA>               <NA>               <NA>                <NA> #> 13  4.19286186866204   6.04886821563183   6.14006408658779    72.8655019857594 #> 14  4.69752268641996   4.24029947177387   4.32079255147506    65.0110652790418 #> 15  4.67023422807286   3.21678599182144   3.24772479050985    64.4194743683604 #> 16  4.59023246339725   2.53638356776135    2.6049397487092    59.9202631329901 #> 17  4.33187890200891   2.38494677706724   2.41241853602758    58.2803855020895 #> 18  4.69316703188841   1.58421358941013   1.60949240333171    49.9633871428182 #> 19  4.08189059558595   1.10594403183227   1.12014386691249    46.3777001680405 #> 20   4.2369998989055  0.752512017716232  0.762666397033487    38.3820392892589 #> 21  3.48668963919673   0.46963775631691  0.483312533114829    26.7867797768018 #> 22  3.05256111152351  0.186265244338707  0.199690105436775    15.0679878656483 #> 23  6.77995850355189 0.0791123456484468 0.0810028787555203    5.85724481994885 #> 24              <NA>               <NA>               <NA>                <NA> #> 25  4.74951227132753   6.29866570224705   6.50215430322241    72.6066641031704 #> 26  4.68352792362978   3.72035448016901   3.78719852596067    63.6873575855617 #> 27  4.25274464672915   2.53658462734062    2.5740433732156    61.1136376933182 #> 28  4.70150520731954   1.94705488875066   1.97804855101791    55.7000491829632 #> 29  4.93926958109878   1.77523117356663   1.80766319749146    48.8922555568098 #> 30  4.43574047091008   1.40787262098864   1.46311892184574    47.5475728062668 #> 31  3.87018178266365  0.866415304407536  0.884643805898801    38.6843925679965 #> 32  3.05472425365879  0.381620765389833  0.398826315949504    26.0681102297434 #> 33  2.29907983326698  0.187228441800759  0.196950934862631    14.6851503795357 #> 34  6.78106240404355 0.0938039908182247 0.0975752524912623    6.13611695608116 #> 35              <NA>               <NA>               <NA>                <NA> #> 36   4.2402991672203   4.11509502694862   4.16819409648126    62.3633788066493 #> 37  4.31173800689489   2.16361790275321   2.18754542223454    54.8404107054249 #> 38  4.28518388508999   1.88669714403567   1.91478674487782    54.2135003908078 #> 39  4.42419506824559    1.6748172025209   1.70507177615463    50.2594883621181 #> 40  3.83821177448648    1.3221295146034   1.34471668978049    47.2595380358098 #> 41  3.68924919066921   1.34051959642838   1.36570448950288    44.7870869300309 #> 42  3.36596540012172  0.847412817740766  0.876045676218697    36.3309373028164 #> 43  3.31121454182138  0.435403645042856  0.464721868959221    24.6500878242414 #> 44  6.78022364765753  0.118744862652868  0.123227175960523    9.09424492133622 #> 45              <NA>               <NA>               <NA>                <NA> #> 46              <NA>               <NA>               <NA>                <NA> #> 47              <NA>               <NA>               <NA>                <NA> #> 48  3.97436859812278   4.05305490599386   4.10901432536559     64.213386293625 #> 49  4.10944211144484   2.74800668632398   2.82773897127764    58.0116433873108 #> 50  4.09137270747721   2.51616094154551   2.54396497523877    55.5343747586581 #> 51   3.8988311536405   1.99861245516051   2.02854748969948    54.9860398577013 #> 52   3.9422661598546   1.40717801553232   1.42898034461658    46.0825791155205 #> 53    4.146443600328   1.10275848365524   1.12004274632758     42.601324545868 #> 54  3.59331722656038  0.880283564591369  0.897248925012251    37.4722579229742 #> 55  3.12132019234895  0.418158369070758  0.443255736253211    23.5214669993315 #> 56  5.67981825057717  0.124512943747122  0.129484731333916    9.72510087773347 #> 57              <NA>               <NA>               <NA>                <NA> #> 58              <NA>               <NA>               <NA>                <NA> #> 59              <NA>               <NA>               <NA>                <NA> #> 60  4.40912022169249   3.93951805879332   3.97903913522507    63.6430488859598 #> 61  3.99766922155796   2.11766469214007   2.14152075747192    54.1812523117619 #> 62  4.27086987899828   1.99988256194194   2.04312972899288    49.7436228721198 #> 63  4.20229016550169   1.64767054340677   1.67570857715832    49.2025514797195 #> 64  4.21368502129499   1.29581895155214   1.31427382274419     43.048988545329 #> 65  3.74013920057505  0.861413697904129  0.877244789016619    35.5298513212341 #> 66  2.84569301794126  0.414183465008613  0.434960760656496    25.4686770357811 #> 67  7.91723408869282   0.12484995220907   0.13055977068961    9.47841218827754 #> 68              <NA>               <NA>               <NA>                <NA> #> 69              <NA>               <NA>               <NA>                <NA> #> 70              <NA>               <NA>               <NA>                <NA> #>    ci95.integral.bt.up #> 1     75.6350404491474 #> 2     70.3338759145692 #> 3     66.0912604351812 #> 4     63.6961323725306 #> 5     58.7271952814211 #> 6     52.9421298710485 #> 7     48.5288614400039 #> 8      38.140096578549 #> 9     27.9570261389799 #> 10    16.5566276345712 #> 11    6.87528072900833 #> 12                <NA> #> 13    77.4987505308797 #> 14    69.3505746053629 #> 15    66.9364637292908 #> 16    64.0006171395805 #> 17    60.0341336376532 #> 18    54.2315712173378 #> 19    47.8446775559093 #> 20    40.8689115887221 #> 21     28.076531996925 #> 22    16.7940920839337 #> 23     6.1483068304737 #> 24                <NA> #> 25    75.4513199809158 #> 26    66.8374036993285 #> 27    64.2405421329028 #> 28    58.1691126596588 #> 29    55.0474101133481 #> 30    51.2208186609792 #> 31    40.3264111014779 #> 32     28.066344720531 #> 33    16.4659857097755 #> 34    6.56080517430674 #> 35                <NA> #> 36    66.2034666025876 #> 37    59.0936461918679 #> 38     56.392074873167 #> 39    54.0046269591936 #> 40     52.539440306177 #> 41     46.555497605066 #> 42    40.0895417696437 #> 43    26.7727027918571 #> 44    10.0257354472504 #> 45                <NA> #> 46                <NA> #> 47                <NA> #> 48    67.1021608473183 #> 49    60.7441985836588 #> 50    59.4457229145581 #> 51    56.6524230505835 #> 52    50.4007231927321 #> 53    44.1735297086197 #> 54    40.2373781494036 #> 55    25.8392989997575 #> 56    10.4030612524417 #> 57                <NA> #> 58                <NA> #> 59                <NA> #> 60    65.9910685612291 #> 61    58.3160199128647 #> 62      55.03491870263 #> 63    52.7819125171409 #> 64    45.7121876597803 #> 65    37.8142404536925 #> 66    27.3914081091202 #> 67    10.0953786339404 #> 68                <NA> #> 69                <NA> #> 70                <NA> # }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"Generic summary function gcFitLinear objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"","code":"# S3 method for gcFitLinear summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"object object class gcFitLinear ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"dataframe parameters extracted linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'l'))  summary(TestFit) #>           mu.linfit        tD.linfit    lambda.linfit      dY.linfit #> 1 0.656066163767362 1.05652023963506 4.37070054535639 6.475234295556 #>           A.linfit tmu.start.linfit tmu.end.linfit       r2mu.linfit #> 1 6.53031162816179             6.25            9.5 0.998920060034801 #>   reliable_fit.linfit mu2.linfit tD2.linfit tmu2.start.linfit tmu2.end.linfit #> 1                TRUE       <NA>       <NA>              <NA>            <NA> #>   r2mu2.linfit reliable_fit2.linfit #> 1         <NA>                FALSE"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitModel objects — summary.gcFitModel","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"Generic summary function gcFitModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"","code":"# S3 method for gcFitModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"object object class gcFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"dataframe parameters extracted growth model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'm')) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  summary(TestFit) #>           mu.model        tD.model     lambda.model          A.model #> 1 0.79936668889755 0.8671204219379 5.07926762543375 4.80047095159575 #>           dY.model     A.orig.model    dY.orig.model  integral.model #> 1 4.79779393217338 6.59365588572367 6.57602814628094 76.335259501623 #>   parameter_nu.model parameter_alpha.model parameter_t_shift.model #> 1               <NA>                  <NA>                    <NA> #>    parameter_y0.model         stdmu.model    stdlambda.model #> 1 0.00264454556369608 0.00221070830041641 0.0134382155269755 #>            stdA.model         RMSE.model reliable_fit.model  ci90.mu.model.lo #> 1 0.00216107578212758 0.0135703403601494               TRUE 0.795730073743365 #>    ci90.mu.model.up ci90.lambda.model.lo ci90.lambda.model.up  ci90.A.model.lo #> 1 0.803003304051735     5.05716176089187     5.10137348997562 4.79691598193414 #>    ci90.A.model.up  ci95.mu.model.lo  ci95.mu.model.up ci95.lambda.model.lo #> 1 4.80402592125735 0.795033700628734 0.803699677166366     5.05292872300088 #>   ci95.lambda.model.up  ci95.A.model.lo  ci95.A.model.up #> 1     5.10560652786662 4.79623524306278 4.80470666012871"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"Generic summary function gcFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"","code":"# S3 method for gcFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"object object class gcFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"dataframe parameters extracted nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitSpline(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 's'))  summary(TestFit) #>           mu.spline        tD.spline tmax.spline    lambda.spline mu2.spline #> 1 0.653785752502644 1.06020539283187        7.75 4.21881842469241       <NA> #>   tD2.spline tmax2.spline lambda2.spline          y0.spline         A.spline #> 1       <NA>         <NA>           <NA> 0.0542195283478755 6.32513780334799 #>          dY.spline  integral.spline reliable_fit.spline reliable_fit2.spline #> 1 6.27091827500012 76.6466983674583                TRUE                FALSE #>   smooth.spline #> 1          0.55"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"Generate grouped results table linear fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"","code":"table_group_fluorescence_linear(flTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"flTable object class flTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"data frame grouped linear fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"","code":"# \\donttest{ # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"l\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  table_group_fluorescence_linear(res$flFit$flTable) #>             Sample|Conc. slope_max lagtime        dY     Y_max x_start(mumax) #> 1       pSEVA634∙GFP | 0                                                      #> 2      pSEVA634r∙GFP | 0                                                      #> 3     pSEVA634rκ∙GFP | 0    75.796  23.666   376.798  2228.283             16 #> 4    pSEVA634∙GFP | 0.01   262.266  17.259  5820.567  7503.259             30 #> 5   pSEVA634r∙GFP | 0.01                                                      #> 6  pSEVA634rκ∙GFP | 0.01   225.688  13.904  3020.995  4880.808             15 #> 7    pSEVA634∙GFP | 0.05   658.849  10.171 15562.241     17045             16 #> 8   pSEVA634r∙GFP | 0.05   307.497  14.566  3856.069   5224.49           14.5 #> 9  pSEVA634rκ∙GFP | 0.05   385.864   7.481  6056.345  7883.268             10 #> 10    pSEVA634∙GFP | 0.1   786.634   1.892 18027.038 19670.602            2.5 #> 11   pSEVA634r∙GFP | 0.1   514.144  11.836  6070.424  6990.424             15 #> 12  pSEVA634rκ∙GFP | 0.1   404.264   6.785  7467.593  9260.697           15.5 #> 13    pSEVA634∙GFP | 0.2   810.584   2.174 18686.014 20250.899            3.5 #> 14   pSEVA634r∙GFP | 0.2    540.02  11.918  6008.673  7054.127             15 #> 15  pSEVA634rκ∙GFP | 0.2   391.915    6.01   7526.82  9138.889             16 #> 16    pSEVA634∙GFP | 0.5   820.283   1.388 18860.637 20504.202              5 #> 17   pSEVA634r∙GFP | 0.5   494.059  11.004  6225.536  7150.065             15 #> 18  pSEVA634rκ∙GFP | 0.5    429.55   7.469  7650.517  9370.143           15.5 #> 19      pSEVA634∙GFP | 1   877.851   2.083 17785.309 19449.102            3.5 #> 20     pSEVA634r∙GFP | 1   559.313  12.303  6148.718  7412.869             16 #> 21    pSEVA634rκ∙GFP | 1   395.584   6.293  7763.536  9317.992             15 #>    x_end(mumax) #> 1               #> 2               #> 3          19.5 #> 4          34.5 #> 5               #> 6            20 #> 7            20 #> 8          19.5 #> 9          14.5 #> 10          6.5 #> 11           19 #> 12           20 #> 13          8.5 #> 14         19.5 #> 15           20 #> 16            9 #> 17         19.5 #> 18           20 #> 19            8 #> 20         19.5 #> 21           20  # with HTML formatting DT::datatable(table_group_fluorescence_linear(res$flFit$flTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"],[\"pSEVA634∙GFP | 0\",\"pSEVA634r∙GFP | 0\",\"pSEVA634rκ∙GFP | 0\",\"pSEVA634∙GFP | 0.01\",\"pSEVA634r∙GFP | 0.01\",\"pSEVA634rκ∙GFP | 0.01\",\"pSEVA634∙GFP | 0.05\",\"pSEVA634r∙GFP | 0.05\",\"pSEVA634rκ∙GFP | 0.05\",\"pSEVA634∙GFP | 0.1\",\"pSEVA634r∙GFP | 0.1\",\"pSEVA634rκ∙GFP | 0.1\",\"pSEVA634∙GFP | 0.2\",\"pSEVA634r∙GFP | 0.2\",\"pSEVA634rκ∙GFP | 0.2\",\"pSEVA634∙GFP | 0.5\",\"pSEVA634r∙GFP | 0.5\",\"pSEVA634rκ∙GFP | 0.5\",\"pSEVA634∙GFP | 1\",\"pSEVA634r∙GFP | 1\",\"pSEVA634rκ∙GFP | 1\"],[\"\",\"\",\"75.796\",\"262.266\",\"\",\"225.688\",\"658.849\",\"307.497\",\"385.864\",\"786.634\",\"514.144\",\"404.264\",\"810.584\",\"540.02\",\"391.915\",\"820.283\",\"494.059\",\"429.55\",\"877.851\",\"559.313\",\"395.584\"],[\"\",\"\",\"23.666\",\"17.259\",\"\",\"13.904\",\"10.171\",\"14.566\",\"7.481\",\"1.892\",\"11.836\",\"6.785\",\"2.174\",\"11.918\",\"6.01\",\"1.388\",\"11.004\",\"7.469\",\"2.083\",\"12.303\",\"6.293\"],[\"\",\"\",\"376.798\",\"5820.567\",\"\",\"3020.995\",\"15562.241\",\"3856.069\",\"6056.345\",\"18027.038\",\"6070.424\",\"7467.593\",\"18686.014\",\"6008.673\",\"7526.82\",\"18860.637\",\"6225.536\",\"7650.517\",\"17785.309\",\"6148.718\",\"7763.536\"],[\"\",\"\",\"2228.283\",\"7503.259\",\"\",\"4880.808\",\"17045\",\"5224.49\",\"7883.268\",\"19670.602\",\"6990.424\",\"9260.697\",\"20250.899\",\"7054.127\",\"9138.889\",\"20504.202\",\"7150.065\",\"9370.143\",\"19449.102\",\"7412.869\",\"9317.992\"],[\"\",\"\",\"16\",\"30\",\"\",\"15\",\"16\",\"14.5\",\"10\",\"2.5\",\"15\",\"15.5\",\"3.5\",\"15\",\"16\",\"5\",\"15\",\"15.5\",\"3.5\",\"16\",\"15\"],[\"\",\"\",\"19.5\",\"34.5\",\"\",\"20\",\"20\",\"19.5\",\"14.5\",\"6.5\",\"19\",\"20\",\"8.5\",\"19.5\",\"20\",\"9\",\"19.5\",\"20\",\"8\",\"19.5\",\"20\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>slope<sub>max<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>x<sub>start<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n      <th>x<sub>end<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"Generate grouped results table spline fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"","code":"table_group_fluorescence_spline(flTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"flTable object class flTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"data frame grouped spline fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  table_group_fluorescence_spline(res$flFit$flTable) #>           Sample | Conc. slope_max lagtime     Y_max        dY x(slope_max) #> 1       pSEVA634∙GFP | 0    92.267  15.547  3427.126  2135.701         20.5 #> 2      pSEVA634r∙GFP | 0    30.773  31.287  1470.992   282.714           20 #> 3     pSEVA634rκ∙GFP | 0    64.176  20.813  2196.189   630.596           16 #> 4    pSEVA634∙GFP | 0.01   242.558  14.983  7592.801  6072.997         23.5 #> 5   pSEVA634r∙GFP | 0.01    64.653  21.671  2384.304  1128.582           19 #> 6  pSEVA634rκ∙GFP | 0.01    205.58  12.566  4820.287  3196.134           18 #> 7    pSEVA634∙GFP | 0.05   509.395    6.96 17121.214 15989.029         21.5 #> 8   pSEVA634r∙GFP | 0.05   204.032  13.436  5206.543  3800.827         17.5 #> 9  pSEVA634rκ∙GFP | 0.05   290.961   4.674  7768.189  6299.664           13 #> 10    pSEVA634∙GFP | 0.1   670.985   0.373  20079.01 18869.536            6 #> 11   pSEVA634r∙GFP | 0.1   327.195   9.868  6840.378  5652.539           17 #> 12  pSEVA634rκ∙GFP | 0.1   335.244   3.651  9191.863  7723.924         17.5 #> 13    pSEVA634∙GFP | 0.2   728.625   0.554 20481.098 19589.302          6.5 #> 14   pSEVA634r∙GFP | 0.2   346.268   9.758  7000.845  5718.068         16.5 #> 15  pSEVA634rκ∙GFP | 0.2   320.247   3.214  9006.211  7463.562         17.5 #> 16    pSEVA634∙GFP | 0.5   774.054   0.247 20704.091 19571.651          5.5 #> 17   pSEVA634r∙GFP | 0.5   337.909   8.089  6952.687  6090.024         16.5 #> 18  pSEVA634rκ∙GFP | 0.5   351.644   4.845  9322.628  7720.204           18 #> 19      pSEVA634∙GFP | 1   779.134   0.462 19774.702 18757.659            6 #> 20     pSEVA634r∙GFP | 1   353.185   9.572  7189.597  5865.901         16.5 #> 21    pSEVA634rκ∙GFP | 1   338.827   5.016  9258.531  7551.009           18  # with HTML formatting DT::datatable(table_group_fluorescence_spline(res$flFit$flTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"],[\"pSEVA634∙GFP | 0\",\"pSEVA634r∙GFP | 0\",\"pSEVA634rκ∙GFP | 0\",\"pSEVA634∙GFP | 0.01\",\"pSEVA634r∙GFP | 0.01\",\"pSEVA634rκ∙GFP | 0.01\",\"pSEVA634∙GFP | 0.05\",\"pSEVA634r∙GFP | 0.05\",\"pSEVA634rκ∙GFP | 0.05\",\"pSEVA634∙GFP | 0.1\",\"pSEVA634r∙GFP | 0.1\",\"pSEVA634rκ∙GFP | 0.1\",\"pSEVA634∙GFP | 0.2\",\"pSEVA634r∙GFP | 0.2\",\"pSEVA634rκ∙GFP | 0.2\",\"pSEVA634∙GFP | 0.5\",\"pSEVA634r∙GFP | 0.5\",\"pSEVA634rκ∙GFP | 0.5\",\"pSEVA634∙GFP | 1\",\"pSEVA634r∙GFP | 1\",\"pSEVA634rκ∙GFP | 1\"],[\"92.267\",\"30.773\",\"64.176\",\"242.558\",\"64.653\",\"205.58\",\"509.395\",\"204.032\",\"290.961\",\"670.985\",\"327.195\",\"335.244\",\"728.625\",\"346.268\",\"320.247\",\"774.054\",\"337.909\",\"351.644\",\"779.134\",\"353.185\",\"338.827\"],[\"15.547\",\"31.287\",\"20.813\",\"14.983\",\"21.671\",\"12.566\",\"6.96\",\"13.436\",\"4.674\",\"0.373\",\"9.868\",\"3.651\",\"0.554\",\"9.758\",\"3.214\",\"0.247\",\"8.089\",\"4.845\",\"0.462\",\"9.572\",\"5.016\"],[\"3427.126\",\"1470.992\",\"2196.189\",\"7592.801\",\"2384.304\",\"4820.287\",\"17121.214\",\"5206.543\",\"7768.189\",\"20079.01\",\"6840.378\",\"9191.863\",\"20481.098\",\"7000.845\",\"9006.211\",\"20704.091\",\"6952.687\",\"9322.628\",\"19774.702\",\"7189.597\",\"9258.531\"],[\"2135.701\",\"282.714\",\"630.596\",\"6072.997\",\"1128.582\",\"3196.134\",\"15989.029\",\"3800.827\",\"6299.664\",\"18869.536\",\"5652.539\",\"7723.924\",\"19589.302\",\"5718.068\",\"7463.562\",\"19571.651\",\"6090.024\",\"7720.204\",\"18757.659\",\"5865.901\",\"7551.009\"],[\"20.5\",\"20\",\"16\",\"23.5\",\"19\",\"18\",\"21.5\",\"17.5\",\"13\",\"6\",\"17\",\"17.5\",\"6.5\",\"16.5\",\"17.5\",\"5.5\",\"16.5\",\"18\",\"6\",\"16.5\",\"18\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>slope<sub>max<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>x(slope<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"Generate grouped results table linear fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"","code":"table_group_growth_linear(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"data frame grouped linear fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"","code":"# \\donttest{ # Create random growth data set rnd.data <- rdm.data(d = 30, mu = 0.6, A = 4.5, label = \"Test2\")   # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"l\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_linear(res$gcFit$gcTable) #>     Sample|Conc.         mumax            tD       lagtime            dY #> 1      Test2 | 0 0.469 ± 0.009  1.48 ± 0.028  3.899 ± 0.23  3.923 ± 0.29 #> 2  Test2 | 0.039  0.38 ± 0.006  1.823 ± 0.03 3.902 ± 0.226 1.754 ± 0.084 #> 3  Test2 | 0.059 0.353 ± 0.008 1.964 ± 0.042  3.78 ± 0.182 1.585 ± 0.264 #> 4  Test2 | 0.088 0.296 ± 0.013 2.343 ± 0.101 3.782 ± 0.098 1.187 ± 0.109 #> 5   Test2 | 0.13 0.213 ± 0.006 3.256 ± 0.087 3.485 ± 0.279   0.849 ± 0.1 #> 6    Test2 | 0.2 0.119 ± 0.003 5.816 ± 0.122 2.381 ± 0.201 0.408 ± 0.048 #> 7    Test2 | 0.3                                                         #> 8   Test2 | 0.44                                                         #> 9   Test2 | 0.67                                                         #> 10     Test2 | 1                                                         #>            Y_max t_start(mumax)   t_end(mumax) #> 1  3.975 ± 0.292  6.667 ± 0.382 10.083 ± 0.144 #> 2  1.807 ± 0.083  6.917 ± 0.878   10.25 ± 0.25 #> 3   1.64 ± 0.269       7 ± 0.25 10.083 ± 0.382 #> 4  1.239 ± 0.111  7.833 ± 0.144  10.583 ± 0.52 #> 5  0.904 ± 0.101  8.667 ± 0.144 11.167 ± 0.629 #> 6   0.46 ± 0.052  8.917 ± 0.382 11.333 ± 0.722 #> 7                                              #> 8                                              #> 9                                              #> 10                                              # with HTML formatting DT::datatable(table_group_growth_linear(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[\"Test2 | 0\",\"Test2 | 0.039\",\"Test2 | 0.059\",\"Test2 | 0.088\",\"Test2 | 0.13\",\"Test2 | 0.2\",\"Test2 | 0.3\",\"Test2 | 0.44\",\"Test2 | 0.67\",\"Test2 | 1\"],[\"0.469 ± 0.009\",\"0.38 ± 0.006\",\"0.353 ± 0.008\",\"0.296 ± 0.013\",\"0.213 ± 0.006\",\"0.119 ± 0.003\",\"\",\"\",\"\",\"\"],[\"1.48 ± 0.028\",\"1.823 ± 0.03\",\"1.964 ± 0.042\",\"2.343 ± 0.101\",\"3.256 ± 0.087\",\"5.816 ± 0.122\",\"\",\"\",\"\",\"\"],[\"3.899 ± 0.23\",\"3.902 ± 0.226\",\"3.78 ± 0.182\",\"3.782 ± 0.098\",\"3.485 ± 0.279\",\"2.381 ± 0.201\",\"\",\"\",\"\",\"\"],[\"3.923 ± 0.29\",\"1.754 ± 0.084\",\"1.585 ± 0.264\",\"1.187 ± 0.109\",\"0.849 ± 0.1\",\"0.408 ± 0.048\",\"\",\"\",\"\",\"\"],[\"3.975 ± 0.292\",\"1.807 ± 0.083\",\"1.64 ± 0.269\",\"1.239 ± 0.111\",\"0.904 ± 0.101\",\"0.46 ± 0.052\",\"\",\"\",\"\",\"\"],[\"6.667 ± 0.382\",\"6.917 ± 0.878\",\"7 ± 0.25\",\"7.833 ± 0.144\",\"8.667 ± 0.144\",\"8.917 ± 0.382\",\"\",\"\",\"\",\"\"],[\"10.083 ± 0.144\",\"10.25 ± 0.25\",\"10.083 ± 0.382\",\"10.583 ± 0.52\",\"11.167 ± 0.629\",\"11.333 ± 0.722\",\"\",\"\",\"\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>t<sub>start<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n      <th>t<sub>end<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"Generate grouped results table parametric fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"","code":"table_group_growth_model(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"data frame grouped model fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"","code":"# Create random growth data set rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")   # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"m\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_model(res$gcFit$gcTable) #>     Sample|Conc.         mumax             tD       lagtime         Y_max #> 1      Test1 | 0 0.798 ± 0.005  0.869 ± 0.005 5.074 ± 0.225 4.759 ± 0.048 #> 2  Test1 | 0.017  0.784 ± 0.01  0.884 ± 0.012 5.229 ± 0.185 4.332 ± 0.061 #> 3  Test1 | 0.026 0.786 ± 0.005  0.882 ± 0.005 5.152 ± 0.228   4.1 ± 0.004 #> 4  Test1 | 0.039 0.761 ± 0.008  0.911 ± 0.009 5.251 ± 0.161  3.932 ± 0.05 #> 5  Test1 | 0.059  0.73 ± 0.002  0.949 ± 0.003 5.303 ± 0.162 3.701 ± 0.059 #> 6  Test1 | 0.088 0.621 ± 0.107  1.141 ± 0.218  5.17 ± 0.664 3.437 ± 0.069 #> 7   Test1 | 0.13  0.59 ± 0.007  1.175 ± 0.013 5.631 ± 0.173 3.121 ± 0.066 #> 8    Test1 | 0.2 0.436 ± 0.004  1.591 ± 0.014 5.806 ± 0.163  2.684 ± 0.06 #> 9    Test1 | 0.3 0.229 ± 0.065  3.223 ± 1.082 5.228 ± 1.977 2.243 ± 0.039 #> 10  Test1 | 0.44  0.15 ± 0.004  4.628 ± 0.121 7.086 ± 0.417 1.599 ± 0.103 #> 11  Test1 | 0.67  0.068 ± 0.02 10.741 ± 2.756  4.724 ± 2.94 0.975 ± 0.125 #> 12     Test1 | 1                                                          #>               dY #> 1   4.75 ± 0.039 #> 2  4.321 ± 0.054 #> 3  4.104 ± 0.006 #> 4  3.934 ± 0.052 #> 5  3.699 ± 0.054 #> 6   3.43 ± 0.049 #> 7  3.114 ± 0.066 #> 8  2.667 ± 0.075 #> 9  2.144 ± 0.041 #> 10 1.339 ± 0.082 #> 11   0.6 ± 0.021 #> 12                # with HTML formatting DT::datatable(table_group_growth_model(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"Test1 | 0\",\"Test1 | 0.017\",\"Test1 | 0.026\",\"Test1 | 0.039\",\"Test1 | 0.059\",\"Test1 | 0.088\",\"Test1 | 0.13\",\"Test1 | 0.2\",\"Test1 | 0.3\",\"Test1 | 0.44\",\"Test1 | 0.67\",\"Test1 | 1\"],[\"0.798 ± 0.005\",\"0.784 ± 0.01\",\"0.786 ± 0.005\",\"0.761 ± 0.008\",\"0.73 ± 0.002\",\"0.621 ± 0.107\",\"0.59 ± 0.007\",\"0.436 ± 0.004\",\"0.229 ± 0.065\",\"0.15 ± 0.004\",\"0.068 ± 0.02\",\"\"],[\"0.869 ± 0.005\",\"0.884 ± 0.012\",\"0.882 ± 0.005\",\"0.911 ± 0.009\",\"0.949 ± 0.003\",\"1.141 ± 0.218\",\"1.175 ± 0.013\",\"1.591 ± 0.014\",\"3.223 ± 1.082\",\"4.628 ± 0.121\",\"10.741 ± 2.756\",\"\"],[\"5.074 ± 0.225\",\"5.229 ± 0.185\",\"5.152 ± 0.228\",\"5.251 ± 0.161\",\"5.303 ± 0.162\",\"5.17 ± 0.664\",\"5.631 ± 0.173\",\"5.806 ± 0.163\",\"5.228 ± 1.977\",\"7.086 ± 0.417\",\"4.724 ± 2.94\",\"\"],[\"4.759 ± 0.048\",\"4.332 ± 0.061\",\"4.1 ± 0.004\",\"3.932 ± 0.05\",\"3.701 ± 0.059\",\"3.437 ± 0.069\",\"3.121 ± 0.066\",\"2.684 ± 0.06\",\"2.243 ± 0.039\",\"1.599 ± 0.103\",\"0.975 ± 0.125\",\"\"],[\"4.75 ± 0.039\",\"4.321 ± 0.054\",\"4.104 ± 0.006\",\"3.934 ± 0.052\",\"3.699 ± 0.054\",\"3.43 ± 0.049\",\"3.114 ± 0.066\",\"2.667 ± 0.075\",\"2.144 ± 0.041\",\"1.339 ± 0.082\",\"0.6 ± 0.021\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>dY<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"Generate grouped results table spline fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"","code":"table_group_growth_spline(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"data frame grouped spline fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"","code":"# Create random growth data set rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_spline(res$gcFit$gcTable) #>     Sample|Conc.         mumax            tD       lagtime         Y_max #> 1      Test1 | 0 0.666 ± 0.003 1.041 ± 0.004 4.148 ± 0.052 7.001 ± 0.542 #> 2  Test1 | 0.017 0.625 ± 0.008 1.109 ± 0.013 4.536 ± 0.256 3.852 ± 0.074 #> 3  Test1 | 0.026 0.604 ± 0.011 1.148 ± 0.021 4.288 ± 0.008 3.233 ± 0.142 #> 4  Test1 | 0.039 0.572 ± 0.006 1.213 ± 0.012 4.529 ± 0.176  2.73 ± 0.216 #> 5  Test1 | 0.059  0.533 ± 0.01 1.302 ± 0.024  4.34 ± 0.237 2.234 ± 0.247 #> 6  Test1 | 0.088 0.471 ± 0.008 1.471 ± 0.026 4.508 ± 0.088 1.721 ± 0.187 #> 7   Test1 | 0.13 0.387 ± 0.002  1.79 ± 0.011  4.095 ± 0.08 1.277 ± 0.114 #> 8    Test1 | 0.2 0.261 ± 0.008 2.653 ± 0.085 3.836 ± 0.125 0.713 ± 0.062 #> 9    Test1 | 0.3 0.154 ± 0.004 4.488 ± 0.109 3.237 ± 0.069 0.464 ± 0.005 #> 10  Test1 | 0.44 0.076 ± 0.004 9.181 ± 0.455 2.211 ± 0.558 0.205 ± 0.027 #> 11  Test1 | 0.67 0.035 ± 0.002 20.106 ± 1.16 2.375 ± 0.429 0.098 ± 0.005 #> 12     Test1 | 1                                                         #>               dY      t(mumax) #> 1  6.944 ± 0.542          7.75 #> 2    3.8 ± 0.069             8 #> 3  3.181 ± 0.143 7.667 ± 0.144 #> 4  2.678 ± 0.211 7.917 ± 0.144 #> 5  2.182 ± 0.245 7.833 ± 0.289 #> 6  1.666 ± 0.184 8.167 ± 0.144 #> 7  1.225 ± 0.111 7.917 ± 0.144 #> 8   0.664 ± 0.06 8.583 ± 0.382 #> 9  0.412 ± 0.003     10 ± 0.25 #> 10 0.153 ± 0.024   9.5 ± 2.291 #> 11 0.043 ± 0.003 10.083 ± 4.26 #> 12                              # with HTML formatting DT::datatable(table_group_growth_spline(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"Test1 | 0\",\"Test1 | 0.017\",\"Test1 | 0.026\",\"Test1 | 0.039\",\"Test1 | 0.059\",\"Test1 | 0.088\",\"Test1 | 0.13\",\"Test1 | 0.2\",\"Test1 | 0.3\",\"Test1 | 0.44\",\"Test1 | 0.67\",\"Test1 | 1\"],[\"0.666 ± 0.003\",\"0.625 ± 0.008\",\"0.604 ± 0.011\",\"0.572 ± 0.006\",\"0.533 ± 0.01\",\"0.471 ± 0.008\",\"0.387 ± 0.002\",\"0.261 ± 0.008\",\"0.154 ± 0.004\",\"0.076 ± 0.004\",\"0.035 ± 0.002\",\"\"],[\"1.041 ± 0.004\",\"1.109 ± 0.013\",\"1.148 ± 0.021\",\"1.213 ± 0.012\",\"1.302 ± 0.024\",\"1.471 ± 0.026\",\"1.79 ± 0.011\",\"2.653 ± 0.085\",\"4.488 ± 0.109\",\"9.181 ± 0.455\",\"20.106 ± 1.16\",\"\"],[\"4.148 ± 0.052\",\"4.536 ± 0.256\",\"4.288 ± 0.008\",\"4.529 ± 0.176\",\"4.34 ± 0.237\",\"4.508 ± 0.088\",\"4.095 ± 0.08\",\"3.836 ± 0.125\",\"3.237 ± 0.069\",\"2.211 ± 0.558\",\"2.375 ± 0.429\",\"\"],[\"7.001 ± 0.542\",\"3.852 ± 0.074\",\"3.233 ± 0.142\",\"2.73 ± 0.216\",\"2.234 ± 0.247\",\"1.721 ± 0.187\",\"1.277 ± 0.114\",\"0.713 ± 0.062\",\"0.464 ± 0.005\",\"0.205 ± 0.027\",\"0.098 ± 0.005\",\"\"],[\"6.944 ± 0.542\",\"3.8 ± 0.069\",\"3.181 ± 0.143\",\"2.678 ± 0.211\",\"2.182 ± 0.245\",\"1.666 ± 0.184\",\"1.225 ± 0.111\",\"0.664 ± 0.06\",\"0.412 ± 0.003\",\"0.153 ± 0.024\",\"0.043 ± 0.003\",\"\"],[\"7.75\",\"8\",\"7.667 ± 0.144\",\"7.917 ± 0.144\",\"7.833 ± 0.289\",\"8.167 ± 0.144\",\"7.917 ± 0.144\",\"8.583 ± 0.382\",\"10 ± 0.25\",\"9.5 ± 2.291\",\"10.083 ± 4.26\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>t(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"function converts data frame \"tidy\" format custom format used QurvE (row format). provided \"tidy\" data columns \"Description\", \"Concentration\", \"Replicate\", \"Values\", one row per time point sample. Alternatively, function converts data custom QurvE column format row format (data.format = \"col\").","code":""},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"","code":"tidy_to_custom(df, data.format = \"col\")"},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"df data frame tidy format, containing \"Time\", \"Description\", either \"Values\" \"Value\" columns. Optionally, meta information provided columns \"Replicate\" \"Concentration\" used. data.format (Character string) \"col\" (default) \"row\". relevant data provided \"tidy\" format prepared custom QurvE data format.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"data frame custom format (row format) used QurvE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"","code":"# Create a tidy data frame with two samples, five concentrations, three # replicates, and five time points samples <- c(\"Sample 1\", \"Sample 2\") concentrations <- c(0.1, 0.5, 1, 2, 5) time_points <- c(1, 2, 3, 4, 5) n_replicates <- 3  df <- expand.grid(    Description = c(\"Sample 1\", \"Sample 2\"),    Concentration = c(0.1, 0.5, 1, 2, 5),    Time = c(1, 2, 3, 4, 5),    Replicate = 1:3)  df$Value <- abs(rnorm(nrow(df)))  df_formatted <- tidy_to_custom(df)"},{"path":"https://nicwir.github.io/QurvE/reference/updateResistantPopover.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an update-resistant popover for a Shiny element — updateResistantPopover","title":"Create an update-resistant popover for a Shiny element — updateResistantPopover","text":"function creates popover resistant updates associated Shiny element. adds event listener specified element, reinstalls popover whenever child element changes.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/updateResistantPopover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an update-resistant popover for a Shiny element — updateResistantPopover","text":"","code":"updateResistantPopover(   id,   title,   content,   placement = \"bottom\",   trigger = \"hover\",   options = NULL )"},{"path":"https://nicwir.github.io/QurvE/reference/updateResistantPopover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an update-resistant popover for a Shiny element — updateResistantPopover","text":"id id Shiny element popover attached. title title popover. content content popover. placement placement popover relative Shiny element (default: \"bottom\"). Possible values \"top\", \"bottom\", \"left\", \"right\". trigger event triggers display popover (default: \"hover\"). Possible values \"hover\", \"focus\", \"click\". options list additional options popover.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/updateResistantPopover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an update-resistant popover for a Shiny element — updateResistantPopover","text":"Shiny HTML tag contains JavaScript code creating update-resistant popover.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/updateResistantPopover.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create an update-resistant popover for a Shiny element — updateResistantPopover","text":"K. Rohde (stack overflow)","code":""},{"path":"https://nicwir.github.io/QurvE/reference/updateResistantPopover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an update-resistant popover for a Shiny element — updateResistantPopover","text":"","code":"if (FALSE) { library(shiny) library(shinyBS)  ui <- shinyUI(fluidPage(   selectInput(\"Main2_1\",\"Label\",\"abc\",  selectize = TRUE, multiple = TRUE),   updateResistantPopover(\"Main2_1\", \"Label\", \"content\", placement = \"right\", trigger = \"focus\"),   actionButton(\"destroy\", \"destroy!\") ))  server <- function(input, output, session){   observeEvent(input$destroy, {     updateSelectInput(session, \"Main2_1\", choices=\"foo\")   }) }  shinyApp(ui, server) }"},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two dataframes like a zip-fastener — zipFastener","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"Combine rows columns two dataframes alternating manner","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"","code":"zipFastener(df1, df2, along = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"df1 first dataframe. df2 second dataframe dimensions df1. along 1 alternate rows 2 alternate columns.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"dataframe combined rows (columns) df1 df2.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"Mark Heckmann","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"","code":"# data frames equal dimensions df1 <- plyr::rdply(3, rep('o',4))[ ,-1] df2 <- plyr::rdply(3, rep('X',4))[ ,-1]  zipFastener(df1, df2) #>   V1 V1.1 V2 V2.1 V3 V3.1 V4 V4.1 #> 1  o    X  o    X  o    X  o    X #> 2  o    X  o    X  o    X  o    X #> 3  o    X  o    X  o    X  o    X zipFastener(df1, df2, 2) #>   V1 V1.1 V2 V2.1 V3 V3.1 V4 V4.1 #> 1  o    X  o    X  o    X  o    X #> 2  o    X  o    X  o    X  o    X #> 3  o    X  o    X  o    X  o    X zipFastener(df1, df2, 1) #>   V1 V2 V3 V4 #> 1  o  o  o  o #> 4  X  X  X  X #> 2  o  o  o  o #> 5  X  X  X  X #> 3  o  o  o  o #> 6  X  X  X  X  # data frames unequal in no. of rows df1 <- plyr::rdply(10, rep('o',4))[ ,-1] zipFastener(df1, df2, 1) #>    V1 V2 V3 V4 #> 1   o  o  o  o #> 11  X  X  X  X #> 2   o  o  o  o #> 12  X  X  X  X #> 3   o  o  o  o #> 13  X  X  X  X #> 4   o  o  o  o #> 5   o  o  o  o #> 6   o  o  o  o #> 7   o  o  o  o #> 8   o  o  o  o #> 9   o  o  o  o #> 10  o  o  o  o zipFastener(df2, df1, 1) #>    V1 V2 V3 V4 #> 1   X  X  X  X #> 4   o  o  o  o #> 2   X  X  X  X #> 5   o  o  o  o #> 3   X  X  X  X #> 6   o  o  o  o #> 7   o  o  o  o #> 8   o  o  o  o #> 9   o  o  o  o #> 10  o  o  o  o #> 11  o  o  o  o #> 12  o  o  o  o #> 13  o  o  o  o  # data frames unequal in no. of columns df2 <- plyr::rdply(10, rep('X',3))[ ,-1] zipFastener(df1, df2) #>    V1 V1.1 V2 V2.1 V3 V3.1 V4 #> 1   o    X  o    X  o    X  o #> 2   o    X  o    X  o    X  o #> 3   o    X  o    X  o    X  o #> 4   o    X  o    X  o    X  o #> 5   o    X  o    X  o    X  o #> 6   o    X  o    X  o    X  o #> 7   o    X  o    X  o    X  o #> 8   o    X  o    X  o    X  o #> 9   o    X  o    X  o    X  o #> 10  o    X  o    X  o    X  o zipFastener(df2, df1, 2) #>    V1 V1.1 V2 V2.1 V3 V3.1 V4 #> 1   X    o  X    o  X    o  o #> 2   X    o  X    o  X    o  o #> 3   X    o  X    o  X    o  o #> 4   X    o  X    o  X    o  o #> 5   X    o  X    o  X    o  o #> 6   X    o  X    o  X    o  o #> 7   X    o  X    o  X    o  o #> 8   X    o  X    o  X    o  o #> 9   X    o  X    o  X    o  o #> 10  X    o  X    o  X    o  o"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"enhancements-1-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"QurvE 1.1","text":"read_data() now accepts files dataframe objects tidy format shiny app now allows inspection code used run workflows generate plots Parametric fits Root Mean Squared Error (RMSE) added calculated parameters. RMSE model fit also added gcTable respective table within shiny app. TinyTeX installed within shiny app user explicitly approves. added [Q&Troubleshooting] vignette added citation publication Wirth et al. (2023)","code":""},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"bug-fixes-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"QurvE 1.1","text":"[sort concentration] button parameter plots shiny app now also shown data parsed raw inputs, data parsed custom format. [Select read fluorescence normalization] shown Fluorescence ignored. Data parsed correctly CSV files values framed explicit quotes","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"enhancements-1-0-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"QurvE 1.0.1","text":"Report template .Rmd files now copied tempdir() rendering avoid bugs restrictive write permissions. shiny app: Don’t show “Select Read fluorescence normalization” Fluorescence [Ignore].","code":""},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"QurvE 1.0.1","text":"Issue #4: shiny app, checkbox ‘sort concentration’ show loading old RData file. Fixed bug Gen5/Gen6 parser one read type present.","code":""},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"qurve-10","dir":"Changelog","previous_headings":"","what":"QurvE 1.0","title":"QurvE 1.0","text":"CRAN release: 2023-01-12 Added NEWS.md file track changes package.","code":""}]
