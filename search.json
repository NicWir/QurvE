[{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"navigation-bar","dir":"Articles","previous_headings":"","what":"Navigation Bar","title":"QurvE App User Manual v.1.0","text":"QurvE navigation bar.  Data: Load experimental data. Use either one several available parsers common cultivation devices provide data custom format. Computation: Run computational workflows entire growth fluorescence datasets perform curve fitting dose-response analyses. menu becomes available successful data parsing. Validation: Confirm accuracy fits sample re-run individual fits adjusted parameters. Results: View tabular summaries computational results, including calculated growth fluorescence curve parameters results dose-response analyses. Visualization: Compare samples conditions visualize computational results using series plots. Report: Create PDF HTML report summarizing results growth fluorescence curve analysis workflow. Data Export: Save raw data, computational results, fitting options .RData object storage distribution. Data Import: Load previously exported dataset .RData format.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading Data","title":"QurvE App User Manual v.1.0","text":"QurvE allows loading data different formats, growth experiments fluorescence measurements. Data can loaded using custom QurvE data layout, loading raw data various measuring equipment importing previously analyzed datasets.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data-formatted-in-the-custom-qurve-layout","dir":"Articles","previous_headings":"Loading Data","what":"Loading data formatted in the custom QurvE layout","title":"QurvE App User Manual v.1.0","text":"load data using custom QurvE layout, select [Data] > [Custom] window choose file .xls/.xlsx (selecting appropriate work sheets) .csv/.tsv/.txt format (define correct decimal separator , .csv, field separator target file). custom QurvE layout includes data relative metadata necessary QurvE perform analysis. custom layout can used load growth fluorescence data. Data second fluorescence channel can used normalize primary fluorescence values addition normalization growth values. data must formatted displayed Figure @ref(fig:custom-layout): first row contains ‘Time’, ‘Blank’, sample identifiers (IDs). ID needs identical replicates samples analyzed together within dose-response analysis. ‘Time’ column must positioned first position, ‘Blank’ samples follow arbitrary order. second row contains replicate numbers identical conditions. technical replicates used addition biological replicates, indicate technical replicates identical replicate numbers. Samples identical IDs, replicate numbers, concentration values (applicable) combined average values time point. Leave row empty replicate information available. third row designated contain concentration values perform dose-response analysis, different concentrations compound used experiment. Samples included dose-response analysis identical sample identifiers (first row). Leave row empty concentration information available relevant. Starting fourth row, table must include data ‘Time’, ‘Blank’ different samples. Several experiments can combined single custom dataset. Different experiments differing time values experiment-specific blanks distinguished individual ‘Time’ column left dataset. Blank values (experiment-specific) combined average subtracted remaining values option [Subtract blank] selected. metadata second third row optional perform analysis; metadata available, leave rows empty. data can processed (options indicated order applied data): converting time values, applying calibration equation measurements. subtracting blank values sample measurement, normalizing fluorescence data second fluorescence growth dataset, available. data processing functions optional.  QurvE custom data layout.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data-from-raw-experiment-files","dir":"Articles","previous_headings":"Loading Data","what":"Loading data from raw experiment files","title":"QurvE App User Manual v.1.0","text":"QurvE supports loading directly raw data produced variety proprietary software different growth fluorescence measuring equipment, plate readers micro-bioreactors1. can done [Data] > [Parse Raw Data] window. loading file (1), selecting correct raw data format choosing one available equipments/software (2) assigning extracted read channels growth/fluorescence data (3), user provide mapping information metadata tabular format (.xls/.xlsx/.csv/.tsv/.txt file) (4). mapping file formatted shown Figure @ref(fig:mapping-layout): first column contains well numbers plate must match sample identifiers raw data file. second column contains ID (.e., organism, condition, etc.) sample. ID needs identical replicates samples analyzed together within dose-response analysis. third column contains replicate numbers identical conditions. technical replicates used addition biological replicates, indicate technical replicates replicate number. Samples identical IDs, replicate numbers, concentration values (applicable) combined average values time point. Leave row empty replicate information available. fourth column designated contain concentration values perform dose-response analysis, different concentrations compound interest used experiment. Leave row empty additional concentration information available. values ‘Blank’ samples combined averages subtracted remaining values option [Subtract blank] chosen. data can processed (options indicated order applied data): converting time values, applying calibration equation measurements. subtracting blank values sample measurement, normalizing fluorescence data second fluorescence growth dataset, available. data processing functions optional.  [Parse Raw Data] window enables loading raw data exported plate reader/bioreactor software. right panel illustrates layout additional mapping file metadata must supplemented analyze establish relationships conditions replicates.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-previously-processed-data","dir":"Articles","previous_headings":"Loading Data","what":"Loading previously processed data","title":"QurvE App User Manual v.1.0","text":"QurvE supports exporting processed data reloading analysis inspection. Previously saved growth fluorescence data .RData format can loaded Data Import window (Figure @ref(fig:import-data)).  figure illustrates [Data Import] window, enables user load previously exported QurvE data files.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"processing-and-analyzing-data-in-qurve","dir":"Articles","previous_headings":"","what":"Processing and analyzing data in QurvE","title":"QurvE App User Manual v.1.0","text":"raw data loaded, QurvE can used process data fitting curves, calculating averages standard deviations replicates, well fitting data different models obtain growth parameters doubling times, yields, etc., dose-response parameters. Moreover, software allows user intuitively create publication-grade plots.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"run-computations","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Run computations","title":"QurvE App User Manual v.1.0","text":"raw data successfully parsed, [Computation] window unlock, enabling user process either Growth Fluorescence data (Figure @ref(fig:computation)). data can processed using different curve fitting methods, can selected panel left. default fitting options Linear regression fit Non-parametric fit (smooth spline). ticking Parametric fit (available Fluorescence analysis), parametric growth models models fit data. ticking Log-transform time time values transformed Ln(1 + time). Biphasic growth selected, QurvE tries identify second growth phase performing linear regressions non-parametric fits extracts corresponding parameters (e.g., growth rate, lag time second growth phase). Dose-response (EC50) analyses can performed either performing smooth spline fit (response spline fit) response vs. concentration data extracting EC50 concentration midpoint largest smallest response value, applying 20 (parametric) dose-response models choose best model based Akaike information criterion (AIC). computed parameter (e.g., growth rates obtained via linear regression, maximum fluorescence obtained via non-parametric fits…) can chosen response parameter quantify adverse beneficial effects substance. options Log-transform concentration Log-transform response available response spline fits. instances, Ln(x + 1) applied respective values. Additional information methods (global method-specific) fitting options available clicking [?] signs.  [Computation] window enables user define parameters data processing fitting. Growth data fluorescence data must processed separately.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"visualization-and-validation-of-curve-fitting","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Visualization and validation of curve fitting","title":"QurvE App User Manual v.1.0","text":"[Validation] window enables user verify correct fitting growth/fluorescence curves (see Figure @ref(fig:linear) example).  Example fitted growth curve [Validation] window. right panel, figure visualizes performed fit. case, red dots dashed line represent linear regression model used calculate maximum growth rate lag time.  Different tabs enable user visualize fit obtained different fitting methods (Linear Fits, Nonparametric fits, etc.). left pane independent samples can selected visualization. contains options modify figure, can exported .png .pdf formats. right pane, [Re-run modified parameters] button enables user modify fitting parameters rerun analysis selected sample obtain new fit updated parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"tabular-overview-of-results","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Tabular overview of results","title":"QurvE App User Manual v.1.0","text":"[Results] window (see Figure @ref(fig:results)) enables user obtain overview fitted parameters applied method. ticking [Group average] box user can visualize average ± standard deviation parameters replicates. deselected, parameters every single sample shown. table can exported .csv format clicking [Download table] button.  [Results] window gives tabular overview computed parameters applied fit method well results dose-response analyses.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"visualization-of-results","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Visualization of results","title":"QurvE App User Manual v.1.0","text":"data processed, [Visualization] window enables user visualize data using different plot formats: Group Plots: Plot growth data time multiple conditions plot. [Data type] drop menu allows user define type data (raw data, smoothing splines, normalized fluorescence) visualized curve chart. user can easily select cursor samples/groups plot [Conditions] input. Alternatively, ticking [(De-)select samples based string], user can select exclude samples typing strings include name sample included/excluded. [Plot group averages] box used visualize either averages replicates (± standard deviations) individual samples independently. Moreover, concentration metadata provided loading data, user can (de-)select samples using additional parameters. left pane contains also various options modify figure, can exported .png .pdf formats. Parameter Plots: Plot calculated curve parameters (growth rates, lag times, yields, etc.) different samples bar plot. [Parameter] drop menu allows user select parameter plotted. Samples conditions can (de-)selected via methods described Group Plots. Plot group averages box can used visualize either averages (95% confidence intervals) groups individual samples independently. Plot Grid: Plot several curves separate panels, coloring background based chosen parameter heatmap-like fashion. [Data type] drop menu allows user define type data visualized curve chart. [Parameter] drop menu allows user select parameter panel backgrounds colored. Samples conditions can (de-)selected via methods described Group Plots. concentration metadata provided loading data, panels can arranged matrix one concentration per row ticking [Sort concentration]. Dose-Response Analysis: Plot results dose-response analyses chosen response parameter y-axis concentration values x-axis. drawn line indicates fit applied data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"export-data-from-qurve","dir":"Articles","previous_headings":"","what":"Export data from QurvE","title":"QurvE App User Manual v.1.0","text":"QurvE enables user export data results different ways: Download Plot: figures plotted within QurvE can exported .png .pdf formats. Please note size exported plots differs figure diplayed within app dependent size QurvE window. size, aspect ratio resolution exported plot can adjusted dedicated [Width], [Height], [DPI] fields Report: [Report] window enables user export computational results figures performed fit single report file .pdf .html format. Data Export: [Data Export] window enables user export processed raw data well computation results fitting options single data container .RData format. Please note modifications figures included exported .RData file, make sure export figures separately. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/troubleshooting.html","id":"dealing-with-outliers","dir":"Articles","previous_headings":"","what":"Dealing with Outliers","title":"Troubleshooting","text":"Outliers can significantly affect accuracy reliability growth curve analysis. Identifying addressing outliers essential step using QurvE high-throughput growth curve experiments. section, discuss strategies identify handle outliers data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/troubleshooting.html","id":"identifying-outliers","dir":"Articles","previous_headings":"Dealing with Outliers","what":"Identifying Outliers","title":"Troubleshooting","text":"Visual Inspection: Use “Validation” window Shiny app visually inspect growth fluorescence curve corresponding fit. Look irregularities deviations expected growth pattern. Examine Growth Parameters: Plot computed growth fluorescence parameters (e.g., growth rate, lag time, maximum OD, fluorescence increase rate) sample identify unusual values may indicate outlier sample. Bootstrapping: QurvE offers bootstrapping spline fitting, can help estimate uncertainty, validate model, identify potential outliers. Use bootstrapping results assess reliability curve fits.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/troubleshooting.html","id":"handling-outliers","dir":"Articles","previous_headings":"Dealing with Outliers","what":"Handling Outliers","title":"Troubleshooting","text":"Modify Fitting Parameters: Adjust fitting parameters [Computation] section Shiny app systematically exclude problematic sections measurements (e.g., outside detection limit instrument). R, can achieved defining values t0, tmax, min.growth, max.growth growth.workflow() fl.workflow() functions Re-run outlier samples: identifying outliers, re-run analysis modified parameters [Validation] panel shiny app. example can achieved within R provided growth curve analysis documentation Data Preprocessing: importing data QurvE, preprocess remove reduce impact outliers. can done using various data cleaning techniques, filtering, interpolation, imputation. Please note preprocessing methods outside scope QurvE.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"general introduction package, see vignette Quantitiative Growth Curve Evaluation Package QurvE. vignette show use QurvE analyze datasets fluorescence measurements taken time, well extract important results. Fluorescent reporter proteins widely used study mechanisms gene regulation develop biosensors allow detection chemical compounds provide insights intracellular environment. workflow analyzing fluorescence data works analogously analyzing growth data following scheme read data execute workflow. package allows users select either time growth data (e.g. simultaneous measurement cell density fluorescence intensity plate reader experiments) independent variable. Additionally, biosensors can characterized via dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"fluorescence-profiling-methods","dir":"Articles","previous_headings":"","what":"Fluorescence profiling methods","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"QurvE offers curve evaluation methods fluorescence data growth data, exception fitting growth models. calculation algorithms linear regression nonparametric fits (smoothing splines) well default parameters empirically adjusted account differences curve shapes commonly seen fluorescence data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"dose-response-analysis-methods","dir":"Articles","previous_headings":"","what":"Dose-response analysis methods","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Dose response analysis useful method evaluating performance biosensor. Biosensors typically designed respond specific chemical compounds, strength response often depends concentration target compound. Dose-response analysis can used determine concentration target compound elicits half-maximal response biosensor (variants), half-maximal effective concentration (EC50). allows evaluation sensitivity specificity biosensor can used optimize design particular application. addition evaluating performance biosensors, dose-response analysis can also used study mechanisms gene regulation biological systems. measuring response biological system different concentrations chemical compound, researchers can gain insights genes pathways involved response, can identify potential targets drug discovery. QurvE provides two methods perform dose-response analyses fluorescence data: Perform smooth spline fit response vs. concentration data extract EC50 concentration midpoint largest smallest response value. Apply biosensor response model response vs. concentration data (Meyer et al., 2019).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"run-a-complete-fluorescence-analysis-workflow","dir":"Articles","previous_headings":"","what":"Run a complete fluorescence analysis workflow","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Load package: Next, load experimental data. example, dataset used preliminary characterization different versions SEVA (Standard European Vector Architecture) plasmid pSEVA634, described (Nikel et al., 2022). data contains growth fluorescence measurements converted custom QurvE data format located different work sheets XLSX file:","code":"library(QurvE)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"load-data","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Load data","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"two functions read_data() parse_data() come arguments give user control loading fluorescence data. growth data, arguments data.fl (file path), csvsep.fl (separator symbol CSV file), dec.fl (decimal separator), sheet.fl (Excel file worksheet number “name”) provide details data stored. calib.fl allows defining equation transform fluorescence values. Similarly, functions accept arguments data.fl2, csvsep.fl2, dec.fl2, sheet.fl2, calib.fl2 load data second fluorescence channel. second fluorescence currently used normalize first fluorescence values, applied …ADD CITATION… Normalization fluorescence, , can controlled via fl.normtype performed either dividing growth values (fl.normtype = 'growth') fluorescence 2 fl.normtype = 'fl2'. can inspect structure input object class grodata:","code":"input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\",     package = \"QurvE\"), sheet.growth = 1, data.fl = system.file(\"lac_promoters.xlsx\",     package = \"QurvE\"), sheet.fl = 2, fl.normtype = \"growth\")  # normalize fluorescence to growth data summary(input) #>                   Length Class      Mode    #> time              1785   -none-     numeric #> growth              88   data.frame list    #> fluorescence        88   data.frame list    #> norm.fluorescence   88   data.frame list    #> expdesign            4   data.frame list"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"plot-raw-data","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Plot raw data","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Raw data plot. Conditions can selected deselected using names = c('grp1', 'grp2') argument exclude.nm = c('grp3', 'grp4') argument, respectively. Similarly, concentrations can (de-selected) via conc exclude.conc arguments. plot individual samples instead grouping replicates, add mean = FALSE. See ?plot.grodata options.","code":"plot(input, data.type = \"fl\",      exclude.conc = c(0.5, 0.1),      log.y = FALSE,      legend.position = \"bottom\",      basesize = 10,      legend.ncol = 3,      lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"run-workflow","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Run Workflow","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"option export.res set TRUE, tab-delimited .txt files summarizing computation results created automatically, well flFitRes object (object class flFitRes) .RData file. object (.RData file) contains raw data, fitting options, computational results. Figure @ref(fig:flFitRes-container) shows structure generated flFitRes object. RStudio, View(flFitRes) allows interactive inspection data container. want create report summarizing computational results including graphical representation every fit, provide desired output format(s) report = 'pdf', report = 'html', report = c('pdf', 'html'). advantage report HTML format every figure can exported (editable) PDF file. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication. Arguments commonly modified: Please consult ?fl.workflow arguments customize workflow. Internal structure flFitResobject generated growth.workflow().","code":"flFitRes <- fl.workflow(grodata = input,      fit.opt = c(\"s\", \"l\"),     x_type = \"time\",      norm_fl = TRUE,      ec50 = TRUE,      dr.parameter = \"dY.spline\",     suppress.messages = TRUE,      export.res = FALSE, # Prevent creating TXT table and RData files with results     parallelize = FALSE) # Use only one available CPU core"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"tabular-results","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Tabular results","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"flFitRes object contains two tables summarizing computational results: - flFitRes$flFit$flable lists calculated curve parameters every sample fit - flFitRes$drFit$drTable contains results dose-response analysis Additionally, dedicated functions table_group_fluorescence_linear() table_group_fluorescence_spline() allow generation grouped results tables two fit types averages standard deviations. column headers resulting data frames formatted HTML visualization shiny DT::datatable(). summary results individual fit can obtained applying generic function summary() fit object within flFitRes.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"visualize-results","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Visualize results","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Several generic plot() allow plotting results merely accessing list items within flFitRes object structure (Figure @ref(fig:flFitRes-container)).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"inspect-individual-fits","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Inspect individual fits","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"important verify accuracy fits applied attempting interpret results (workflow run interactive = TRUE. especially important analyzing fluorescence data, curve shapes level noise can vary significantly depending specific experiment equipment used cultivation. Linear fit plots validate applied fits. details function, run ?plot.gcFitLinear. Spline fit plots validate applied fits. details function, run ?plot.gcFitLinear. Normalization fluorescence reads typically introduces additional noise. default smoothing parameter smooth.fl suitable produce good-quality representations curves via nonparametric fits, linear fits either failed produced regression windows small. order obtain linear regression results accurately represent linear-increase section curves, decrease R2 threshold manually increase size sliding window (default calculated automatically sample). new settings need applied samples, re-run entire workflow adjusted parameters: Linear fit plots validate linear regressions re-running workflow adjusted parameters.","code":"plot(flFitRes$flFit$flFittedLinear[[1]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[3]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[6]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedSpline[[1]], basesize = 15) plot(flFitRes$flFit$flFittedSpline[[3]], basesize = 15) plot(flFitRes$flFit$flFittedSpline[[6]], basesize = 15) flFitRes <- fl.workflow(grodata = input,                           fit.opt = c(\"s\", \"l\"),                           x_type = \"time\",                           norm_fl = TRUE,                           lin.R2 = 0.95, # Decreased R2 threshold                           lin.h = 20, # Manually defined sliding window size                           ec50 = TRUE,                           dr.parameter = \"dY.spline\",                           suppress.messages = TRUE,                           export.res = FALSE,                           parallelize = FALSE) plot(flFitRes$flFit$flFittedLinear[[1]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[3]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[6]], cex.lab = 1.2, cex.axis = 1.2)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"grouped-spline-fits","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Grouped spline fits","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Applying plot() flFitRes object produces figure spline fits performed well first derivative (slope) time. generic function calls plot.flFitRes() data.type = 'spline'. Combined plot spline fits performed. addition options available data.type = 'raw', arguments can defined control appearance secondary panel showing slope time. See ?plot.flFitRes options. arranging individual samples grid, can create visual representation similar heat map illustrates values chosen parameter. can helpful way gain insights understand trends within data.: Plot grid spline fits performed one concentration per row. See ?plot.grid available options.","code":"plot(flFitRes,      data.type = \"spline\",      deriv = TRUE,      legend.position = \"bottom\",      legend.ncol = 3,      n.ybreaks = 10,      basesize=10,      lwd = 0.7) plot.grid(flFitRes,           param = \"max_slope.spline\",           pal = \"Mint\",           log.y = FALSE,           basesize = 12)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"compare-growth-parameters","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Compare growth parameters","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"function plot.parameter() works also flFitRes objects compare computed curve parameters: Parameter plots. mean = TRUE, results replicates combined shown mean ± 95% confidence interval. functions combining different growth curves, arguments name, exclude.nm, conc exclude.conc allow (de)selection specific samples conditions. Since applied growth models log-transformed data, calling ‘dY.orig.model’ ‘.orig.model’ instead ‘dY.model’ ‘.model’ provides respective values original scale. linear spline fits, done automatically. details function, run ?plot.parameter.","code":"# Parameters obtained from linear regression plot.parameter(flFitRes, param = \"max_slope.linfit\", basesize = 10,     legend.position = \"bottom\") plot.parameter(flFitRes, param = \"dY.linfit\", basesize = 10,     legend.position = \"bottom\")  # Parameters obtained from nonparametric fits plot.parameter(flFitRes, param = \"max_slope.spline\", basesize = 10,     legend.position = \"bottom\") plot.parameter(flFitRes, param = \"dY.spline\", basesize = 10,     legend.position = \"bottom\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"dose-response-analysis","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Dose-response analysis","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"results dose-response analysis can visualized calling plot() drFit object stored within flFitRes. action calls plot.drFit() turn runs plot.drFitSpline() plot.drFitModel() (depending choice workflow) every condition dose-response analysis performed. Alternatively, can call plot() list elements grofit$drFit$drFittedModels grofit$drFit$drFittedSplines, respectively. Dose response analysis - model fits. details function, run ?plot.drFit.","code":"plot(flFitRes$drFit, cex.point = 1, cex.lab = 1.1, cex.axis = 1)"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"virtually disciplines biology dealing living organisms, classical microbiology applied biotechnology, routine characterize growth species study. QurvE provides suite analysis tools make growth profiling quick, efficient, reproducible. addition, allows characterization fluorescence data , e.g., biosensor characterization plate reader experiments (discussed vignette Quantitiative Fluorescence Curve Evaluation Package QurvE). computational steps obtain -depth characterization combined user-friendly workflow functions range plotting functions allow visualization fits comparison organism performances. physiological parameter calculated (e.g., growth rate µ, doubling time tD, lag time \\(\\lambda\\), growth measurement increase \\(\\Delta\\)Y, equivalent fluorescence parameters) can used perform dose-response analysis determine half-maximal effective concentration (EC50). package build foundation two R packages Kahm et al. (2010) Petzoldt (2022). QurvE designed usable minimal prior knowledge R programming language programming general. need familiar idea running commands console writing basic scripts. R beginners, great starting point, good resources suggest using RStudio application. provides environment writing running R code. consideration R novices, QurvE establishes framework complete, detailed growth curve analysis can performed two simple steps: Read data custom format parse data plate reader experiment. Run workflow, including fitting growth curves, dose-response analysis, rendering report summarizes results. computational results workflow stored data container (list) can visualized passing generic function plot(list_object). QurvE extends user’s control fits defining thresholds quality criteria, allows direct parsing data plate reader result files, calculates parameters additional growth phase (bi-phasic growth).","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"release-version","dir":"Articles","previous_headings":"Installation","what":"Release version","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"recent release version can found CRAN:","code":"install.packages(\"QurvE\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"development-version","dir":"Articles","previous_headings":"Installation","what":"Development version","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Install current version package devtools:","code":"install.packages(\"devtools\") library(devtools) install_github(\"NicWir/QurvE\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny app","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE features graphical user interface (GUI) developed Shiny app, designed user-friendly intuitive. can start app running: See QurvE User Manual details use front-end application.","code":"QurvE::run_app()"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"growth-profiling-methods","dir":"Articles","previous_headings":"","what":"Growth profiling methods","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Three methods available characterize growth curves: Fit parametric growth models (log-transformed) growth data Determine maximum growth rates (µmax) log-linear part growth curve using heuristic approach proposed “growth rates made easy”-method Hall et al. (2014). , QurvE uses code package Petzoldt (2022), adds user-defined thresholds () R2 values linear fits, (ii) relative standard deviations (RSD) estimates slopes, (iii) minimum fraction total growth value increase (\\(\\Delta\\)Y) regression window cover considered analysis. thresholds ensure robust reproducible identification linear range best describes growth curve. Additionally, parameters secondary growth phase can extracted bi-linear growth curves.1 algorithm works follows: Fit linear regressions [Theil-Sen estimator (Sen, 1968; Theil, 1992)] subsets h consecutive, log-transformed data points (sliding window size h). , example, h=5, fit linear regression points 1 \\(\\dots\\) 5, 2 \\(\\dots\\) 6, 3 \\(\\dots\\) 7 forth. Find subset highest slope \\(\\mu_{max}\\). R2 RSD values regression meet defined thresholds data points within regression window account least defined fraction total growth measurement increase? , evaluate regression second highest slope, forth. Include also data points adjacent subsets slope least \\(defined \\space quota \\times \\mu_{max}\\), e.g., regression windows least 95% maximum slope. Fit new linear model extended data window identified step iii. biphasic = TRUE (see section @ref(run-workflow)), following steps performed define second growth phase: Perform smooth spline fit data smoothing factor 0.5. Calculate second derivative spline fit perform smooth spline fit derivative smoothing factor 0.4. Determine local maxima minima second derivative. Find local minimum following \\(\\mu_{max}\\) repeat heuristic linear method later time values. Find local maximum \\(\\mu_{max}\\) repeat heuristic linear method earlier time values. Choose greater two independently determined slopes \\(\\mu_{max}2\\). Perform smooth spline fit (log-transformed) growth data extract µmax maximum value first derivative1. biphasic = TRUE (see section @ref(run-workflow)), following steps performed define second growth phase: Determine local minima within first derivative smooth spline fit. Remove ‘peak’ containing highest value first derivative (.e., \\(\\mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(\\mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(\\mu_{max}\\). Choose greater two independently determined slopes \\(\\mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"dose-response-analysis-methods","dir":"Articles","previous_headings":"","what":"Dose-response analysis methods","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"purpose dose-response analysis define sensitivity given organism effects compound potency substance, respectively. effects can either beneficial (e.g., nutrient compound) detrimental (e.g., antibiotic). sensitivity reflected half-maximal effective concentration (EC50), .e., concentration (dose) half-maximal response (e.g., \\(\\mu_{max}\\) \\(\\Delta\\)Y) observed. QurvE provides two methods determine EC50: Perform smooth spline fit response vs. concentration data extract EC50 concentration midpoint largest smallest response value. Apply 20 (parametric) dose-response models response vs. concentration data choose best model based Akaike information criterion (AIC). done using excellent package drc (Ritz et al., 2016).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"data-formats","dir":"Articles","previous_headings":"","what":"Data formats","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE accepts files formats .xls, .xlsx, .csv, .tsv, .txt (tab separated). data files structured shown Figure @ref(fig:data-layout). Alternatively, data parsers available allow direct import raw data different culture instruments. list currently supported devices, please run ?parse_data. Please note: recommend always converting .xls .xlsx files alternate format first speed parsing process. Reading Excel files may require orders magnitude longer processing time.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"custom-format","dir":"Articles","previous_headings":"Data formats","what":"Custom format","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"ensure compatibility type measurement data type (e.g., optical density, cell count, measured dimensions), QurvE uses custom data layout. first column contains time values ‘Time’ top cell, cells #2 #3 ignored. remaining columns contain measurement values following sample identifiers top three rows: Sample name; usually combination organism condition, ‘blank’. Replicate number; replicates identified identical names concentration values. one type replicate (biological technical) performed, enter numerical values . biological technical replicates biological replicates performed, technical replicates replicate number. technical replicates combined average value. (optional) Concentration values added compound; information used perform dose-response analysis. Several experiments (e.g., runs different plate readers) can combined single file analyzed simultaneously. Therefore, different experiments marked presence separate time columns. Different lengths values time columns permitted.  read data custom format, run: data.growth argument takes path file name R dataframe object containing experimental data custom format. csvsep specifies separator symbol (required .csv files; default: ';'). dec decimal separator (required .csv, .tsv, .txt files; default: '.'). Excel file format used, sheet.growth specifies number name (quotes) sheet containing data. subtract.blank = TRUE, columns name ‘blank’ combined row-wise average, mean values subtracted measurements remaining samples. calib.growth argument, formula can provided form ‘y = function(x)’ (e.g., calib.growth = 'y = x * 2 + 0.5') transform growth measurement values.","code":"grodata <- read_data(data.growth = 'path_to_data_file',                    csvsep = ';', # or ','                    dec = '.', # or ','                    sheet.growth = 1, # number (or \"name\") of the EXCEL file sheet containing data                    subtract.blank = TRUE,                    calib.growth = NULL)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"data-parser","dir":"Articles","previous_headings":"Data formats","what":"Data parser","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"data generated culture devices (e.g., plate readers) different manufacturers come different formats. data used directly, must first “parsed” plate reader QurvE standard format. scenario, sample information must provided separate table maps samples respective identifiers.mapping table must following layout (Figure @ref(fig:mapping-layout)): Data parser mapping layout parse data, run: data.file argument takes path file containing experimental data exported culture device, map.file path file mapping information. software, can specify device (software) used generate data. csvsep.data csvsep.map specify separator symbol data mapping file, respectively (required .csv files; default: ';'). dec.data dec.map decimal separator used data mapping file, respectively (required .csv, .tsv, .txt files; default: '.'). Excel file format used one data mapping file, sheet.data /sheet.map specify number name (quotes) sheet containing data mapping information, respectively. Excel file contains data mapping information different worksheets, file path needs specified data.fileand map.file. subtract.blank = TRUE, samples name ‘blank’ combined row-wise average, mean values subtracted measurements remaining samples. argument convert.time accepts function ‘y = function(x)’ transform time values (e.g., convert.time = 'y = x/3600' convert seconds hours). one read type identified provided data file, user prompted specify measurements belong growth, fluorescence, fluorescence2, respectively.","code":"grodata <- parse_data(data.file = 'path_to_data_file',                     map.file = 'path_to_mapping_file',                     software = 'used_software_or_device',                     csvsep.data = ';', # or ','                     dec.data = '.', # or ','                     csvsep.map = ';', # or ','                     dec.map = '.', # or ','                     sheet.data = 1, # number (or \"name\") of the EXCEL file sheet containing data                     sheet.map = 1, # number (or \"name\") of the EXCEL file sheet containing                                    # mapping information                     subtract.blank = TRUE,                     calib.growth = NULL,                     convert.time = NULL)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"run-a-complete-growth-analysis-workflow","dir":"Articles","previous_headings":"","what":"Run a complete growth analysis workflow","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE reduces computational steps required create complete growth profiling two steps, read data run workflow. loading package: load experimental data publication Wirth & Nikel (2021) Pseudomonas putida KT2440 engineered strain tested sensitivity towards product 2-fluoromuconic acid:","code":"library(QurvE)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"load-data","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Load data","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"created object grodata can inspected View(grodata). list class grodata containing: time matrix 66 rows, corresponding one sample dataset, 161 columns, .e., time values sample. growth data frame 66 rows 161+3 columns. three additional columns contain sample identifiers condition, replicate, concentration. fluorescence1 (: NA) fluorescence2 (: NA) norm.fluorescence1 (: NA) norm.fluorescence2 (: NA) expdesign, data frame containing label, condition, replicate, concentration sample: can plot raw data. Applying generic plot() function grodata objects calls function plot.grodata().: Raw data plot. Conditions can selected deselected using names = c('grp1', 'grp2') argument exclude.nm = c('grp3', 'grp4') argument, respectively. Similarly, concentrations can (de-selected) via conc exclude.conc arguments. plot individual samples instead grouping replicates, add mean = FALSE. See ?plot.grodata options.","code":"grodata <- read_data(data.growth = system.file(\"2-FMA_toxicity.csv\",     package = \"QurvE\"), csvsep = \";\") head(grodata$expdesign) #>             label condition replicate concentration #> 1 KT2440 | 1 | 90    KT2440         1            90 #> 2 KT2440 | 1 | 70    KT2440         1            70 #> 3 KT2440 | 1 | 50    KT2440         1            50 #> 4 KT2440 | 1 | 25    KT2440         1            25 #> 5 KT2440 | 1 | 20    KT2440         1            20 #> 6 KT2440 | 1 | 15    KT2440         1            15 plot(grodata, data.type = \"growth\", log.y = FALSE,      x.lim = c(NA, 32), legend.position = \"right\",      exclude.conc = c(50, 70, 90),      basesize = 10, legend.ncol = 1, lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"run-workflow","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Run Workflow","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"perform complete growth profiling samples input dataset, call growth.workflow() function grodata object. supress.messages = TRUE, avoid printing information every sample’s fit sample console. default, selected response parameter perform dose-response analysis ‘mu.linfit’. choose different parameter, provide argument dr.parameter = 'choice'. list appropriate parameters provided within function documentation (?growth.workflow). option export.res set TRUE, tab-delimited .txt files summarizing computation results created, well grofit object (object class grofit) .RData file. object (.RData file) contains raw data, fitting options, computational results. Figure @ref(fig:grofit-container) shows structure generated grofit object. RStudio, View(grofit) allows interactive inspection data container. want create report summarizing computational results including graphical representation every fit, provide desired output format(s) report = 'pdf', report = 'html', report = c('pdf', 'html'). advantage report HTML format every figure can exported (editable) PDF file. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication. Arguments commonly modified: Please consult ?growth.workflow arguments customize workflow. Internal structure grofitobject generated growth.workflow().","code":"grofit <- growth.workflow(grodata = grodata, fit.opt = \"a\", ec50 = TRUE,     suppress.messages = TRUE,      export.res = FALSE, # Prevent creating TXT table and RData files with results     parallelize = FALSE) # Use only one available CPU core"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"tabular-results","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Tabular results","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"grofit object contains two tables summarizing computational results: - grofit$gcFit$gcTable lists calculated physiological parameters every sample fit - grofit$drFit$drTable contains results dose-response analysis TestId AddId concentration reliability_tag used.model log.x log.y.lin log.y.spline 1 KT2440 1 90 TRUE  FALSE TRUE TRUE 2 KT2440 1 70 TRUE  FALSE TRUE TRUE 3 KT2440 1 50 TRUE  FALSE TRUE TRUE log.y.model nboot.gc mu.linfit tD.linfit lambda.linfit dY.linfit 1 TRUE 0 0  0 2 TRUE 0 0  0 3 TRUE 0 0  0 Additionally, dedicated functions table_group_growth_linear(), table_group_growth_model(), table_group_growth_spline() allow generation grouped results tables three fit types averages standard deviations. column headers resulting data frames formatted HTML visualization shiny DT::datatable(). summary results individual fit can obtained applying generic function summary() fit object within grofit.","code":"# show the first three rows and first 14 columns of gcTable gcTable <- grofit$gcFit$gcTable gcTable[1:3, 1:14] # Show drTable. The function as.data.frame() ensures that it is shown in table format. drTable <- as.data.frame(grofit$drFit$drTable)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"visualize-results","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Visualize results","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Several generic plot() methods written allow easy plotting results merely accessing list items within grofit object structure (Figure @ref(fig:grofit-container)).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"grouped-spline-fits","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Grouped spline fits","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Applying plot() grofit object produces figure spline fits performed well first derivative (slope) time. generic function calls plot.grofit() data.type = 'spline' thus, options available described Figure @ref(fig:raw-data-plot). Combined plot spline fits performed. addition options available data.type = 'raw', arguments can defined control appearance secondary panel showing slope time. See ?plot.grofit options.","code":"plot(grofit,      data.type = \"spline\",      log.y = TRUE,      deriv = TRUE,      conc = c(0,5,10,15,20),      legend.position = \"right\",      legend.ncol = 1,      x.lim = c(NA, 32),      y.lim = c(0.01,NA),      n.ybreaks = 10,      basesize=10,      lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"compare-growth-parameters","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Compare growth parameters","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"convenient way compare performance different organisms different conditions plot calculated growth parameters means function plot.parameter(). Parameter plots. mean = TRUE, results replicates combined shown mean ± 95% confidence interval. functions combining different growth curves, arguments name, exclude.nm, conc exclude.conc allow (de)selection specific samples conditions. Since applied growth models log-transformed data, calling ‘dY.orig.model’ ‘.orig.model’ instead ‘dY.model’ ‘.model’ provides respective values original scale. linear spline fits, done automatically. details function, run ?plot.parameter. parameter plot ´mu.linfit´ (growth rates determined linear regression), can see outlier strain KT2440 concentration 0. can plot individual fits condition find due fit quality: Linear fit plots identify sample outliers. details function, run ?plot.gcFitLinear. Apparently, algorithm find maximum slope growth curve standard threshold lin.R2 = 0.97 find appropriate fit within first stage growth due insufficient linearity. can manually re-run fit sample adjusted parameters. Thereby, lower R2 threshold increase size sliding window cover larger fraction growth curve. , update respective entries gcTable object summarizes fitting results (plot.parameter() accesses extract relevant data). generic function summary(), applied fit object single sample within grofit, provides required parameters update table. Lastly, also re-run dose-response analysis since ‘mu.linfit’ used response parameter (default), including erroneous value. Note: process manually updating grofitelements adjusted fits can avoided re-running growth.workflow adjusted global parameters running workflow interactive mode (interactive = TRUE). interactive mode, individual fit printed user can decide re-run single fit adjusted parameters. can validate quality updated fit: Updated linear fit outlier sample ‘KT2440 | 2 | 0’. looks better! Parameter plot updated fit.","code":"# Parameters obtained from linear regression plot.parameter(grofit, param = \"mu.linfit\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.linfit\", basesize = 10, legend.position = \"bottom\")  # Parameters obtained from nonparametric fits plot.parameter(grofit, param = \"mu.spline\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.spline\", basesize = 10, legend.position = \"bottom\")  # Parameters obtained from model fits plot.parameter(grofit, param = \"mu.model\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.orig.model\", basesize = 10,     legend.position = \"bottom\") plot(grofit$gcFit$gcFittedLinear$`KT2440 | 1 | 0`, cex.lab = 1.2,     cex.axis = 1.2) plot(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`, cex.lab = 1.2,     cex.axis = 1.2) # Replace the existing linear fit entry for sample `KT2440 | 2 | 0` # with a new fit grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0` <-   growth.gcFitLinear(time = grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`$raw.time,                      data = grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`$raw.data,                      control = growth.control(lin.R2 = 0.95, lin.h = 10))  # extract row index of sample `KT2440 | 2 | 0` ndx.row <- grep(\"KT2440 \\\\| 2 \\\\| 0\", grofit$expdesign$label)  # get column indices of linear fit parameters (\".linfit\") ndx.col <- grep(\"\\\\.linfit\", colnames(grofit$gcFit$gcTable) )  # Replace previous growth parameters stored in gcTable grofit$gcFit$gcTable[ndx.row, ndx.col] <-   summary(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`)  # Replace existing dose-response analysis with new fit grofit$drFit <- growth.drFit(   gcTable = grofit$gcFit$gcTable,   control = grofit$control) # we can copy the control object from the original workflow. plot(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`, cex.lab = 1.2) # Parameters obtained from linear regression plot.parameter(grofit, param = \"mu.linfit\", basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"plot-grids","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Plot grids","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"arranging individual samples grid, can create visual representation similar heat map illustrates values chosen parameter. can helpful way gain insights understand trends within data.: Plot grid spline fits performed . See ?plot.grid available options.","code":"plot.grid(grofit,            param = \"mu.linfit\",            pal = \"Mint\",            log.y = FALSE,           sort_by_conc = FALSE,           basesize = 9)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"dose-response-analysis","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Dose-response analysis","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"results dose-response analysis can visualized calling plot() drFit object stored within grofit. action calls plot.drFit() turn runs plot.drFitSpline() plot.drFitModel() (depending choice dr.method workflow) every condition dose-response analysis performed. Alternatively, can call plot() list elements grofit$drFit$drFittedModels grofit$drFit$drFittedSplines, respectively. Dose response analysis - model fits. details function, run ?plot.drFit.","code":"plot(grofit$drFit, cex.point = 1, basesize = 12)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"bootstrapping","dir":"Articles","previous_headings":"","what":"Bootstrapping","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"growth experiments performed larger scale manual growth measurements, technical deviations can result outliers. outliers can lead distortion curve fits, especially fewer data points available usual plate reading experiments. instance, bootstrapping can provide realistic estimation growth parameters. Bootstrapping statistical procedure resamples single dataset create many simulated samples. done randomly drawing data points dataset replacement original number data points reached. analysis (: growth fitting) performed individually bootstrapped replicate. variation resulting estimated parameters reasonable approximation variance parameters. include bootstrapping QurvE workflow, define argument nboot.gc. Similarly, can include bootstrapping dose-response analysis done dr.method = 'spline' defining argument nboot.dr. plot results growth fit bootstrapping, call plot() gcBootSpline object: Nonparametric growth fit bootstrapping. details function, run ?plot.gcBootSpline. applying plot() drBootSpline object, can plot dose-response bootstrap results: Dose-response analysis bootstrapping. details function, run ?plot.drBootSpline.","code":"grofit_bt <- growth.workflow(grodata = grodata,                              fit.opt = \"s\", # perform only nonparametric growth fitting                              nboot.gc = 50,                              ec50 = T,                              dr.method = \"spline\",                              dr.parameter = \"mu.spline\",                              nboot.dr = 50,                              smooth.dr = 0.25,                              suppress.messages = TRUE,                              export.res = F,                              parallelize = FALSE) plot(grofit_bt$gcFit$gcBootSpline[[7]], # Double braces serve as an alternative to                                         # access list items and allow their access by number      combine = TRUE, # combine both growth curves and parameter plots in the same window      lwd = 0.7) plot(grofit_bt$drFit$drBootSpline[[1]],      combine = TRUE, # combine both dose-response curves and parameter plots in the same window      lwd = 0.7)"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas T. Wirth. Author, maintainer, copyright holder. Jonathan Funk. Author.            Co-developer shiny app. Matthias Kahm. Contributor.            Author 'grofit' package, whose general data structure adopted QurvE. Maik Kschischo. Contributor.            Author 'grofit' package, whose general data structure adopted QurvE. Thomas Petzoldt. Contributor.            Creator package 'growthrates', whose function calculating linear regressions served template QurvE. Andrew Stein. Contributor.            Creator 'xgxr' package QurvE adopted code plot axis ticks log10 scale. Michael W. Kearney. Contributor.            Creator 'tfse' package QurvE adopted match_arg function. Santiago . Hurtado. Contributor.            Creator 'RobustLinearReg' package QurvE adopted Theil Sehn Regression method. Mark Heckmann. Contributor.            Creator 'zipFastener' function; source: https://ryouready.wordpress.com/2009/03/27/r-zip-fastener--two-data-frames-combining-rows--columns--two-dataframes---alternating-manner/ Nicholas Hamilton. Contributor.            Creator 'colFmt' function. Evan Friedland. Contributor.            Creator 'inflect' function. Heather Turner. Contributor.            Creator 'base_breaks' function. Georgi N. Boshnakov. Contributor.            Creator 'gbRd' package functions used display function help pages within shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wirth N, Funk J (2023). QurvE: Robust User-Friendly Analysis Growth Fluorescence Curves. https://github.com/NicWir/QurvE, https://nicwir.github.io/QurvE/.","code":"@Manual{,   title = {QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves},   author = {Nicolas T. Wirth and Jonathan Funk},   year = {2023},   note = {https://github.com/NicWir/QurvE, https://nicwir.github.io/QurvE/}, }"},{"path":"https://nicwir.github.io/QurvE/index.html","id":"web-application","dir":"","previous_headings":"","what":"Web application","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"Visit QurvE online application","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"deployed-application","dir":"","previous_headings":"","what":"Deployed application","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"Download Windows setup User manual QurvE application","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"r-package","dir":"","previous_headings":"","what":"R package","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"R package CRAN User manual growth curve analysis User manual fluorescence curve analysis shiny application can launched within R via QurvE::run_app().","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"QurvE comes form R package can used create custom workflows application-specific downstream analyses published Comprehensive R Archive Network (CRAN) GitHub. Alternatively, intuitive graphical user interface (GUI) implemented shiny application non-programmers available. app can installed locally Windows computers accessed web-app.  Figure: QurvE enables robust, high-throughput analysis growth fluorescence data.() functionalities within QurvE accessible via intuitive graphical user interface created shiny, can installed locally Windows PCs. (b) type biological growth data can analyzed. commonly used cultivation devices, growing list data parser functions allows conversion exported experimental data QurvE-compatible format. single computation workflow, three different types algorithms performed every sample dataset: (c) Five parametric models fit data find equation best describes growth curve. (d) Relevant (log-) linear phases extracted sample perform robust linear regression. (e) representation data points cubic smoothing splines allows extraction growth rates time applies curve shape. (f) Relevant parameters (growth rates, biomass yields, rate fluorescence increase, etc.) can used combination concentration data analyze dose-response relationships. done applying either dose-response models smoothing splines. (g) Dedicated plot functions facilitate fit validation, interpretation results, , due availability numerous customization options, generation suitable publication. (h) computed parameters can exported table files inspected interactively within app. () chosen fitting options well numerical graphical results can compiled reports PDF HTML format promote data transparency good scientific practice. spirit, raw data results can exported single data container form .RData file give researchers access data analysis methods used.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/QurvE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","title":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","text":"High-throughput analysis growth curves fluorescence data using three methods: linear regression, growth model fitting, smooth spline fit. Analysis dose-response relationships via smoothing splines dose-response models. Complete data analysis workflows can executed single step via user-friendly wrapper functions. results workflows summarized detailed reports well intuitively navigable 'R' data containers. 'shiny' application provides access features without requiring programming knowledge.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/QurvE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","text":"Maintainer: Nicolas T. Wirth mail.nicowirth@gmail.com (ORCID) [copyright holder] Authors: Jonathan Funk funk.jonathan21@gmail.com (Co-developer shiny app.) contributors: Matthias Kahm (Author 'grofit' package, whose general data structure adopted QurvE.) [contributor] Maik Kschischo (Author 'grofit' package, whose general data structure adopted QurvE.) [contributor] Thomas Petzoldt thomas.petzoldt@tu-dresden.de (ORCID) (Creator package 'growthrates', whose function calculating linear regressions served template QurvE.) [contributor] Andrew Stein andy.stein@gmail.com (Creator 'xgxr' package QurvE adopted code plot axis ticks log10 scale.) [contributor] Michael W. Kearney kearneymw@missouri.edu (Creator 'tfse' package QurvE adopted match_arg function.) [contributor] Santiago . Hurtado santih@carina.fcaglp.unlp.edu.ar (Creator 'RobustLinearReg' package QurvE adopted Theil Sehn Regression method.) [contributor] Mark Heckmann (Creator 'zipFastener' function; source: https://ryouready.wordpress.com/2009/03/27/r-zip-fastener--two-data-frames-combining-rows--columns--two-dataframes---alternating-manner/) [contributor] Nicholas Hamilton (Creator 'colFmt' function.) [contributor] Evan Friedland (Creator 'inflect' function.) [contributor] Heather Turner (Creator 'base_breaks' function.) [contributor] Georgi N. Boshnakov georgi.boshnakov@manchester.ac.uk (Creator 'gbRd' package functions used display function help pages within shiny app.) [contributor]","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"Calculates values biosensor response model given time points response parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"","code":"biosensor.eq(x, y.min, y.max, K, n)"},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"x vector concentration values y.min minimum fluorescence value y.max maximum fluorescence value K Sensitivity parameter n Cooperativity parameter","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"vector fluorescence values","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"","code":"n <- seq(1:10) conc <- rev(10*(1/2)^n) fit <- biosensor.eq(conc, 300, 82000, 0.85, 2)"},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":null,"dir":"Reference","previous_headings":"","what":"Export an R object as .RData file — export_RData","title":"Export an R object as .RData file — export_RData","text":"Export R object .RData file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export an R object as .RData file — export_RData","text":"","code":"export_RData(object, out.dir = tempdir(), out.nm = class(object))"},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export an R object as .RData file — export_RData","text":"object R object. .dir path output directory. Default: working directory .nm output filename (without '.RData' ending). Default: class object followed '.RData'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export an R object as .RData file — export_RData","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export an R object as .RData file — export_RData","text":"","code":"if(interactive()){ df <- data.frame('A' = seq(1:10), 'B' = rev(seq(1:10)))  export_RData(df) }"},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a tabular object as tab-separated .txt file — export_Table","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"Export tabular object tab-separated .txt file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"","code":"export_Table(table, out.dir = tempdir(), out.nm = deparse(substitute(table)))"},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"table tabular R object (dataframe, matrix, array) .dir path output directory. Default: working directory .nm output filename (without '.txt' ending). Default: name table followed '.txt'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"","code":"if(interactive()){ df <- data.frame('A' = seq(1:10), 'B' = rev(seq(1:10)))  export_Table(df) }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a fl.control object. — fl.control","title":"Create a fl.control object. — fl.control","text":"fl.control object required perform various computations fluorescence data stored within grodata objects (created read_data parse_data). fl.control object created automatically part fl.workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a fl.control object. — fl.control","text":"","code":"fl.control(   fit.opt = c(\"l\", \"s\"),   x_type = c(\"growth\", \"time\"),   norm_fl = TRUE,   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.lin = FALSE,   log.x.spline = FALSE,   log.y.lin = FALSE,   log.y.spline = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.05,   lin.dY = 0.05,   dr.parameter = \"max_slope.spline\",   dr.method = c(\"model\", \"spline\"),   dr.have.atleast = 5,   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   biphasic = FALSE,   interactive = FALSE,   nboot.fl = 0,   smooth.fl = 0.75,   growth.thresh = 1.5,   suppress.messages = FALSE,   neg.nan.act = FALSE,   clean.bootstrap = TRUE )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a fl.control object. — fl.control","text":"fit.opt (Character vector strings) Indicates whether program perform linear regression ('l') /spline fit ('s'). Default:  fit.opt = c('l', 's'). x_type (Character) data type shall used independent variable? Options 'growth' 'time'. norm_fl (Logical) use normalized (growth) fluorescence data fits. effect x_type = 'time' t0 (Numeric) Minimum time value considered linear spline fits (x_type = 'time'). tmax (Numeric) Maximum time value considered linear spline fits (x_type = 'time').. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits (x_type = 'growth'). max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits (x_type = 'growth'). log.x.lin (Logical) Indicates whether ln(x+1) applied independent variable linear fits. Default: FALSE. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied fluorescence data linear fits. Default: FALSE log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE lin.h (Numeric) Manually define size sliding window used flFitLinear. NULL, h calculated samples based number measurements fluorescence increase phase plot. lin.R2 (Numeric) R2 threshold flFitLinear. lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope flFitLinear. lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: 'max_slope.spline', represents maximum slope spline fit Typical options include: 'max_slope.linfit', 'dY.linfit', 'max_slope.spline', 'dY.spline'. dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data ('spline') fit biosensor response model 'model' (proposed Meyer et al., 2019). dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? interactive (Logical) Controls whether fit sample method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.fl (Numeric) Number bootstrap samples used nonparametric curve fitting flBootSpline. Use nboot.fl = 0 disable bootstrap. Default: 0 smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. suppress.messages (Logical) Indicates whether messages (information current fluorescence curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. neg.nan.act (Logical) Indicates whether program stop negative fluorescence values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a fl.control object. — fl.control","text":"Generates list arguments described entries.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a fl.control object. — fl.control","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a fl.control object. — fl.control","text":"","code":"# default option control_default <- fl.control() # user defined control_manual <- fl.control(fit.opt = c('s'),                              smooth.fl = 0.6,                              x_type = 'time',                              t0 = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"Fit biosensor model (Meyer et al., 2019) response vs. concentration data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"","code":"fl.drFit(   flTable,   control = fl.control(dr.method = \"model\", dr.parameter = \"max_slope.spline\") )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"flTable dataframe containing data dose-response model estimation. table class flTable can obtained running flFit dr.method = 'model' argument fl.control object. control fl.control object created fl.control, defining relevant fitting options. dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data ('spline') fit biosensor response model 'model' (proposed Meyer et al., 2019). dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: 'max_slope.spline', represents maximum slope spline fit Typical options include: 'max_slope.linfit', 'dY.linfit', 'max_slope.spline', 'dY.spline'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"object class drFit. raw.data Data passed function flTable. drTable Dataframe containing condition identifiers, fit options, results dose-response analysis. drFittedModels List drFitModel objects generated call fl.drFitModel distinct experiment. control Object class fl.control created call fl.control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"","code":"# \\donttest{ # Load example dataset input <- read_data(data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.fl = 2 ) #> Error in df[1, ]: incorrect number of dimensions  # Run fluorescence curve analysis workflow fitres <- flFit(fl_data = input$fluorescence,                 time = input$time,                 parallelize = FALSE,                 control = fl.control(x_type = 'time', norm_fl = FALSE,                                      suppress.messages = TRUE)) #> Error in class(fl_data) %in% c(\"list\", \"grodata\"): object 'input' not found  # Perform dose-response analysis drFit <- fl.drFit(flTable = fitres$flTable,                   control = fl.control(dr.method = 'model',                                        dr.parameter = 'max_slope.linfit')) #> Error in is.data.frame(x): object 'fitres' not found  # Inspect results summary(drFit) #> Error in summary(drFit): object 'drFit' not found plot(drFit) #> Error in plot(drFit): object 'drFit' not found # }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"fl.drFitModel fits biosensor model proposed Meyer et al. (2019) provided response (e.g., max_slope.spline vs. concentration data determine leakiness, sensitivity, induction fold-change, cooperativity.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"","code":"fl.drFitModel(conc, test, drID = \"undefined\", control = fl.control())"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"drFitFLModel object. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition fit.conc Fitted concentration values. fit.test Fitted response values. model nls object generated nlsLM function. parameters List parameters estimated dose response curve fit. yEC50: Response value related EC50. y.min: Minimum fluorescence ('leakiness', lowest concentration 0). y.max: Maximum fluorescence. fc: Fold change (y.max divided y.min). K: Concentration half-maximal response ('sensitivity'). n: Cooperativity. yEC50.orig: Response value EC50 original scale, transformation applied. K.orig: K original scale, transformation applied. test.nm: Test identifier extracted test. fitFlag (Logical) Indicates whether spline fitted successfully data. reliable (Logical) Indicates whether performed fit reliable (set manually). control Object class fl.control created call fl.control. Use plot.drFitModel visualize model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = 'test', control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.503 | yEC50: 3105 | fold change: 51.17 | leakiness: 119.1 #>  #>   print(summary(TestRun)) #>      yEC50   y.min    y.max       fc        K        n yEC50.orig   K.orig test #> 1 3105.498 119.055 6091.941 51.16912 0.503483 1.904594   3105.498 0.503483   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"fl.report requires flFitRes object creates report PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"","code":"fl.report(   flFitRes,   out.dir = tempdir(),   out.nm = NULL,   ec50 = FALSE,   format = c(\"pdf\", \"html\"),   export = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"flFitRes grofit object created fl.workflow. .dir (Character) path name folder report files created.  NULL, folder named combination 'Report.fluorescence_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'FluorescenceReport_' current date time. ec50 (Logical) Display results dose-response analysis (TRUE) (FALSE). format (Character) Define file format report, PDF ('pdf') /HTML ('html'). Default: (c('pdf', 'html')) export (Logical) Shall plots generated report exported individual PDF PNG files TRUE FALSE? parallelize (Logical) Create plots using one available processor cores (TRUE) single core (FALSE). ... arguments passed create report. Currently required: mean.grp: Define groups combine common plots report based sample identifiers. Partial matches sample/group names accepted. Can '', vector strings, list string vectors. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc: Define concentrations combine common plots  report. Can numeric vector, list numeric vectors.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"","code":"# load example dataset # \\donttest{ input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = 's',                    x_type = 'time', norm_fl = TRUE,                    dr.parameter = 'max_slope.spline',                    suppress.messages = TRUE,                    parallelize = FALSE)  fl.report(res, out.dir = tempdir(), parallelize = FALSE) #> Error in fl.report(res, out.dir = tempdir(), parallelize = FALSE): TinyTex was not found on your system. To render PDF reports, please execute tinytex::install_tinytex(). # }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"fl.workflow runs fl.control create fl.control object performs computational fitting operations based user input. Finally, desired, final report created PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"","code":"fl.workflow(   grodata = NULL,   time = NULL,   growth = NULL,   fl_data = NULL,   ec50 = TRUE,   mean.grp = NA,   mean.conc = NA,   fit.opt = c(\"l\", \"s\"),   x_type = c(\"growth\", \"time\"),   norm_fl = TRUE,   t0 = 0,   tmax = NA,   min.growth = 0,   max.growth = NA,   log.x.lin = FALSE,   log.x.spline = FALSE,   log.y.lin = FALSE,   log.y.spline = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.07,   lin.dY = 0.05,   biphasic = FALSE,   interactive = FALSE,   dr.parameter = \"max_slope.spline\",   dr.method = c(\"model\", \"spline\"),   dr.have.atleast = 5,   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   nboot.fl = 0,   smooth.fl = 0.75,   growth.thresh = 1.5,   suppress.messages = FALSE,   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   report = NULL,   out.dir = NULL,   out.nm = NULL,   export.fig = FALSE,   export.res = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"grodata grodata object created read_data parse_data, containing fluorescence data data independent variable (.e., time growth). time (optional) matrix containing time values sample (fl_data dataframe provided separate argument). growth (optional) dataframe containing growth data (fl_data matrix provided separate argument). fl_data (optional) dataframe containing fluorescence data (time matrix growth dataframe provided separate argument). ec50 (Logical) Perform dose-response analysis (TRUE) (FALSE). mean.grp (\"\", string vector, list string vectors) Define groups combine common plots final report based sample identifiers (report == TRUE). Partial matches sample/group names accepted. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option \"\" produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc (numeric vector, list numeric vectors) Define concentrations combine common plots final report (report == TRUE). fit.opt (Character character vector) Indicates whether program perform linear regression (\"l\"), model fit (\"m\"), spline fit (\"s\"), (\"\"). Combinations can freely chosen providing character vector, e.g. fit.opt = c(\"l\", \"s\") Default:  fit.opt = c(\"l\", \"s\"). x_type (Character) data type shall used independent variable? Options 'growth' 'time'. norm_fl (Logical) use normalized (growth) fluorescence data fits. effect x_type = 'time' t0 (Numeric) Minimum time value considered linear spline fits (x_type = 'time'). tmax (Numeric) Maximum time value considered linear spline fits (x_type = 'time').. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits (x_type = 'growth'). max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits (x_type = 'growth'). log.x.lin (Logical) Indicates whether ln(x+1) applied independent variable linear fits. Default: FALSE. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied fluorescence data linear fits. Default: FALSE log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE lin.h (Numeric) Manually define size sliding window used flFitLinear. NULL, h calculated samples based number measurements fluorescence increase phase plot. lin.R2 (Numeric) R2 threshold flFitLinear. lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope flFitLinear. lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? interactive (Logical) Controls whether fit sample method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: \"max_slope.spline\", represents maximum slope spline fit Typical options include: \"max_slope.linfit\", \"dY.linfit\", \"max_slope.spline\", \"dY.spline\". dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data (\"spline\") fit biosensor response model (proposed Meyer et al., 2019). dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. nboot.fl (Numeric) Number bootstrap samples used nonparametric curve fitting flBootSpline. Use nboot.fl = 0 disable bootstrap. Default: 0 smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. suppress.messages (Logical) Indicates whether messages (information current fluorescence curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. neg.nan.act (Logical) Indicates whether program stop negative fluorescence values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. report (Character NULL) Create PDF ('pdf') /HTML ('html') report running computations. Define NULL report created. Default: (c('pdf', 'html')) .dir Character NULL Define name folder result files (tables reports) stored. NULL, folder named combination \"FluorescenceResults_\" current date time. .nm Character NULL Define name report files. NULL, files named combination \"FluorescenceReport_\" current date time. export.fig (Logical) Export figures created report separate PNG PDF files (TRUE) (FALSE). effective report = TRUE. export.res (Logical) Create tab-separated TXT files containing calculated parameters dose-response analysis results well .RData file resulting flFitRes object. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"flFitRes object contains computation results, compatible various plotting functions QurvE package fl.report. time Raw time matrix passed function time (grofit object provided. Else, extracted grofit). data Raw data dataframe passed function grodata. flFit flFit object created call flFit fluorescence data. drFit drFit drFitfl object created call growth.drFit fl.drFit fluorescence data (based dr.method argument control; see fl.control). expdesign Experimental design table inherited grodata created identifier columns (columns 1-3) data. control Object class fl.control created call fl.control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot(res, data.type = \"raw\", legend.ncol = 3, basesize = 15) #> Warning: Derivatives cannot be calculated for 'raw' or 'norm.fl' data. Only the fluorescence values will be shown."},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"flBootSpline: Function to generate a bootstrap — flBootSpline","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"fl.gcBootSpline resamples fluorescence-'x' value pairs dataset replacement performs spline fit bootstrap sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"","code":"flBootSpline(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   control = fl.control() )"},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"time Vector independent variable: time (x_type = 'time' fl.control object. growth Vector independent variable: growth (x_type = 'growth' fl.control object. fl_data Vector dependent variable: fluorescence. ID (Character) name analyzed sample. control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"gcBootSpline object containing distribution fluorescence parameters flFitSpline object bootstrap sample. Use plot.gcBootSpline visualize bootstrapping splines well distribution physiological parameters. raw.x Raw time values provided function time. raw.fl Raw growth data provided function data. ID (Character) Identifies tested sample. boot.x Table time values per column, resulting spline fit bootstrap. boot.fl Table growth values per column, resulting spline fit bootstrap. boot.flSpline List flFitSpline object, created flFitSpline resample bootstrap. lambda Vector estimated lambda (lag time) values bootstrap entry. max_slope Vector estimated max_slope (maximum slope) values bootstrap entry. Vector estimated (maximum fluorescence) values bootstrap entry. integral Vector estimated integral values bootstrap entry. bootFlag (Logical) Indicates success bootstrapping operation. control Object class fl.control containing list options passed function control.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time',                        nboot.fl = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"flFit performs computational fluorescence fitting operations based user input.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"","code":"flFit(   fl_data,   time = NULL,   growth = NULL,   control = fl.control(),   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"fl_data Either... grodata object created read_data parse_data, list containing 'time' matrix (x_type == \"time\") 'growth' dataframe (x_type == \"growth\") 'fluorescence' dataframes, dataframe containing (normalized) fluorescence values (time matrix growth dataframe provided separate argument). time (optional) matrix containing time values sample. growth (optional) dataframe containing growth values sample sample identifiers first three columns. control fl.control object created fl.control, defining relevant fitting options. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"flFit object contains fluorescence fitting results, compatible various plotting functions QurvE package. raw.x Raw x matrix passed function time (x_type = 'time') growth (x_type = 'growth'). raw.fl Raw growth dataframe passed function data. flTable Table fluorescence parameters related statistics fluorescence curve evaluation performed function. table, also returned generic summary.flFit method applied flFit object, used input fl.drFit. flFittedLinear List flFitLinear objects, generated call flFitLinear. Note: access object list via double brace: flFittedLinear[[#n]]. flFittedSplines List flFitSpline objects, generated call flFitSpline. Note: access object via double brace: flFittedSplines[[#n]]. flBootSplines List flBootSpline objects, generated call flBootSpline. Note: access object via double brace: flFittedSplines[[#n]]. control Object class fl.control containing list options passed function control.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = \"s\",              x_type = \"time\", norm_fl = TRUE,              dr.parameter = \"max_slope.spline\",              dr.method = \"model\",              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              control = control,              parallelize = FALSE)  summary(res) #>            TestId AddId concentration reliability_tag log.x.spline log.y.spline #> 1    pSEVA634∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 2   pSEVA634r∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 3  pSEVA634rκ∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 4    pSEVA634∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 5   pSEVA634r∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 6  pSEVA634rκ∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 7    pSEVA634∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 8   pSEVA634r∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 9  pSEVA634rκ∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 10   pSEVA634∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 11  pSEVA634r∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 12 pSEVA634rκ∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 13   pSEVA634∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 14  pSEVA634r∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 15 pSEVA634rκ∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 16   pSEVA634∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 17  pSEVA634r∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 18 pSEVA634rκ∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 19   pSEVA634∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 20  pSEVA634r∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 21 pSEVA634rκ∙GFP  <NA>             1            TRUE        FALSE        FALSE #>    log.x.lin log.y.lin nboot.fl max_slope.linfit lambda.linfit dY.linfit #> 1      FALSE     FALSE        0                0          <NA>      <NA> #> 2      FALSE     FALSE        0                0          <NA>      <NA> #> 3      FALSE     FALSE        0                0          <NA>      <NA> #> 4      FALSE     FALSE        0                0          <NA>      <NA> #> 5      FALSE     FALSE        0                0          <NA>      <NA> #> 6      FALSE     FALSE        0                0          <NA>      <NA> #> 7      FALSE     FALSE        0                0          <NA>      <NA> #> 8      FALSE     FALSE        0                0          <NA>      <NA> #> 9      FALSE     FALSE        0                0          <NA>      <NA> #> 10     FALSE     FALSE        0                0          <NA>      <NA> #> 11     FALSE     FALSE        0                0          <NA>      <NA> #> 12     FALSE     FALSE        0                0          <NA>      <NA> #> 13     FALSE     FALSE        0                0          <NA>      <NA> #> 14     FALSE     FALSE        0                0          <NA>      <NA> #> 15     FALSE     FALSE        0                0          <NA>      <NA> #> 16     FALSE     FALSE        0                0          <NA>      <NA> #> 17     FALSE     FALSE        0                0          <NA>      <NA> #> 18     FALSE     FALSE        0                0          <NA>      <NA> #> 19     FALSE     FALSE        0                0          <NA>      <NA> #> 20     FALSE     FALSE        0                0          <NA>      <NA> #> 21     FALSE     FALSE        0                0          <NA>      <NA> #>    A.linfit x.mu.start.linfit x.mu.end.linfit r2mu.linfit reliable_fit.linfit #> 1      <NA>              <NA>            <NA>        <NA>               FALSE #> 2      <NA>              <NA>            <NA>        <NA>               FALSE #> 3      <NA>              <NA>            <NA>        <NA>               FALSE #> 4      <NA>              <NA>            <NA>        <NA>               FALSE #> 5      <NA>              <NA>            <NA>        <NA>               FALSE #> 6      <NA>              <NA>            <NA>        <NA>               FALSE #> 7      <NA>              <NA>            <NA>        <NA>               FALSE #> 8      <NA>              <NA>            <NA>        <NA>               FALSE #> 9      <NA>              <NA>            <NA>        <NA>               FALSE #> 10     <NA>              <NA>            <NA>        <NA>               FALSE #> 11     <NA>              <NA>            <NA>        <NA>               FALSE #> 12     <NA>              <NA>            <NA>        <NA>               FALSE #> 13     <NA>              <NA>            <NA>        <NA>               FALSE #> 14     <NA>              <NA>            <NA>        <NA>               FALSE #> 15     <NA>              <NA>            <NA>        <NA>               FALSE #> 16     <NA>              <NA>            <NA>        <NA>               FALSE #> 17     <NA>              <NA>            <NA>        <NA>               FALSE #> 18     <NA>              <NA>            <NA>        <NA>               FALSE #> 19     <NA>              <NA>            <NA>        <NA>               FALSE #> 20     <NA>              <NA>            <NA>        <NA>               FALSE #> 21     <NA>              <NA>            <NA>        <NA>               FALSE #>    max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1               <NA>               <NA>             <NA>         <NA> #> 2               <NA>               <NA>             <NA>         <NA> #> 3               <NA>               <NA>             <NA>         <NA> #> 4               <NA>               <NA>             <NA>         <NA> #> 5               <NA>               <NA>             <NA>         <NA> #> 6               <NA>               <NA>             <NA>         <NA> #> 7               <NA>               <NA>             <NA>         <NA> #> 8               <NA>               <NA>             <NA>         <NA> #> 9               <NA>               <NA>             <NA>         <NA> #> 10              <NA>               <NA>             <NA>         <NA> #> 11              <NA>               <NA>             <NA>         <NA> #> 12              <NA>               <NA>             <NA>         <NA> #> 13              <NA>               <NA>             <NA>         <NA> #> 14              <NA>               <NA>             <NA>         <NA> #> 15              <NA>               <NA>             <NA>         <NA> #> 16              <NA>               <NA>             <NA>         <NA> #> 17              <NA>               <NA>             <NA>         <NA> #> 18              <NA>               <NA>             <NA>         <NA> #> 19              <NA>               <NA>             <NA>         <NA> #> 20              <NA>               <NA>             <NA>         <NA> #> 21              <NA>               <NA>             <NA>         <NA> #>    reliable_fit2.linfit max_slope.spline x.max.spline     lambda.spline #> 1                 FALSE 92.2668917228847         20.5  15.5467166096294 #> 2                 FALSE 30.7727385498294           20  31.2872267087641 #> 3                 FALSE 64.1757831646195           16  20.8131240327289 #> 4                 FALSE 242.557704041626         23.5   14.982628746023 #> 5                 FALSE 64.6529094536605           19  21.6712998092256 #> 6                 FALSE 205.579719130273           18  12.5662904914231 #> 7                 FALSE 509.394721871828         21.5  6.95952698278091 #> 8                 FALSE 204.031623957349         17.5  13.4360564669416 #> 9                 FALSE 290.961299939404           13  4.67379381987626 #> 10                FALSE 670.985334314906            6 0.373248436531125 #> 11                FALSE 327.194544214636           17  9.86802427129631 #> 12                FALSE  335.24358478568         17.5  3.65080407904796 #> 13                FALSE 728.625260083634          6.5 0.553816578577824 #> 14                FALSE 346.268113254507         16.5  9.75821807365783 #> 15                FALSE 320.246598452139         17.5  3.21350390586807 #> 16                FALSE  774.05398642078          5.5 0.246732777852533 #> 17                FALSE 337.909403917534         16.5  8.08916482172041 #> 18                FALSE 351.643501664612           18  4.84484452250892 #> 19                FALSE 779.134078966909            6 0.462268482214904 #> 20                FALSE 353.185039298395         16.5   9.5717850859864 #> 21                FALSE 338.826806405161           18  5.01597033523556 #>    max_slope2.spline x.max2.spline lambda2.spline        y0.spline #> 1               <NA>          <NA>           <NA>  1291.4242870252 #> 2               <NA>          <NA>           <NA> 1188.27831547782 #> 3               <NA>          <NA>           <NA> 1565.59217809736 #> 4               <NA>          <NA>           <NA> 1519.80363776351 #> 5               <NA>          <NA>           <NA>  1255.7213080438 #> 6               <NA>          <NA>           <NA> 1624.15289883901 #> 7               <NA>          <NA>           <NA> 1132.18524639308 #> 8               <NA>          <NA>           <NA> 1405.71652864703 #> 9               <NA>          <NA>           <NA> 1468.52438340082 #> 10              <NA>          <NA>           <NA> 1209.47395589045 #> 11              <NA>          <NA>           <NA> 1187.83879461914 #> 12              <NA>          <NA>           <NA> 1467.93981010311 #> 13              <NA>          <NA>           <NA> 891.795404947046 #> 14              <NA>          <NA>           <NA> 1282.77700477438 #> 15              <NA>          <NA>           <NA> 1542.64869773804 #> 16              <NA>          <NA>           <NA> 1132.44043950227 #> 17              <NA>          <NA>           <NA> 862.662992687727 #> 18              <NA>          <NA>           <NA> 1602.42470098365 #> 19              <NA>          <NA>           <NA> 1017.04362101536 #> 20              <NA>          <NA>           <NA>  1323.6959493112 #> 21              <NA>          <NA>           <NA> 1707.52183129309 #>            A.spline        dY.spline  integral.spline reliable_fit.spline #> 1   3427.1255242313  2135.7012372061  82881.406474157                TRUE #> 2  1470.99207749982 282.713762021994 43222.9360971386                TRUE #> 3  2196.18856426073 630.596386163366 67033.6678589485                TRUE #> 4  7592.80063751346 6072.99699974995 151370.675832012                TRUE #> 5  2384.30375521349 1128.58244716969 58249.0814015737                TRUE #> 6  4820.28715109276 3196.13425225375 132414.081549265                TRUE #> 7  17121.2144379564 15989.0291915634 367233.851934483                TRUE #> 8    5206.543176868 3800.82664822097 120525.231431367                TRUE #> 9  7768.18866992603 6299.66428652521  223919.42858498                TRUE #> 10 20079.0095008516 18869.5355449612 490254.828661569                TRUE #> 11 6840.37784263295 5652.53904801381 169914.301957325                TRUE #> 12 9191.86346478591  7723.9236546828 269744.222628614                TRUE #> 13  20481.097768094  19589.302363147 497122.375105375                TRUE #> 14 7000.84532046262 5718.06831568824 179100.135589319                TRUE #> 15 9006.21056404733 7463.56186630929 267724.576457373                TRUE #> 16 20704.0909872879 19571.6505477857 520199.730690857                TRUE #> 17 6952.68659445902 6090.02360177129 178120.140852737                TRUE #> 18 9322.62835009364 7720.20364910999  273698.19440202                TRUE #> 19  19774.702139564 18757.6585185487 508722.732093212                TRUE #> 20 7189.59680355244 5865.90085424124 182547.707805716                TRUE #> 21 9258.53106887529 7551.00923758219 271383.083788705                TRUE #>    reliable_fit2.spline smooth.spline max_slope.bt lambda.bt A.bt dY.bt #> 1                 FALSE          0.75           NA        NA   NA    NA #> 2                 FALSE          0.75           NA        NA   NA    NA #> 3                 FALSE          0.75           NA        NA   NA    NA #> 4                 FALSE          0.75           NA        NA   NA    NA #> 5                 FALSE          0.75           NA        NA   NA    NA #> 6                 FALSE          0.75           NA        NA   NA    NA #> 7                 FALSE          0.75           NA        NA   NA    NA #> 8                 FALSE          0.75           NA        NA   NA    NA #> 9                 FALSE          0.75           NA        NA   NA    NA #> 10                FALSE          0.75           NA        NA   NA    NA #> 11                FALSE          0.75           NA        NA   NA    NA #> 12                FALSE          0.75           NA        NA   NA    NA #> 13                FALSE          0.75           NA        NA   NA    NA #> 14                FALSE          0.75           NA        NA   NA    NA #> 15                FALSE          0.75           NA        NA   NA    NA #> 16                FALSE          0.75           NA        NA   NA    NA #> 17                FALSE          0.75           NA        NA   NA    NA #> 18                FALSE          0.75           NA        NA   NA    NA #> 19                FALSE          0.75           NA        NA   NA    NA #> 20                FALSE          0.75           NA        NA   NA    NA #> 21                FALSE          0.75           NA        NA   NA    NA #>    integral.bt stdmax_slope.bt stdlambda.bt stdA.bt stddY.bt stdintegral.bt #> 1           NA              NA           NA      NA       NA             NA #> 2           NA              NA           NA      NA       NA             NA #> 3           NA              NA           NA      NA       NA             NA #> 4           NA              NA           NA      NA       NA             NA #> 5           NA              NA           NA      NA       NA             NA #> 6           NA              NA           NA      NA       NA             NA #> 7           NA              NA           NA      NA       NA             NA #> 8           NA              NA           NA      NA       NA             NA #> 9           NA              NA           NA      NA       NA             NA #> 10          NA              NA           NA      NA       NA             NA #> 11          NA              NA           NA      NA       NA             NA #> 12          NA              NA           NA      NA       NA             NA #> 13          NA              NA           NA      NA       NA             NA #> 14          NA              NA           NA      NA       NA             NA #> 15          NA              NA           NA      NA       NA             NA #> 16          NA              NA           NA      NA       NA             NA #> 17          NA              NA           NA      NA       NA             NA #> 18          NA              NA           NA      NA       NA             NA #> 19          NA              NA           NA      NA       NA             NA #> 20          NA              NA           NA      NA       NA             NA #> 21          NA              NA           NA      NA       NA             NA #>    reliable_fit.bt ci90.mu.bt.lo ci90.mu.bt.up ci90.lambda.bt.lo #> 1               NA            NA            NA                NA #> 2               NA            NA            NA                NA #> 3               NA            NA            NA                NA #> 4               NA            NA            NA                NA #> 5               NA            NA            NA                NA #> 6               NA            NA            NA                NA #> 7               NA            NA            NA                NA #> 8               NA            NA            NA                NA #> 9               NA            NA            NA                NA #> 10              NA            NA            NA                NA #> 11              NA            NA            NA                NA #> 12              NA            NA            NA                NA #> 13              NA            NA            NA                NA #> 14              NA            NA            NA                NA #> 15              NA            NA            NA                NA #> 16              NA            NA            NA                NA #> 17              NA            NA            NA                NA #> 18              NA            NA            NA                NA #> 19              NA            NA            NA                NA #> 20              NA            NA            NA                NA #> 21              NA            NA            NA                NA #>    ci90.lambda.bt.up ci90.A.bt.lo ci90.A.bt.up ci90.integral.bt.lo #> 1                 NA           NA           NA                  NA #> 2                 NA           NA           NA                  NA #> 3                 NA           NA           NA                  NA #> 4                 NA           NA           NA                  NA #> 5                 NA           NA           NA                  NA #> 6                 NA           NA           NA                  NA #> 7                 NA           NA           NA                  NA #> 8                 NA           NA           NA                  NA #> 9                 NA           NA           NA                  NA #> 10                NA           NA           NA                  NA #> 11                NA           NA           NA                  NA #> 12                NA           NA           NA                  NA #> 13                NA           NA           NA                  NA #> 14                NA           NA           NA                  NA #> 15                NA           NA           NA                  NA #> 16                NA           NA           NA                  NA #> 17                NA           NA           NA                  NA #> 18                NA           NA           NA                  NA #> 19                NA           NA           NA                  NA #> 20                NA           NA           NA                  NA #> 21                NA           NA           NA                  NA #>    ci90.integral.bt.up ci95.mu.bt.lo ci95.mu.bt.up ci95.lambda.bt.lo #> 1                   NA            NA            NA                NA #> 2                   NA            NA            NA                NA #> 3                   NA            NA            NA                NA #> 4                   NA            NA            NA                NA #> 5                   NA            NA            NA                NA #> 6                   NA            NA            NA                NA #> 7                   NA            NA            NA                NA #> 8                   NA            NA            NA                NA #> 9                   NA            NA            NA                NA #> 10                  NA            NA            NA                NA #> 11                  NA            NA            NA                NA #> 12                  NA            NA            NA                NA #> 13                  NA            NA            NA                NA #> 14                  NA            NA            NA                NA #> 15                  NA            NA            NA                NA #> 16                  NA            NA            NA                NA #> 17                  NA            NA            NA                NA #> 18                  NA            NA            NA                NA #> 19                  NA            NA            NA                NA #> 20                  NA            NA            NA                NA #> 21                  NA            NA            NA                NA #>    ci95.lambda.bt.up ci95.A.bt.lo ci95.A.bt.up ci95.integral.bt.lo #> 1                 NA           NA           NA                  NA #> 2                 NA           NA           NA                  NA #> 3                 NA           NA           NA                  NA #> 4                 NA           NA           NA                  NA #> 5                 NA           NA           NA                  NA #> 6                 NA           NA           NA                  NA #> 7                 NA           NA           NA                  NA #> 8                 NA           NA           NA                  NA #> 9                 NA           NA           NA                  NA #> 10                NA           NA           NA                  NA #> 11                NA           NA           NA                  NA #> 12                NA           NA           NA                  NA #> 13                NA           NA           NA                  NA #> 14                NA           NA           NA                  NA #> 15                NA           NA           NA                  NA #> 16                NA           NA           NA                  NA #> 17                NA           NA           NA                  NA #> 18                NA           NA           NA                  NA #> 19                NA           NA           NA                  NA #> 20                NA           NA           NA                  NA #> 21                NA           NA           NA                  NA #>    ci95.integral.bt.up #> 1                   NA #> 2                   NA #> 3                   NA #> 4                   NA #> 5                   NA #> 6                   NA #> 7                   NA #> 8                   NA #> 9                   NA #> 10                  NA #> 11                  NA #> 12                  NA #> 13                  NA #> 14                  NA #> 15                  NA #> 16                  NA #> 17                  NA #> 18                  NA #> 19                  NA #> 20                  NA #> 21                  NA"},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Data fit via a heuristic linear method — flFitLinear","title":"Data fit via a heuristic linear method — flFitLinear","text":"Determine maximum slopes using heuristic approach similar ``growth rates made easy''-method Hall et al. (2013).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data fit via a heuristic linear method — flFitLinear","text":"","code":"flFitLinear(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   quota = 0.95,   control = fl.control(x_type = c(\"growth\", \"time\"), log.x.lin = FALSE, log.y.lin =     FALSE, t0 = 0, min.growth = NA, lin.h = NULL, lin.R2 = 0.98, lin.RSD = 0.05, lin.dY =     0.05, biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data fit via a heuristic linear method — flFitLinear","text":"time Vector independent time variable (x_type = \"time\" control object). growth Vector independent time growth (x_type = \"growth\" control object). fl_data Vector dependent fluorescence variable. ID (Character) name analyzed sample. quota (Numeric, 0 1) Define fraction max_slope slope regression windows adjacent window highest slope included overall linear fit. control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data fit via a heuristic linear method — flFitLinear","text":"gcFitLinear object parameters fit. lag time estimated intersection fit horizontal line \\(y=y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize linear fit. raw.x Filtered x values used spline fit. raw.fl Filtered fluorescence values used spline fit. filt.x Filtered x values. filt.fl Filtered fluorescence values. ID (Character) Identifies tested sample. FUN Linear function used plotting tangent mumax. fit lm object; result final call lm perform linear regression. par List determined fluorescence parameters. y0: Minimum fluorescence value considered heuristic linear method. dY: Difference maximum fluorescence minimum fluorescence : Maximum fluorescence y0_lm: Intersection linear fit abscissa. max_slope: Maximum slope linear fit. tD: Doubling time. slope.se: Standard error maximum slope. lag: Lag X. x.max_start: X value first data point within window used linear regression. x.max_end: X value last data point within window used linear regression. x.turn: biphasic: X inflection point separates two phases. max.slope2: biphasic: Slope second phase. tD2: Doubling time second phase. y0_lm2: biphasic: Intersection linear fit second phase abscissa. lag2: biphasic: Lag time determined second phase.. x.max2_start: biphasic: X value first data point within window used linear regression second phase. x.max2_end: biphasic: X value last data point within window used linear regression second phase. ndx Index data points used linear regression. ndx2 Index data points used linear regression second phase. control Object class grofit.control containing list options passed function control. rsquared R2 linear regression. rsquared2 R2 linear regression second phase. fitFlag (Logical) Indicates whether linear regression successfully performed data. fitFlag2 (Logical) Indicates whether second phase identified. reliable (Logical) Indicates whether performed fit reliable (set manually).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data fit via a heuristic linear method — flFitLinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, DOI: 10.1093/molbev/mst187 Petzoldt T (2022). growthrates: Estimate Growth Rates Experimental Data. R package version 0.8.3, https://CRAN.R-project.org/package=growthrates.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data fit via a heuristic linear method — flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"l\", x_type = \"time\",                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on fluorescence data — flFitSpline","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"flFitSpline performs smooth spline fit dataset determines greatest slope global maximum first derivative spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"","code":"flFitSpline(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   control = fl.control(biphasic = FALSE, x_type = c(\"growth\", \"time\"), log.x.spline =     FALSE, log.y.spline = FALSE, smooth.fl = 0.75, t0 = 0, min.growth = NA) )"},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"time Vector independent variable: time (x_type = 'time' fl.control object. growth Vector independent variable: growth (x_type = 'growth' fl.control object. fl_data Vector dependent variable: fluorescence. ID (Character) name analyzed sample. control fl.control object created fl.control, defining relevant fitting options. biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? x_type (Character) data type shall used independent variable? Options 'growth' 'time'. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 t0 (Numeric) Minimum time value considered linear spline fits. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"flFitSpline object. lag time estimated intersection tangent maximum slope horizontal line \\(y = y_0\\), y0 first value dependent variable. Use plot.flFitSpline visualize spline fit derivative time. x.Raw x values provided function time growth. fl.Raw fluorescence data provided function fl_data. raw.x Filtered x values used spline fit. raw.fl Filtered fluorescence values used spline fit. ID (Character) Identifies tested sample. fit.x Fitted x values. fit.fl Fitted fluorescence values. parameters List determined parameters. : Maximum fluorescence. dY: Difference maximum fluorescence minimum fluorescence. max_slope: Maximum slope fluorescence-vs.-x data (.e., maximum first derivative spline). x.max: Time maximum slope. lambda: Lag time. b.tangent: Intersection tangent maximum slope abscissa. max_slope2: biphasic course fluorescence: Maximum slope fluorescence-vs.-x data second phase. lambda2: biphasic course fluorescence: Lag time determined second phase. x.max2: biphasic course fluorescence: Time maximum slope second phase. b.tangent2: biphasic course fluorescence: Intersection tangent maximum slope second phase abscissa. integral: Area curve spline fit. spline smooth.spline object generated smooth.spline function. spline.deriv1 list time ('x') growth ('y') values describing first derivative spline fit. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether spline fit successfully performed data. fitFlag2 (Logical) Indicates whether second phase identified. control Object class fl.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"biphasic = TRUE, following steps performed define second phase: Determine local minima within first derivative smooth spline fit. Remove 'peak' containing highest value first derivative (.e., \\(mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(mu_{max}\\). Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time'))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grofit.control object. — growth.control","title":"Create a grofit.control object. — growth.control","text":"grofit.control object required perform various computations growth data stored within grodata objects (created read_data parse_data). grofit.control object created automatically part growth.workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grofit.control object. — growth.control","text":"","code":"growth.control(   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   suppress.messages = FALSE,   fit.opt = c(\"a\"),   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.gc = FALSE,   log.y.lin = TRUE,   log.y.spline = TRUE,   log.y.model = TRUE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.1,   lin.dY = 0.05,   biphasic = FALSE,   interactive = FALSE,   nboot.gc = 0,   smooth.gc = 0.55,   model.type = c(\"logistic\", \"richards\", \"gompertz\", \"gompertz.exp\", \"huang\", \"baranyi\"),   dr.method = c(\"model\", \"spline\"),   dr.model = c(\"gammadr\", \"multi2\", \"LL.2\", \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\",     \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\", \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\",     \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),   dr.have.atleast = 6,   dr.parameter = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu.spline\",     \"lambda.spline\", \"dY.spline\", \"A.spline\", \"mu.model\", \"lambda.model\",     \"dY.orig.model\", \"A.orig.model\"),   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   growth.thresh = 1.5 )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grofit.control object. — growth.control","text":"neg.nan.act (Logical) Indicates whether program stop negative growth values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. suppress.messages (Logical) Indicates whether messages (information current growth curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed processing high throughput data. Note: warnings still displayed. Default: FALSE. fit.opt (Character character vector) Indicates whether program perform linear regression ('l'), model fit ('m'), spline fit ('s'), (''). Combinations can freely chosen providing character vector, e.g. fit.opt = c('l', 's') Default:  fit.opt = c('l', 's'). t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Maximum time value considered linear spline fits. min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE log.y.spline (Logical) Indicates whether ln(y/y0) applied growth data spline fits. Default: TRUE log.y.model (Logical) Indicates whether ln(y/y0) applied growth data model fits. Default: TRUE lin.h (Numeric) Manually define size sliding window used growth.gcFitLinear NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). biphasic (Logical) Shall growth.gcFitLinear growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)? interactive (Logical) Controls whether fit growth curve method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.gc (Numeric) Number bootstrap samples used nonparametric growth curve fitting growth.gcBootSpline. Use nboot.gc = 0 disable bootstrap. Default: 0 smooth.gc (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating growth rates) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 model.type (Character) Vector providing names parametric models fitted data. Default: c('logistic', 'richards', 'gompertz', 'gompertz.exp', 'huang', 'baranyi'). dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grofit.control object. — growth.control","text":"Generates list arguments described entries.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a grofit.control object. — growth.control","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a grofit.control object. — growth.control","text":"","code":"# default option control_default <- growth.control() # user defined control_manual <- growth.control(fit.opt = c('s', 'm'),                                  smooth.gc = 0.5,                                  model.type = c('huang', 'baranyi'))"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"growth.drBootSpline resamples values dataset replacement performs spline fit bootstrap sample determine EC50.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"","code":"growth.drBootSpline(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"object class drBootSpline containing distribution growth parameters drFitSpline object bootstrap sample. Use plot.drBootSpline visualize bootstrapping splines well distribution EC50. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition. boot.conc Table concentration values per column, resulting spline fit bootstrap. boot.test Table response values per column, resulting spline fit bootstrap. boot.drSpline List containing drFitSpline objects generated call growth.drFitSpline. ec50.boot Vector estimated EC50 values bootstrap entry. ec50y.boot Vector estimated response EC50 values bootstrap entry. BootFlag (Logical) Indicates success bootstrapping operation. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = 'test',                control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8,                                         nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.90397146252229 StDev :  0.127335173249381  #> 90% CI:  0.899782135322385 90% CI:  0.908160789722194 #> 95% CI:  0.898979923730914 95% CI:  0.908963001313666 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.46939075549932  #> 90% CI:  1.45906730888639 90% CI:  1.4797575411252 #> 95% CI:  1.45709540763377 95% CI:  1.48174762949799 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.9039715     0.1273352        0.5271628     0.09266642 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.6945051           1.113438          0.6543945           1.153548 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.469391                1.002718                2.044808 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1               0.9239772                2.169419 plot(TestRun, combine = TRUE)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"growth.drFit serves determine dose-response curves every condition dataset. response parameter can chosen every physiological parameter gcTable table obtained via growth.gcFit. growth.drFit calls functions growth.drFitSpline growth.drBootSpline, growth.drFitModel generate table estimates EC50 respecting statistics.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"","code":"growth.drFit(   gcTable,   control = growth.control(dr.method = \"model\", dr.model = c(\"gammadr\", \"multi2\", \"LL.2\",     \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\", \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\",     \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\", \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),     dr.have.atleast = 6, dr.parameter = \"mu.linear\", nboot.dr = 0, smooth.dr = NULL,     log.x.dr = FALSE, log.y.dr = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"gcTable dataframe containing data dose-response curve estimation. table class gcTable can obtained running growth.gcFit. control grofit.control object created growth.control, defining relevant fitting options. dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"object class drFit. raw.data Data passed function gcTable. drTable Dataframe containing condition identifiers, fit options, results dose-response analysis. drBootSplines List drBootSpline objects generated call growth.drBootSpline distinct experiment. drFittedSplines List drFitSpline objects generated call growth.drFitSpline distinct experiment. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,              control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1543335     0.002498265  0.1492447  0.1594223 #> 2 Test2 FALSE FALSE       0     0.1151834     0.001762493  0.1115933  0.1187734 #>       yEC50      test model #> 1 0.3351475 mu.spline  W1.3 #> 2 0.2374802 mu.spline  W1.3 plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"Fit various models response vs. concentration data single sample determine EC50.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"","code":"growth.drFitModel(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"drFitModel object.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = 'test')  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50      4.232999       0.0735813   4.077756   4.388242 0.4663847 mu.linfit #>        model #> e:1:50  W1.3 plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"growth.drFitSpline performs smooth spline fit determines EC50 concentration half-maximum value response parameter spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"","code":"growth.drFitSpline(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"drFitSpline object. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition fit.conc Fitted concentration values. fit.test Fitted response values. spline smooth.spline object generated smooth.spline function. spline.low x y values lowess spline fit raw data. Used call smooth.spline. parameters List parameters estimated dose response curve fit. EC50: Concentration half-maximal response. yEC50: Response value related EC50. EC50.orig: EC50 value original scale, transformation applied. yEC50.orig: Response value EC50 original scale, transformation applied. fitFlag (Logical) Indicates whether spline fitted successfully data. reliable (Logical) Indicates whether performed fit reliable (set manually). control Object class grofit.control containing list options passed function control. Use plot.drFitSpline visualize spline fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"spline fit smooth.spline, higher weights assigned data points concentration value 0, well x-y pairs response parameter value 0 pairs concentration values zero-response parameter values.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07 Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = 'test',               control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.65620394217305 yEC50 0.46573180574887 #> --> Original scale  #> xEC50 4.23938404192766 yEC50 0.46573180574887 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.656204 0.4657318  4.239384  0.4657318   NA  plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"growth.gcBootSpline resamples growth-time value pairs dataset replacement performs spline fit bootstrap sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"","code":"growth.gcBootSpline(time, data, gcID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"time Vector independent variable (usually: time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"gcBootSpline object containing distribution growth parameters gcFitSpline object bootstrap sample. Use plot.gcBootSpline visualize bootstrapping splines well distribution physiological parameters. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. gcID (Character) Identifies tested sample. boot.time Table time values per column, resulting spline fit bootstrap. boot.data Table growth values per column, resulting spline fit bootstrap. boot.gcSpline List gcFitSpline object, created growth.gcFitSpline resample bootstrap. lambda Vector estimated lambda (lag time) values bootstrap entry. mu Vector estimated mu (maximum growth rate) values bootstrap entry. Vector estimated (maximum growth) values bootstrap entry. integral Vector estimated integral values bootstrap entry. bootFlag (Logical) Indicates success bootstrapping operation. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = 'TestFit',               control = growth.control(fit.opt = 's', nboot.gc = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"growth.gcFit performs computational growth fitting operations based user input.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"","code":"growth.gcFit(time, data, control = growth.control(), parallelize = TRUE, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"time (optional) matrix containing time values sample. data Either... grodata object created read_data parse_data, list containing 'time' matrix well 'growth' , appropriate, 'fluorescence' dataframes, dataframe containing growth values (time matrix provided separate argument). control grofit.control object created growth.control, defining relevant fitting options. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"gcFit object contains growth fitting results, compatible various plotting functions QurvE package. raw.time Raw time matrix passed function time. raw.data Raw growth dataframe passed function data. gcTable Table growth parameters related statistics growth curve evaluation performed function. table, also returned generic summary.gcFit method applied gcFit object, used input growth.drFit. gcFittedLinear List gcFitLinear objects, generated call growth.gcFitLinear. Note: access object list via double brace: gcFittedLinear[[#n]]. gcFittedModels List gcFitModel objects, generated call growth.gcFitModel. Note: access object list via double brace: gcFittedModels[[#n]]. gcFittedSplines List gcFitSpline objects, generated call growth.gcFitSpline. Note: access object via double brace: gcFittedSplines[[#n]]. gcBootSplines List gcBootSpline objects, generated call growth.gcBootSpline. Note: access object via double brace: gcFittedSplines[[#n]]. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"","code":"# Create random growth data set   rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')   rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')    rnd.data <- list()   rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time)   rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow   res <- growth.gcFit(time = rnd.data$time,                       data = rnd.data$data,                       parallelize = FALSE,                       control = growth.control(suppress.messages = TRUE,                                                fit.opt = 's'))"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"Determine maximum growth rates log-linear part growth curve using heuristic approach similar ``growth rates made easy''-method Hall et al. (2013).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"","code":"growth.gcFitLinear(   time,   data,   gcID = \"undefined\",   quota = 0.95,   control = growth.control(t0 = 0, tmax = NA, log.x.gc = FALSE, log.y.lin = TRUE,     min.growth = NA, max.growth = NA, lin.h = NULL, lin.R2 = 0.97, lin.RSD = 0.1, lin.dY     = 0.05, biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"time Vector independent variable (usually: time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. quota (Numeric, 0 1) Define fraction \\(mu_{max}\\) slope regression windows adjacent window highest slope included overall linear fit. control grofit.control object created growth.control, defining relevant fitting options. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions. t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Minimum time value considered linear spline fits. lin.h (Numeric) Manually define size sliding window . NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Enter minimum percentage growth increase linear regression cover. biphasic (Logical) Shall growth.gcFitLinear try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"gcFitLinear object parameters fit. lag time estimated intersection fit horizontal line \\(y=y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize linear fit. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. filt.time Filtered time values used heuristic linear method. filt.data Filtered growth values. log.data Log-transformed, filtered growth values used heuristic linear method. gcID (Character) Identifies tested sample. FUN Linear function used plotting tangent mumax. fit lm object; result final call lm perform linear regression. par List determined growth parameters. y0: Minimum growth value considered heuristic linear method. dY: Difference maximum growth minimum growth. : Maximum growth. y0_lm: Intersection linear fit abscissa. mumax: Maximum growth rate (.e., slope linear fit). tD: Doubling time. mu.se: Standard error maximum growth rate. lag: Lag time. tmax_start: Time value first data point within window used linear regression. tmax_end: Time value last data point within window used linear regression. t_turn: biphasic growth: Time inflection point separates two growth phases. mumax2: biphasic growth: Growth rate second growth phase. tD2: Doubling time second growth phase. y0_lm2: biphasic growth: Intersection linear fit second growth phase abscissa. lag2: biphasic growth: Lag time determined second growth phase.. tmax2_start: biphasic growth: Time value first data point within window used linear regression second growth phase. tmax2_end: biphasic growth: Time value last data point within window used linear regression second growth phase. ndx Index data points used linear regression. ndx2 Index data points used linear regression second growth phase. control Object class grofit.control containing list options passed function control. rsquared R2 linear regression. rsquared2 R2 linear regression second growth phase. fitFlag (Logical) Indicates whether linear regression successfully performed data. fitFlag2 (Logical) Indicates whether second growth phase identified. reliable (Logical) Indicates whether performed fit reliable (set manually).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"algorithm works follows: Fit linear regressions (Theil-Sen estimator) subsets h consecutive, log-transformed data points (sliding window size h). example \\(h=5\\), fit linear regression points 1 ... 5, 2 ... 6, 3 ... 7 . Find subset highest slope \\(mu_{max}\\). R2 relative standard deviation (RSD) values regression meet lin.R2 lin.RSD defined thresholds data points within regression window account fraction least lin.dY total growth increase? , evaluate subset second highest slope, . Include also data points adjacent subsets slope least \\(quota \\cdot mu{max}\\), e.g., regression windows least 95% maximum slope. Fit new linear model extended data window identified step 3. biphasic = TRUE, following steps performed define second growth phase: Perform smooth spline fit data smoothing factor 0.5. Calculate second derivative spline fit perform smooth spline fit derivative smoothing factor 0.4. Determine local maxima minima second derivative. Find local minimum following \\(mu_{max}\\) repeat heuristic linear method later time values. Find local maximum \\(mu_{max}\\) repeat heuristic linear method earlier time values. Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, DOI: 10.1093/molbev/mst187 Petzoldt T (2022). growthrates: Estimate Growth Rates Experimental Data. R package version 0.8.3, https://CRAN.R-project.org/package=growthrates. Theil, H.(1992). rank-invariant method linear polynomial regression analysis. : Henri Theil’s contributions economics econometrics. Springer, pp. 345–381. DOI: 10.1007/978-94-011-2546-8_20","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"l\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit nonlinear growth models to growth data — growth.gcFitModel","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"growth.gcFitModel determines parametric growth model best describes data.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"","code":"growth.gcFitModel(time, data, gcID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"time Vector independent variable (usually time). data Vector dependent variable (usually growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"gcFitModel object contains physiological parameters information best fit. Use plot.gcFitModel visualize parametric fit growth equation. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. gcID (Character) Identifies tested sample. fit.time Fitted time values. fit.data Fitted growth values. parameters List determined growth parameters. : Maximum growth. dY: Difference maximum growth minimum growth fitted model. mu: Maximum growth rate (.e., maximum first derivative spline). lambda: Lag time. b.tangent: Intersection tangent maximum growth rate abscissa. fitpar: models: list additional parameters used equations describing growth curve. integral: Area curve parametric fit. model (Character) model obtained fit lowest AIC, determined AIC. nls nls object chosen model generated nls function. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether parametric model successfully fitted data. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'm')) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  plot(TestFit, basesize = 18, eq.size = 1.5) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on growth data — growth.gcFitSpline","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"growth.gcFitSpline performs smooth spline fit dataset determines highest growth rate global maximum first derivative spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"","code":"growth.gcFitSpline(   time,   data,   gcID = \"undefined\",   control = growth.control(biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"time Vector independent variable (usually time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options. biphasic (Logical) Shall growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"gcFitSpline object. lag time estimated intersection tangent maximum slope horizontal line \\(y = y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize spline fit derivative time. time.Raw time values provided function time. data.Raw growth data provided function data. raw.time Filtered time values used spline fit. raw.data Filtered growth values used spline fit. gcID (Character) Identifies tested sample. fit.time Fitted time values. fit.data Fitted growth values. parameters List determined growth parameters. : Maximum growth. dY: Difference maximum growth minimum growth. mu: Maximum growth rate (.e., maximum first derivative spline). tD: Doubling time. t.max: Time maximum growth rate. lambda: Lag time. b.tangent: Intersection tangent maximum growth rate abscissa. mu2: biphasic growth: Growth rate second growth phase. tD2: Doubling time second growth phase. lambda2: biphasic growth: Lag time determined second growth phase. t.max2: biphasic growth: Time maximum growth rate second growth phase. b.tangent2: biphasic growth: Intersection tangent maximum growth rate second growth phase abscissa. integral: Area curve spline fit. spline smooth.spline object generated smooth.spline function. spline.deriv1 list time ('x') growth ('y') values describing first derivative spline fit. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether spline fit successfully performed data. fitFlag2 (Logical) Indicates whether second growth phase identified. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"biphasic = TRUE, following steps performed define second growth phase: Determine local minima within first derivative smooth spline fit. Remove 'peak' containing highest value first derivative (.e., \\(mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(mu_{max}\\). Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform spline fit TestFit <- growth.gcFitSpline(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 's'))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"growth.report requires grofit object creates report PDF HTML format summarizes results.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"","code":"growth.report(   grofit,   out.dir = tempdir(),   out.nm = NULL,   ec50 = FALSE,   format = c(\"pdf\", \"html\"),   export = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"grofit grofit object created growth.workflow. .dir (Character) path name folder report files created.  NULL, folder named combination 'Report.growth_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'GrowthReport_' current date time. ec50 (Logical) Display results dose-response analysis (TRUE) (FALSE). format (Character) Define file format report, PDF ('pdf') /HTML ('html'). Default: (c('pdf', 'html')) export (Logical) Shall plots generated report exported individual PDF PNG files TRUE FALSE? parallelize (Logical) Create plots using one available processor cores (TRUE) single core (FALSE). ... arguments passed create report. Currently supported: mean.grp: Define groups combine common plots report based sample identifiers. Partial matches sample/group names accepted. Can '', string vector, list string vectors. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc: Define concentrations combine common plots  report. Can numeric vector, list numeric vectors.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"","code":"# \\donttest{ # Create random growth data set   rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')     # Run growth curve analysis workflow   res <- growth.workflow(time = rnd.data$time,                          data = rnd.data$data,                          fit.opt = 's',                          ec50 = FALSE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE)    growth.report(res, out.dir = tempdir(), parallelize = FALSE) #> Error in growth.report(res, out.dir = tempdir(), parallelize = FALSE): TinyTex was not found on your system. To render PDF reports, please execute tinytex::install_tinytex(). # }"},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"growth.workflow runs growth.control create grofit.control object performs computational fitting operations based user input. Finally, desired, final report created PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"","code":"growth.workflow(   grodata = NULL,   time = NULL,   data = NULL,   ec50 = TRUE,   mean.grp = NA,   mean.conc = NA,   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   suppress.messages = FALSE,   fit.opt = c(\"a\"),   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.gc = FALSE,   log.y.lin = TRUE,   log.y.spline = TRUE,   log.y.model = TRUE,   biphasic = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.1,   lin.dY = 0.05,   interactive = FALSE,   nboot.gc = 0,   smooth.gc = 0.55,   model.type = c(\"logistic\", \"richards\", \"gompertz\", \"gompertz.exp\", \"huang\", \"baranyi\"),   dr.method = c(\"model\", \"spline\"),   dr.model = c(\"gammadr\", \"multi2\", \"LL.2\", \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\",     \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\", \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\",     \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),   growth.thresh = 1.5,   dr.have.atleast = 6,   dr.parameter = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu.spline\",     \"lambda.spline\", \"dY.spline\", \"A.spline\", \"mu.model\", \"lambda.model\",     \"dY.orig.model\", \"A.orig.model\"),   smooth.dr = 0.1,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   report = NULL,   out.dir = NULL,   out.nm = NULL,   export.fig = FALSE,   export.res = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"grodata grodata object created read_data parse_data, list containing 'time' matrix well 'growth' dataframe. time (optional) matrix containing time values sample. data (optional) dataframe containing growth data (time matrix provided separate argument). ec50 (Logical) Perform dose-response analysis (TRUE) (FALSE). mean.grp ('', string vector, list string vectors) Define groups combine common plots final report based sample identifiers (report == TRUE). Partial matches sample/group names accepted. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc (numeric vector, list numeric vectors) Define concentrations combine common plots final report (report == TRUE). neg.nan.act (Logical) Indicates whether program stop negative growth values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. suppress.messages (Logical) Indicates whether grofit messages (information current growth curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. fit.opt (Character character vector) Indicates whether program perform linear regression ('l'), model fit ('m'), spline fit ('s'), (''). Combinations can freely chosen providing character vector, e.g. fit.opt = c('l', 's') Default:  fit.opt = c('l', 's'). t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Maximum time value considered linear spline fits. min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE log.y.spline (Logical) Indicates whether ln(y/y0) applied growth data spline fits. Default: TRUE log.y.model (Logical) Indicates whether ln(y/y0) applied growth data model fits. Default: TRUE biphasic (Logical) Shall growth.gcFitLinear growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)? lin.h (Numeric) Manually define size sliding window used growth.gcFitLinear NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). interactive (Logical) Controls whether fit growth curve method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.gc (Numeric) Number bootstrap samples used nonparametric growth curve fitting growth.gcBootSpline. Use nboot.gc = 0 disable bootstrap. Default: 0 smooth.gc (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating growth rates) produce error smooth.spline lead overestimation. usage fixed value recommended reproducible results across samples. See ?smooth.spline details. Default: 0.55 model.type (Character) Vector providing names parametric models fitted data. Default: c('logistic', 'richards', 'gompertz', 'gompertz.exp', 'huang', 'baranyi'). dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See documentation smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. report (Character NULL) Create PDF ('pdf') /HTML ('html') report running computations. Define NULL report created. Default: (c('pdf', 'html')) .dir Character NULL Define name folder result files stored. NULL, folder named combination 'GrowthResults_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'GrowthReport_' current date time. export.fig (Logical) Export figures created report separate PNG PDF files (TRUE) (FALSE). effective report = TRUE. export.res (Logical) Create tab-separated TXT files containing calculated growth parameters dose-response analysis results well .RData file resulting grofit object. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"grofit object contains computation results, compatible various plotting functions QurvE package growth.report. time Raw time matrix passed function time (grofit object provided). data Raw growth dataframe passed function data (grofit object provided). gcFit gcFit object created call growth.gcFit. drFit drFit object created call growth.drFit. expdesign Experimental design table inherited grodata created identifier columns (columns 1-3) data. control Object class grofit.control created call growth.control.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"","code":"# Create random growth data set   rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')   rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')    rnd.data <- list()   rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time)   rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)    # Run growth curve analysis workflow   res <- growth.workflow(time = rnd.data$time,                          data = rnd.data$data,                          fit.opt = 's',                          ec50 = FALSE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE)  # Load custom dataset   input <- read_data(data.growth = system.file('2-FMA_toxicity.csv', package = 'QurvE')) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.    res <- growth.workflow(grodata = input,                          fit.opt = 's',                          ec50 = TRUE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE) #> The chosen 'dr.parameter' is not compatible with the selected fitting options ('fit.opt'). Dose-response analysis will not be performed.    plot(res)"},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":null,"dir":"Reference","previous_headings":"","what":"Find indices of maxima an minima in a data series — inflect","title":"Find indices of maxima an minima in a data series — inflect","text":"Find indices maxima minima data series","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find indices of maxima an minima in a data series — inflect","text":"","code":"inflect(x, threshold = 1)"},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find indices of maxima an minima in a data series — inflect","text":"x vector values minima maxima threshold Threshold consider minima maxima","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find indices of maxima an minima in a data series — inflect","text":"list 1. vector minima 2. vector maxima.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find indices of maxima an minima in a data series — inflect","text":"Evan Friedland","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find indices of maxima an minima in a data series — inflect","text":"","code":"# Pick a desired threshold to plot up to n <- 3 # Generate Data randomwalk <- 100 + cumsum(rnorm(50, 0.2, 1)) # climbs upwards most of the time bottoms <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$minima) tops <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$maxima) # Color functions cf.1 <- grDevices::colorRampPalette(c('pink','red')) cf.2 <- grDevices::colorRampPalette(c('cyan','blue')) plot(randomwalk, type = 'l', main = 'Minima & Maxima\\nVariable Thresholds') for(i in 1:n){   points(bottoms[[i]], randomwalk[bottoms[[i]]], pch = 16, col = cf.1(n)[i], cex = i/1.5) } for(i in 1:n){   points(tops[[i]], randomwalk[tops[[i]]], pch = 16, col = cf.2(n)[i], cex = i/1.5) } legend('topleft', legend = c('Minima',1:n,'Maxima',1:n),        pch = rep(c(NA, rep(16,n)), 2), col = c(1, cf.1(n),1, cf.2(n)),        pt.cex =  c(rep(c(1, c(1:n) / 1.5), 2)), cex = .75, ncol = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for handling linear fits. — lm_parms","title":"Helper functions for handling linear fits. — lm_parms","text":"lm_window performs linear regression Theil-Sen estimator subset data.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for handling linear fits. — lm_parms","text":"","code":"lm_parms(m)  lm_window(x, y, i0, h = 5)"},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for handling linear fits. — lm_parms","text":"m linear model (lm) object x vector independent variable (e.g. time). y vector dependent variable (concentration organisms). i0 index first value used window. h window (number data).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for handling linear fits. — lm_parms","text":"linear model object class lm (lm_window) resp. vector parameters fit (lm_parms).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helper functions for handling linear fits. — lm_parms","text":"Hall, B. G., H. Acar M. Barlow 2013. Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-238 doi:10.1093/molbev/mst197","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for handling linear fits. — lm_parms","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- as.numeric(rnd.dataset$data[1,-(1:3)]) # Remove identifier columns data.log <- log(data/data[1])  # Perform linear fit on 8th window of size 8 linreg <- lm_window(time, data.log, 8, h=8)  summary(linreg) #>  #> Call: #> theil_sen_regression(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.038110 -0.008693  0.000000  0.033383  0.057862  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept) -0.15225    0.06206  -2.453   0.0496 * #> x            0.08196    0.02310   3.548   0.0121 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03743 on 6 degrees of freedom #> Multiple R-squared:  0.6772,\tAdjusted R-squared:  0.6234  #> F-statistic: 12.59 on 1 and 6 DF,  p-value: 0.0121 #>   lm_parms(linreg) #>           a           b        b.se          r2       b.rsd  #> -0.15225444  0.08195773  0.02309943  0.67722149  0.28184564"},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"Function estimate area curve given x y(x) values","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"","code":"low.integrate(x, y)"},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"x Numeric vector x values. y Numeric vector y values length x.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"Numeric value: Area smoothed spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"function uses R internal function smooth.spline.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- as.numeric(rnd.dataset$data[1,-(1:3)]) # Remove identifier columns  plot(time, data)   print(low.integrate(time, data)) #> [1] 84.69038"},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated with the ","title":"Extract relevant data from a raw data export file generated with the ","text":"Extract relevant data raw data export file generated \"Gen5\" \"Gen6\" software.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated with the ","text":"","code":"parse_Gen5Gen6(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated with the ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated with the ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated with the ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\") ) parsed <- parse_Gen5Gen6(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"parse_data takes raw export file plate reader experiment (similar device), extracts relevant information parses format required run growth.workflow. one read type found user prompted assign correct reads growth fluorescence.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"","code":"parse_data(   data.file = NULL,   map.file = NULL,   software = c(\"Gen5\", \"Gen6\", \"Biolector\", \"Chi.Bio\", \"GrowthProfiler\", \"Tecan\",     \"VictorNivo\", \"VictorX3\"),   convert.time = NULL,   sheet.data = 1,   sheet.map = 1,   csvsep.data = \";\",   dec.data = \".\",   csvsep.map = \";\",   dec.map = \".\",   subtract.blank = TRUE,   calib.growth = NULL,   calib.fl = NULL,   calib.fl2 = NULL,   fl.normtype = c(\"growth\", \"fl2\") )"},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"data.file (Character) table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing raw plate reader (similar device) data. map.file (Character) table file column format extension '.xlsx', '.xls', '.csv', '.tsv', '.txt'  'well', 'ID', 'replicate', 'concentration' first row. Used assign sample information wells plate. software (Character) name software/device used export plate reader data. convert.time (NULL string) Convert time values formula provided form 'y = function(x)'. example: convert.time = 'y = 24 * x' sheet.data, sheet.map (Numeric Character) Number name sheets XLS XLSX files containing experimental data mapping information, respectively (optional). csvsep.data, csvsep.map (Character) separator used CSV data files (ignored file types).  Default: \";\" dec.data, dec.map (Character) decimal separator used CSV, TSV TXT files measurements mapping information, respectively. subtract.blank (Logical) Shall blank values subtracted values within experiment (TRUE, default) (FALSE). calib.growth, calib.fl, calib.fl2 (Character NULL) Provide equation form 'y = function(x)' (example: 'y = x^2 * 0.3 - 0.5') convert growth fluorescence values. can used , e.g., convert plate reader absorbance values OD600 fluorescence intensity molecule concentrations. Caution!: utilizing calibration, carefully consider whether blanks subtracted determine calibration selecting input subtract.blank = TRUE. fl.normtype (Character string) Normalize fluorescence values either diving 'growth' fluorescence2 values ('fl2').","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"grodata object suitable run growth.workflow. See read_data structure.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"Metadata provided map.file needs following layout:","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"","code":"if(interactive()){ grodata <- parse_data(data.file = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\"),                       sheet.data = 1,                       map.file = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\"),                       sheet.map = \"mapping\",                       software = \"Gen5\",                       convert.time = \"y = x * 24\", # convert days to hours                       calib.growth = \"y = x * 3.058\") # convert absorbance to OD values }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"Extract relevant data raw data export file generated software Perkin Elmer's \"Victor Nivo\" plate readers.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"parse_victornivo(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"nivo_output.csv\", package = \"QurvE\"), csvsep = \",\" ) parsed <- parse_victornivo(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"Extract relevant data raw data export file generated software Perkin Elmer's \"Victor X3\" plate readers.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"parse_victorx3(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"victorx3_output.txt\", package = \"QurvE\") ) parsed <- parse_victorx3(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"Generic plot function gcBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"","code":"# S3 method for drBootSpline plot(   x,   pch = 19,   colData = 1,   colSpline = \"black\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"x drBootSpline object created growth.drBootSpline stored within grofit drFit object created growth.workflow growth.drFit, respectively. pch (Numeric) Shape raw data symbols. colData (Numeric Character) Color used plot raw data. colSpline (Numeric Character) Color used plot splines. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether dose-response curves parameter plots shall shown within window. ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"plot dose-response spline fits bootstrapping operation.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = \"test\",         control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8, nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.897150352778885 StDev :  0.0872488226299737  #> 90% CI:  0.894279866514359 90% CI:  0.900020839043411 #> 95% CI:  0.89373019893179 95% CI:  0.90057050662598 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.45260408709722  #> 90% CI:  1.44557401544208 90% CI:  1.45965436746702 #> 95% CI:  1.44423013206342 95% CI:  1.46100673137839 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.8971504    0.08724882         0.535121      0.1105516 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1           0.753626           1.040675          0.7261427           1.068158 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.452604                 1.12469                1.831126 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                1.067092                1.910014 plot(TestRun, combine = TRUE)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFit objects. — plot.drFit","title":"Generic plot function for drFit objects. — plot.drFit","text":"codeplot.drFit calls codeplot.drFitSpline group used dose-response analysis","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFit objects. — plot.drFit","text":"","code":"# S3 method for drFit plot(   x,   combine = TRUE,   names = NULL,   exclude.nm = NULL,   pch = 16,   cex.point = 2,   basesize = 15,   colors = NULL,   lwd = 0.7,   ec50line = TRUE,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   log.y = FALSE,   log.x = FALSE,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFit objects. — plot.drFit","text":"x object class drFit, created growth.drFit. combine (Logical) Combine dose-response analysis results conditions single plot (TRUE) (FALSE). names (String vector strings) Define conditions combine single plot (combine = TRUE). Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. exclude.nm (String vector strings) Define conditions exclude plot (combine = TRUE). Partial matches sample/group names accepted. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. basesize (Numeric) Base font size. colors (Numeric character) Define colors different conditions. lwd (Numeric) Line width individual splines. ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis. x.title (Character) Optional: Provide title x-axis. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? log.x (Logical) Log-transform x-axis plot (TRUE) (FALSE)? plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFit objects. — plot.drFit","text":"One plot per condition tested dose-response analysis single plot showing conditions control = growth.control(dr.method = \"spline\") used growth.drFit combine = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFit objects. — plot.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = \"s\",                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,                  control = growth.control(dr.parameter = \"mu.spline\")) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1590871     0.003302590  0.1523423  0.1658319 #> 2 Test2 FALSE FALSE       0     0.1164880     0.001933081  0.1125455  0.1204305 #>       yEC50      test model #> 1 0.3291969 mu.spline  LL.5 #> 2 0.2337911 mu.spline  W1.4  plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"Generic plot function drFitFLModel objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"","code":"# S3 method for drFitFLModel plot(   x,   ec50line = TRUE,   broken = TRUE,   bp,   n.xbreaks,   n.ybreaks,   log = c(\"xy\"),   pch = 1,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"x Object class drFitFLModel, created fl.drFitModel. ec50line (Logical) Show pointed horizontal vertical lines EC50 value (TRUE) (FALSE). broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input.#' @param pch (Numeric) Size raw data circles. log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. pch (Numeric) Symbol used plot data points. colSpline (Numeric Character) Color used plot splines. colData (Numeric Character) Color used plot raw data. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lwd (Numeric) Line width. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"plot biosensor dose-response model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = \"test\", control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.503 | yEC50: 3054 | fold change: 58.92 | leakiness: 101.9 #>  #>   print(summary(TestRun)) #>      yEC50    y.min    y.max       fc         K        n yEC50.orig    K.orig #> 1 3053.775 101.9357 6005.615 58.91572 0.5028005 1.971117   3053.775 0.5028005 #>   test #> 1   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitModel objects. — plot.drFitModel","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"Generic plot function drFitModel objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"","code":"# S3 method for drFitModel plot(   x,   type = c(\"confidence\", \"all\", \"bars\", \"none\", \"obs\", \"average\"),   ec50line = TRUE,   add = FALSE,   broken = TRUE,   bp,   gridsize = 200,   log = \"x\",   n.xbreaks,   n.ybreaks,   x.lim,   y.lim,   pch = 1,   cex.point,   cex.axis = 1,   cex.lab = 1.3,   col = 1,   lwd = 2,   lty = 2,   xlab,   ylab,   legend = TRUE,   legendText,   legendPos,   cex.legend = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"x object class drFitModel, created growth.drFitModel. type (Character) Specify plot data. currently 5 options: \"average\" (averages fitted curve(s); default), \"none\" (fitted curve(s)), \"obs\" (data points), \"\" (data points fitted curve(s)), \"bars\" (averages fitted curve(s) model-based standard errors (see Details)), \"confidence\" (confidence bands fitted curve(s)). ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). add (Logical) TRUE add already existing plot. broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. gridsize (Numeric) Number points grid used plotting fitted curves. log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. pch (Numeric) Symbol used plot data points. cex.point (Numeric) Size raw data points. cex.axis (Numeric) Font size axis annotations. cex.lab (Numeric) Font size axis titles. col (Logical vector colors) TRUE default colours used. FALSE (default) colors used. lwd (Numeric) Line width. lty (Numeric) Specify line type. xlab (Character) optional label x axis. ylab (Character) optional label y axis. legend (Logical) TRUE legend displayed. legendText (Character) Specify legend text (position upper right corner legend box). legendPos (Numeric) Vector length 2 giving position legend. cex.legend numeric specifying legend text size. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"plot dose-response model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = \"test\")  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50      4.113184       0.1004044   3.901349   4.325019 0.4676852 mu.linfit #>        model #> e:1:50  W1.3 plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitSpline objects. — plot.drFitSpline","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"codeplot.drFitSpline generates spline fit plot response-parameter vs. concentration data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"","code":"# S3 method for drFitSpline plot(   x,   add = FALSE,   ec50line = TRUE,   log = \"\",   pch = 16,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"x object class drFitSpline, created growth.drFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.drBootSpline. ec50line (Logical) Show pointed horizontal vertical lines EC50 value (TRUE) (FALSE). log (\"x\", \"y\", \"xy\") Display x- y-axis logarithmic scale. pch (Numeric) Shape raw data symbols. colSpline (Numeric character) Spline line colour. colData (Numeric character) Contour color raw data circles. cex.point (Numeric) Size raw data symbols. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis. x.title (Character) Optional: Provide title x-axis. lwd (Numeric) Line width spline. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"plot nonparametric dose-response fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = \"test\",                      control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.64180216876285 yEC50 0.483174695948357 #> --> Original scale  #> xEC50 4.16446837423939 yEC50 0.483174695948357 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.641802 0.4831747  4.164468  0.4831747   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitFL objects. — plot.drFitfl","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"codedrFitfl calls plot.drFitFLModel group used dose-response analysis dr.method = \"model\"","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"","code":"# S3 method for drFitfl plot(   x,   ec50line = TRUE,   log = c(\"xy\"),   pch = 1,   broken = TRUE,   bp,   n.xbreaks,   n.ybreaks,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"x object class drFit, created growth.drFit. ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. pch (Numeric) Shape raw data symbols. broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. colSpline (Numeric character) Spline line colour. colData (Numeric character) Contour color raw data circles. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. lwd (Numeric) Line width individual splines. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"One plot per condition tested dose-response analysis (fl.drFit control = fl.control(dr.method = \"model\")).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = \"s\",              x_type = \"time\", norm_fl = TRUE,              dr.parameter = \"max_slope.spline\",              dr.method = \"model\",              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = control)  # Perform dose-response analysis with biosensor model drFitfl <- fl.drFit(flTable = res$flTable, control = control)  plot(drFitfl)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"plot.dr_parameter gathers parameters results dose-response analysis compares chosen parameter condition column plot. Error bars represent 95% confidence interval (shown > 2 replicates).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"","code":"# S3 method for dr_parameter plot(   x,   param = c(\"EC50\", \"EC50.Estimate\", \"y.max\", \"y.min\", \"fc\", \"K\", \"n\", \"yEC50\",     \"drboot.meanEC50\", \"drboot.meanEC50y\", \"EC50.orig\", \"yEC50.orig\"),   names = NULL,   exclude.nm = NULL,   basesize = 12,   reference.nm = NULL,   label.size = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"x grofit, drFit, drTable, flFitRes object obtained growth.workflow, growth.drFit, fl.drFit, fl.workflow. param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'y.max', 'y.min', 'fc', 'K', 'n' fluorescence dose-response analyses dr.type = 'model' control argument, 'EC50', 'yEC50', 'drboot.meanEC50', 'drboot.meanEC50y'. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. basesize (Numeric) Base font size. reference.nm (Character) Name reference condition, parameter values normalized. Partially matching strings tolerated long can uniquely identify condition. label.size (Numeric) Font size sample labels x-axis. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"column plot comparing selected parameter dose-response analysis tested conditions.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = \"s\",                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,             control = growth.control(dr.parameter = \"mu.spline\")) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      plot.dr_parameter(drFit, param = 'EC50')  # }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare fluorescence and growth over time — plot.dual","title":"Compare fluorescence and growth over time — plot.dual","text":"plot.dual creates two-panel plot fluorescence growth values shown time, allowing identification , e.g., expression patterns different growth stages.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare fluorescence and growth over time — plot.dual","text":"","code":"# S3 method for dual plot(   x,   fluorescence = c(\"fl\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y.growth = FALSE,   log.y.fl = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim.growth = NULL,   y.lim.fl = NULL,   x.lim = NULL,   x.title = NULL,   y.title.growth = NULL,   y.title.fl = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare fluorescence and growth over time — plot.dual","text":"x flFit, flFitRes, grodata object created flFit, fl.workflow read_data fluorescence (Character) Indicate, type fluorescence data displayed. IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y.growth (Logical) Log-transform y-axis growth plot (TRUE) (FALSE)? log.y.fl (Logical) Log-transform y-axis fluorescence plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim.growth (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.fl (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence plot vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence growth plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.growth (Character) Optional: Provide title y-axis growth plot. y.title.fl (Character) Optional: Provide title y-axis fluorescence plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare fluorescence and growth over time — plot.dual","text":"two-panel plot, showing raw fluorescence (fluorescence = \"fl\") normalized fluorescence (fluorescence = \"norm.fl\") time top panel, growth time bottom panel.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare fluorescence and growth over time — plot.dual","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot.dual(res, legend.ncol = 3, basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flBootSpline objects. — plot.flBootSpline","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"Generic plot function flBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"","code":"# S3 method for flBootSpline plot(   x,   pch = 1,   colData = 1,   deriv = TRUE,   colSpline = \"dodgerblue3\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"x Object class flBootSpline, created flBootSpline. pch (Numeric) Size raw data circles. colData (Numeric Character) Color used plot raw data. deriv (Logical) Show derivatives (.e., slope) time secondary plot (TRUE) (FALSE). colSpline (Numeric Character) Color used plot splines. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether growth curves parameter plots shall shown within window. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"single plot spline fits bootstrapping operation statistical distribution parameters combine = TRUE separate plots fits parameter distributions (combine = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"s\", x_type = \"time\",                        nboot.fl = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"plot.flFitLinear shows results linear regression visualizes raw data, data points included fit, tangent obtained linear regression, lag time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"","code":"# S3 method for flFitLinear plot(   x,   log = \"\",   which = c(\"fit\", \"diagnostics\", \"fit_diagnostics\"),   pch = 21,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   color = \"firebrick3\",   y.lim = NULL,   x.lim = NULL,   plot = TRUE,   export = FALSE,   height = ifelse(which == \"fit\", 7, 5),   width = ifelse(which == \"fit\", 9, 9),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"x flFittedLinear object created flFitLinear stored within flFitRes flFit object created fl.workflow flFit, respectively. log (\"x\" \"y\") Display x- y-axis logarithmic scale. (\"fit\" \"diagnostics\") Display either results linear fit raw data statistical evaluation linear regression. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Line width. color (Character string) Enter color either name (e.g., red, blue, coral3) via hexadecimal code (e.g., #AE4371, #CCFF00FF, #0066FFFF). full list colors available name can found http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"plot linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"l\", x_type = \"time\",                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine different groups of samples into a single plot — plot.flFitRes","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"Visualize fluorescence, normalized fluorescence, spline fits multiple sample groups single plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"","code":"# S3 method for flFitRes plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   deriv = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )  # S3 method for flFit plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   deriv = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"x flFitRes, flFit, grodata object created fl.workflow containing fluorescence data. data.type (Character) Indicate, type fluorescence data displayed. IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? deriv (Logical) Show derivatives time separate panel plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using axisTicks(). Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis fluorescence curve plot. x.title (Character) Optional: Provide title x-axis fluorescence curve derivative plots. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"plot curves (nonparametric fits, raw fluorescence measurements, raw normalized fluorescence time) flFitRes object created fl.workflow, replicates combined group averages (mean = TRUE) (mean = FALSE). plot curves (raw fluorescence measurements raw normalized fluorescence time) flFit object flFit, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"","code":"# \\donttest{ # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot(res, legend.ncol = 3, basesize = 15)  # }  # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = fl.control(fit.opt = \"s\", suppress.messages = TRUE,              x_type = \"time\", norm_fl = TRUE))  plot(res, legend.ncol = 3, basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flFitSpline objects. — plot.flFitSpline","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"plot.flFitSpline generates spline fit plot single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"","code":"# S3 method for flFitSpline plot(   x,   add = FALSE,   raw = TRUE,   slope = TRUE,   deriv = TRUE,   spline = TRUE,   log.y = FALSE,   basesize = 16,   pch = 1,   colData = 1,   colSpline = \"dodgerblue3\",   cex.point = 2,   lwd = 0.7,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   n.ybreaks = 6,   y.title = NULL,   x.title = NULL,   y.title.deriv = NULL,   plot = TRUE,   export = FALSE,   width = 8,   height = ifelse(deriv == TRUE, 8, 6),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"x Object class flFitSpline, created flFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.flBootSpline. raw (Logical) Display raw growth circles (TRUE) (FALSE). slope (Logical) Show slope maximum slope (TRUE) (FALSE). deriv (Logical) Show derivative (.e., slope) time secondary plot (TRUE) (FALSE). spline (Logical) add = TRUE: add current spline existing plot (FALSE). log.y (Logical) Log-transform y-axis (TRUE) (FALSE). basesize (Numeric) Base font size. pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. colSpline (Numeric character) Spline line colour. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using axisTicks(). Thus, final number breaks can deviate user input. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). width (Numeric) Width exported image inches. height (Numeric) Height exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"plot nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"s\", x_type = \"time\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"Generic plot function gcBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"","code":"# S3 method for gcBootSpline plot(   x,   pch = 1,   colData = 1,   deriv = TRUE,   colSpline = \"dodgerblue3\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"x object class gcBootSpline, created growth.gcBootSpline. pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. deriv (Logical) Show derivatives (.e., slope) time secondary plot (TRUE) (FALSE). colSpline (Numeric character) Spline line colour. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether growth curves parameter plots shall shown within window. ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"single plot spline growth fits bootstrapping operation statistical distribution growth parameters combine = TRUE separate plots growth fits parameter distributions (combine = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = \"TestFit\",               control = growth.control(fit.opt = \"s\", nboot.gc = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"plot.gcFitLinear shows results linear regression log-transformed data visualizes raw data, data points included fit, tangent obtained linear regression, lag time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"","code":"# S3 method for gcFitLinear plot(   x,   log = \"y\",   which = c(\"fit\", \"diagnostics\", \"fit_diagnostics\"),   pch = 21,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   color = \"firebrick3\",   y.lim = NULL,   x.lim = NULL,   plot = TRUE,   export = FALSE,   height = ifelse(which == \"fit\", 7, 5),   width = ifelse(which == \"fit\", 9, 9),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"x gcFittedLinear object created growth.gcFitLinear stored within grofit gcFit object created growth.workflow growth.gcFit, respectively. log (\"x\" \"y\") Display x- y-axis logarithmic scale. (\"fit\" \"diagnostics\") Display either results linear fit raw data statistical evaluation linear regression. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Line width. color (Character string) Enter color either name (e.g., red, blue, coral3) via hexadecimal code (e.g., #AE4371, #CCFF00FF, #0066FFFF). full list colors available name can found http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"plot linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"l\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFitModel objects. — plot.gcFitModel","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"Plot results parametric model fit growth vs. time data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"","code":"# S3 method for gcFitModel plot(   x,   raw = TRUE,   pch = 1,   colData = 1,   equation = TRUE,   eq.size = 1,   colModel = \"forestgreen\",   basesize = 16,   cex.point = 2,   lwd = 0.7,   x.lim = NULL,   y.lim = NULL,   n.ybreaks = 6,   plot = TRUE,   export = FALSE,   height = 6,   width = 8,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"x gcFittedModel object created growth.gcFitModel stored within grofit gcFit object created growth.workflow growth.gcFit, respectively. raw (Logical) Show raw data within plot (TRUE) (FALSE). pch (Numeric) Symbol used plot data points. colData (Numeric Character) Color used plot raw data. equation (Logical) Show equation fitted model within plot (TRUE) (FALSE). eq.size (Numeric) Provide value scale size displayed equation. colModel (Numeric Character) Color used plot fitted model. basesize (Numeric) Base font size. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated ggplot2 plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"plot parametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"m\")) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  plot(TestFit, basesize = 18, eq.size = 1.5) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"codeplot.gcFitSpline generates spline fit plot single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"","code":"# S3 method for gcFitSpline plot(   x,   add = FALSE,   raw = TRUE,   slope = TRUE,   deriv = TRUE,   spline = TRUE,   log.y = TRUE,   pch = 1,   colData = 1,   colSpline = \"dodgerblue3\",   basesize = 16,   cex.point = 2,   lwd = 0.7,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   n.ybreaks = 6,   y.title = NULL,   x.title = NULL,   y.title.deriv = NULL,   plot = TRUE,   export = FALSE,   width = 8,   height = ifelse(deriv == TRUE, 8, 6),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"x object class gcFitSpline, created growth.gcFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.gcBootSpline. raw (Logical) Display raw growth circles (TRUE) (FALSE). slope (Logical) Show slope maximum growth rate (TRUE) (FALSE). deriv (Logical) Show derivative (.e., slope) time secondary plot (TRUE) (FALSE). spline (Logical) add = TRUE: add current spline existing plot (FALSE). log.y (Logical) Log-transform y-axis (TRUE) (FALSE). pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. colSpline (Numeric character) Spline line colour. basesize (Numeric) Base font size. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). width (Numeric) Width exported image inches. height (Numeric) Height exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot (add = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"plot nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform spline fit TestFit <- growth.gcFitSpline(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"s\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a matrix of growth curve panels — plot.grid","title":"Plot a matrix of growth curve panels — plot.grid","text":"plot.grid takes grofit flFitRes object returns facet grid individual growth fluorescence plots","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a matrix of growth curve panels — plot.grid","text":"","code":"# S3 method for grid plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   param = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu2.linfit\",     \"lambda2.linfit\", \"mu.model\", \"lambda.model\", \"A.model\", \"A.orig.model\", \"dY.model\",     \"dY.orig.model\", \"tD.linfit\", \"tD2.linfit\", \"tD.spline\", \"tD2.spline\", \"mu.spline\",     \"lambda.spline\", \"A.spline\", \"dY.spline\", \"integral.spline\", \"mu2.spline\",     \"lambda2.spline\", \"mu.bt\", \"lambda.bt\", \"A.bt\", \"integral.bt\", \"max_slope.linfit\",     \"max_slope.spline\"),   pal = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\", \"Cyan\",     \"Brown\", \"Mint\"),   invert.pal = FALSE,   IDs = NULL,   sort_by_ID = FALSE,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   mean = TRUE,   log.y = TRUE,   n.ybreaks = 6,   sort_by_conc = TRUE,   nrow = NULL,   basesize = 20,   y.lim = NULL,   x.lim = NULL,   legend.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 1.1,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a matrix of growth curve panels — plot.grid","text":"x grofit flFitRes object created growth.workflow codefl.workflow containing spline fits. data.type (Character) Plot either raw data (data.type = \"raw\") spline fit results param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'mu.linfit', 'lambda.linfit', 'dY.linfit', '.linfit', 'mu.model', 'lambda.model', '.model', 'mu.spline', 'lambda.spline', '.spline', 'dY.spline', 'integral.spline', 'mu.bt', 'lambda.bt', '.bt', 'integral.bt' pal (Character string) Choose one 'Green',   'Orange',  'Purple',  'Magenta', 'Grey', 'Blue', 'Grey', 'Red', 'Cyan', 'Brown', 'Mint' visualize value parameter chosen param sample condition. invert.pal (Logical) Shall colors chosen pal inverted (TRUE) FALSE? IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. order strings within vector defines order samples within grid. sort_by_ID (Logical) Shall samples/conditions ordered entered IDs (TRUE) alphabetically (FALSE)? names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)?#' n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. sort_by_conc (Logical) Shall samples/conditions sorted concentrations rows groups columns? nrow (Numeric) Defines number rows grid sort_by_conc FALSE. basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. legend.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds color scale applied param vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. lwd (Numeric) Line width individual plots. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a matrix of growth curve panels — plot.grid","text":"plot matrix growth curves (raw measurements nonparametric fits) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a matrix of growth curve panels — plot.grid","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        suppress.messages = TRUE,                        parallelize = FALSE)   plot.grid(res, param = \"mu.spline\")"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"plot.grodata calls plot.grofit plot.flFitRes based chosen data.type, respectively.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"","code":"# S3 method for grodata plot(   x,   data.type = c(\"growth\", \"fl\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"x grodata object created read_data parse_data. data.type (Character) Plot either raw growth (data.type = \"growth\"), raw fluorescence (data.type = \"fl\"), fluorescence normalized growth (data.type = \"norm.fl\"). IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"plot growth curves (raw measurements) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"","code":"# Create random growth data sets rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  # Create dataframe with both data sets and a single time vector time <- as.data.frame(matrix(t(c(\"Time\",NA,NA, rnd.data1$time[1,])),nrow=1),              stringsAsFactors=FALSE) colnames(time) <- colnames(rnd.data1$data) data <- rbind(time, rnd.data1$data, rnd.data2$data)   # Create a grodata object grodata <- read_data(data.growth = data, data.format = \"row\") #> Sample data are stored in rows. If they are stored in column format, please run read_data() with data.format = 'col'.  plot(grodata, exclude.nm = \"Test1\", legend.ncol = 4)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"plot.grofit extracts spline fits subset samples grofit object calculates averages standard deviations conditions replicates combines single plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"","code":"# S3 method for grofit plot(   x,   ...,   data.type = c(\"spline\", \"raw\"),   IDs = NULL,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   mean = TRUE,   log.y = TRUE,   deriv = TRUE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"x grofit object created growth.workflow containing spline fits. ... (optional) Additional grofit objects created separate workflows joint plotting single graph. data.type (Character) Plot either raw data (data.type = \"raw\") spline fit results IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? deriv (Logical) Show derivatives time separate panel plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"plot growth curves (raw measurements nonparametric fits) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        suppress.messages = TRUE,                        parallelize = FALSE)   plot(res, names = \"Test1\", legend.ncol = 4) # Show only samples for condition \"Test1\""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare growth parameters between samples or conditions — plot.parameter","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"plot.parameter gathers physiological parameters results growth fit analysis compares chosen parameter sample condition column plot. Error bars represent 95% confidence interval (shown > 2 replicates).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"","code":"# S3 method for parameter plot(   x,   param = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu2.linfit\",     \"lambda2.linfit\", \"mu.model\", \"lambda.model\", \"A.model\", \"A.orig.model\", \"dY.model\",     \"dY.orig.model\", \"tD.linfit\", \"tD2.linfit\", \"tD.spline\", \"tD2.spline\", \"mu.spline\",     \"lambda.spline\", \"A.spline\", \"dY.spline\", \"integral.spline\", \"mu2.spline\",     \"lambda2.spline\", \"mu.bt\", \"lambda.bt\", \"A.bt\", \"integral.bt\", \"max_slope.linfit\",     \"max_slope.spline\"),   IDs = NULL,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   reference.nm = NULL,   reference.conc = NULL,   order_by_conc = FALSE,   colors = NULL,   basesize = 12,   label.size = NULL,   shape.size = 2.5,   legend.position = \"right\",   legend.ncol = 1,   plot = TRUE,   export = FALSE,   height = 7,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"x grofit, gcFit, gcTable object obtained growth.workflow growth.gcFit. param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'mu.linfit', 'lambda.linfit', 'dY.linfit', '.linfit', 'mu.model', 'lambda.model', '.model', 'mu.spline', 'lambda.spline', '.spline', 'dY.spline', 'integral.spline', 'mu.bt', 'lambda.bt', '.bt', 'integral.bt' IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. reference.nm (Character) Name reference condition, parameter values normalized. Partially matching strings tolerated long can uniquely identify condition. reference.conc (Numeric) Concentration reference condition, parameter values normalized. order_by_conc (Logical) Shall columns sorted order ascending concentrations (TRUE) sample groups FALSE? colors (vector strings) Define color palette used draw columns. NULL, default palettes chosen. Note: number provided colors least match number groups. basesize (Numeric) Base font size. label.size (Numeric) Font size sample labels x-axis. shape.size (Numeric) size symbols indicating replicate values. Default: 2.5 legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"column plot comparing selected growth parameter tested conditions.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)   plot.parameter(res,                param = \"mu.spline\",                legend.ncol = 4,                legend.position = \"bottom\",                basesize = 15,                label.size = 11)"},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":null,"dir":"Reference","previous_headings":"","what":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"function calls baranyi function generate curves time zero t adds random noise x- y-axes. three growth parameters given input values slightly changed produce different growth curves. resulting datasets can used test growth.workflow function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"","code":"rdm.data(d, y0 = 0.05, tmax = 24, mu = 0.6, lambda = 5, A = 3, label = \"Test1\")"},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"d Numeric value, number data sets. d vector, first entry used. y0 Numeric value, start growth. t vector, first entry used. tmax Numeric value, number time points per data set. t vector, first entry used. mu Numeric value, maximum slope. mu vector, first entry used. lambda Numeric value, lag-phase. lambda vector, first entry used. Numeric value, maximum growth. vector, first entry used. label Character string, condition label  label vector, first entry used.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"list containing simulated data three tests (e.g., 'organisms'): time numeric matrix size dxt, row represent time points growth data simulated stored row data. data data.frame size dx(3+t), 1. column, character experiment identifier; 2. column: Replicate number; 3. column: concentration substrate compound experiment obtained; 4.-(3+t). column: growth data corresponding time points time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # \\donttest{ # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,              control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1619948     0.002072080  0.1577741  0.1662155 #> 2 Test2 FALSE FALSE       0     0.1167660     0.001445176  0.1138223  0.1197097 #>       yEC50      test model #> 1 0.3296421 mu.spline  W1.3 #> 2 0.2365823 mu.spline  W1.3 plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read growth and fluorescence data in table format — read_data","title":"Read growth and fluorescence data in table format — read_data","text":"read_data reads table files R dataframe objects containing growth fluorescence data extracts datasets, sample group information, performs blank correction, applies data transformation (calibration), combines technical replicates.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read growth and fluorescence data in table format — read_data","text":"","code":"read_data(   data.growth = NA,   data.fl = NA,   data.fl2 = NA,   data.format = \"col\",   csvsep = \";\",   dec = \".\",   csvsep.fl = \";\",   dec.fl = \".\",   csvsep.fl2 = \";\",   dec.fl2 = \".\",   sheet.growth = 1,   sheet.fl = 1,   sheet.fl2 = 1,   fl.normtype = c(\"growth\", \"fl2\"),   subtract.blank = TRUE,   convert.time = NULL,   calib.growth = NULL,   calib.fl = NULL,   calib.fl2 = NULL )"},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read growth and fluorescence data in table format — read_data","text":"data.growth R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing growth data. data must either 'QurvE custom layout' 'tidy' (long) format. first three table rows 'custom QurvE layout' contain: Sample description Replicate number (optional: followed letter indicate technical replicates) Concentration value (optional) Data 'tidy' format requires following column headers: \"Time\": time values \"Description\": sample description \"Replicate\": replicate number (optional) \"Concentration\": concentration value (optional) \"Values\": growth values (e.g., optical density) data.fl (optional) R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing fluorescence data. Table layout must mimic data.growth. data.fl2 (optional) R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing measurements second fluorescence channel (used normalize fluorescence data). Table layout must mimic data.growth. data.format (Character) \"col\" samples columns, \"row\" samples rows. Default: \"col\" csvsep (Character) separator used CSV file storing growth data (ignored file types). Default: \";\" dec (Character) decimal separator used CSV, TSV TXT file storing growth data. Default: \".\" csvsep.fl, csvsep.fl2 (Character) separator used CSV file storing fluorescence data (ignored file types). Default: \";\" dec.fl, dec.fl2 (Character) decimal separator used CSV, TSV TXT file storing fluorescence data. Default: \".\" sheet.growth, sheet.fl, sheet.fl2 (Numeric Character) Number name sheet respective data type XLS XLSX files (optional). fl.normtype (Character string) Normalize fluorescence values either diving 'growth' fluorescence2 values ('fl2'). subtract.blank (Logical) Shall blank values subtracted values within experiment (TRUE, default) (FALSE). convert.time (NULL string) Convert time values formula provided form 'y = function(x)'. example: convert.time = 'y = 24 * x' calib.growth, calib.fl, calib.fl2 (Character NULL) Provide equation form 'y = function(x)' (example: 'y = x^2 * 0.3 - 0.5') convert growth fluorescence values. can used , e.g., convert plate reader absorbance values OD600 fluorescence intensity molecule concentrations. Caution!: utilizing calibration, carefully consider whether blanks subtracted determine calibration selecting input subtract.blank = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read growth and fluorescence data in table format — read_data","text":"R list object class grodata containing time matrix, dataframes growth fluorescence data (applicable), experimental design table. grodata object can directly used run growth.workflow/fl.workflow , together growth.control/fl.control object, growth.gcFit/flFit. time Matrix raw time values extracted data.growth. growth Dataframe raw growth values sample identifiers extracted data.growth. fluorescence Dataframe raw fluorescence values sample identifiers extracted data.fl. NA, fluorescence data provided. norm.fluorescence fluorescence data divided growth values. NA, fluorescence data provided. expdesign Experimental design table created first three identifier rows/columns (see argument data.format) (data.growth.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read growth and fluorescence data in table format — read_data","text":"","code":"# Load CSV file containing only growth data data_growth <- read_data(data.growth = system.file(\"2-FMA_toxicity.csv\",                          package = \"QurvE\"), csvsep = \";\" ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Load XLSX file containing both growth and fluorescence data data_growth_fl <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                             sheet.growth = \"OD\",                             data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                             sheet.fl = 2) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'."},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"read_file automatically detects format file provided filename calls appropriate function read table file.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"","code":"read_file(filename, csvsep = \";\", dec = \".\", sheet = 1)"},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"filename (Character) Name path table file read. Can type CSV, XLS, XLSX, TSV, TXT. csvsep (Character) separator used CSV file (ignored file types). dec (Character) decimal separator used CSV, TSV TXT files. sheet (Numeric Character) Number name sheet XLS XLSX files (optional). Default: \";\"","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"dataframe object headers first row.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"","code":"input <- read_file(filename = system.file(\"2-FMA_toxicity.csv\", package = \"QurvE\"), csvsep = \";\" )"},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny QurvE App — run_app","title":"Run Shiny QurvE App — run_app","text":"Run Shiny QurvE App","code":""},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny QurvE App — run_app","text":"","code":"run_app()"},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Shiny QurvE App — run_app","text":"Launches browser shiny app","code":""},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Shiny QurvE App — run_app","text":"","code":"if(interactive()){ # Run the app run_app() }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drBootSpline objects — summary.drBootSpline","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"Generic summary function drBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"","code":"# S3 method for drBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"object object class drBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"dataframe statistical parameters extracted dose-response bootstrapping analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = 'test',         control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8, nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.916429061832872 StDev :  0.0800209262309653  #> 90% CI:  0.913796373359873 90% CI:  0.919061750305871 #> 95% CI:  0.913292241524618 95% CI:  0.919565882141126 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.50034584881687  #> 90% CI:  1.49377187453238 90% CI:  1.50693715312995 #> 95% CI:  1.49251500158202 95% CI:  1.50820129857903 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.9164291    0.08002093        0.5323173     0.09812159 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.7847946           1.048063           0.759588            1.07327 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.500346                1.191957                1.852123 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                1.137396                1.924929"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFit objects — summary.drFit","title":"Generic summary function for drFit objects — summary.drFit","text":"Generic summary function drFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFit objects — summary.drFit","text":"","code":"# S3 method for drFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFit objects — summary.drFit","text":"object object class drFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFit objects — summary.drFit","text":"dataframe parameters samples extracted dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFit objects — summary.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,                  control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1552293     0.002418645  0.1503027  0.1601559 #> 2 Test2 FALSE FALSE       0     0.1186820     0.001848579  0.1149166  0.1224475 #>       yEC50      test model #> 1 0.3342651 mu.spline  W1.3 #> 2 0.2331104 mu.spline  W1.3 # }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"Generic summary function drFitFLModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"","code":"# S3 method for drFitFLModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"object object class drFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"dataframe biosensor response parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = 'test', control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.501 | yEC50: 3034 | fold change: 64.84 | leakiness: 92.2 #>  #>   print(summary(TestRun)) #>      yEC50    y.min    y.max       fc        K        n yEC50.orig   K.orig #> 1 3034.324 92.16622 5976.481 64.84459 0.500949 1.942312   3034.324 0.500949 #>   test #> 1   NA"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitModel objects — summary.drFitModel","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"Generic summary function drFitModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"","code":"# S3 method for drFitModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"object object class drFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"dataframe parameters extracted dose-response analysis single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = 'test')  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50      4.142469      0.09026101   3.952035   4.332903 0.4662971 mu.linfit #>        model #> e:1:50  W1.3"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitSpline objects — summary.drFitSpline","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"Generic summary function drFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"","code":"# S3 method for drFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"object object class drFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"dataframe parameters extracted dose-response analysis single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = 'test',               control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.60579773523735 yEC50 0.473397074078604 #> --> Original scale  #> xEC50 3.98183220108153 yEC50 0.473397074078604 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.605798 0.4733971  3.981832  0.4733971   NA"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitfl objects — summary.drFitfl","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"Generic summary function drFitfl objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"","code":"# S3 method for drFitfl summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"object object class drFitfl ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"dataframe parameters samples extracted dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = 's',              x_type = 'time', norm_fl = TRUE,              dr.parameter = 'max_slope.spline',              dr.method = 'model',              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = control)  # Perform dose-response analysis with biosensor model drFitfl <- fl.drFit(flTable = res$flTable, control = control)  summary(drFitfl) #>             Test log.x log.y    yEC50    y.min    y.max        fc          K #> 1 pSEVA634rκ∙GFP FALSE FALSE 205.9582 64.17578 347.7406  5.418565 0.01018009 #> 2  pSEVA634r∙GFP FALSE FALSE 190.4524 30.77274 350.1321 11.377995 0.04563553 #> 3   pSEVA634∙GFP FALSE FALSE 446.4529 92.26689 800.6389  8.677423 0.03285860 #>           n yEC50.orig     K.orig             test #> 1 0.9764871   205.9582 0.01018009 max_slope.spline #> 2 2.7157088   190.4524 0.04563553 max_slope.spline #> 3 1.1757158   446.4529 0.03285860 max_slope.spline"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flBootSpline objects — summary.flBootSpline","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"Generic summary function flBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"","code":"# S3 method for flBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"object object class flBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"dataframe statistical parameters extracted dose-response bootstrapping analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time',                        nboot.fl = 50))  summary(TestFit) #>       max_slope.bt        lambda.bt             A.bt           dY.bt #> 1 242.326538652406 14.8714079612342 7567.43153224461 6073.8646423585 #>        integral.bt  stdmax_slope.bt      stdlambda.bt          stdA.bt #> 1 148839.171495195 2.96049466826478 0.310017631293647 60.8356911650226 #>           stddY.bt   stdintegral.bt reliable_fit.bt    ci90.mu.bt.lo #> 1 87.5478102578233 3149.58453471899            TRUE 237.456524923111 #>      ci90.mu.bt.up ci90.lambda.bt.lo ci90.lambda.bt.up     ci90.A.bt.lo #> 1 247.196552381702  14.3614289577561  15.3813869647122 7467.35682027815 #>       ci90.A.bt.up ci90.integral.bt.lo ci90.integral.bt.up    ci95.mu.bt.lo #> 1 7667.50624421107    143658.104935582    154020.238054807 236.523969102607 #>      ci95.mu.bt.up ci95.lambda.bt.lo ci95.lambda.bt.up     ci95.A.bt.lo #> 1 248.129108202205  14.2637734038986  15.4790425185697 7448.19357756116 #>       ci95.A.bt.up ci95.integral.bt.lo ci95.integral.bt.up #> 1 7686.66948692805    142665.985807145    155012.357183244"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFit objects — summary.flFit","title":"Generic summary function for flFit objects — summary.flFit","text":"Generic summary function flFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFit objects — summary.flFit","text":"","code":"# S3 method for flFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFit objects — summary.flFit","text":"object object class flFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFit objects — summary.flFit","text":"dataframe parameters extracted fits workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFit objects — summary.flFit","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = fl.control(fit.opt = 's', suppress.messages = TRUE,              x_type = 'time', norm_fl = TRUE, nboot.fl = 20))  summary(res) #>            TestId AddId concentration reliability_tag log.x.spline log.y.spline #> 1    pSEVA634∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 2   pSEVA634r∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 3  pSEVA634rκ∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 4    pSEVA634∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 5   pSEVA634r∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 6  pSEVA634rκ∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 7    pSEVA634∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 8   pSEVA634r∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 9  pSEVA634rκ∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 10   pSEVA634∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 11  pSEVA634r∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 12 pSEVA634rκ∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 13   pSEVA634∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 14  pSEVA634r∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 15 pSEVA634rκ∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 16   pSEVA634∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 17  pSEVA634r∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 18 pSEVA634rκ∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 19   pSEVA634∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 20  pSEVA634r∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 21 pSEVA634rκ∙GFP  <NA>             1            TRUE        FALSE        FALSE #>    log.x.lin log.y.lin nboot.fl max_slope.linfit lambda.linfit dY.linfit #> 1      FALSE     FALSE       20                0          <NA>      <NA> #> 2      FALSE     FALSE       20                0          <NA>      <NA> #> 3      FALSE     FALSE       20                0          <NA>      <NA> #> 4      FALSE     FALSE       20                0          <NA>      <NA> #> 5      FALSE     FALSE       20                0          <NA>      <NA> #> 6      FALSE     FALSE       20                0          <NA>      <NA> #> 7      FALSE     FALSE       20                0          <NA>      <NA> #> 8      FALSE     FALSE       20                0          <NA>      <NA> #> 9      FALSE     FALSE       20                0          <NA>      <NA> #> 10     FALSE     FALSE       20                0          <NA>      <NA> #> 11     FALSE     FALSE       20                0          <NA>      <NA> #> 12     FALSE     FALSE       20                0          <NA>      <NA> #> 13     FALSE     FALSE       20                0          <NA>      <NA> #> 14     FALSE     FALSE       20                0          <NA>      <NA> #> 15     FALSE     FALSE       20                0          <NA>      <NA> #> 16     FALSE     FALSE       20                0          <NA>      <NA> #> 17     FALSE     FALSE       20                0          <NA>      <NA> #> 18     FALSE     FALSE       20                0          <NA>      <NA> #> 19     FALSE     FALSE       20                0          <NA>      <NA> #> 20     FALSE     FALSE       20                0          <NA>      <NA> #> 21     FALSE     FALSE       20                0          <NA>      <NA> #>    A.linfit x.mu.start.linfit x.mu.end.linfit r2mu.linfit reliable_fit.linfit #> 1      <NA>              <NA>            <NA>        <NA>               FALSE #> 2      <NA>              <NA>            <NA>        <NA>               FALSE #> 3      <NA>              <NA>            <NA>        <NA>               FALSE #> 4      <NA>              <NA>            <NA>        <NA>               FALSE #> 5      <NA>              <NA>            <NA>        <NA>               FALSE #> 6      <NA>              <NA>            <NA>        <NA>               FALSE #> 7      <NA>              <NA>            <NA>        <NA>               FALSE #> 8      <NA>              <NA>            <NA>        <NA>               FALSE #> 9      <NA>              <NA>            <NA>        <NA>               FALSE #> 10     <NA>              <NA>            <NA>        <NA>               FALSE #> 11     <NA>              <NA>            <NA>        <NA>               FALSE #> 12     <NA>              <NA>            <NA>        <NA>               FALSE #> 13     <NA>              <NA>            <NA>        <NA>               FALSE #> 14     <NA>              <NA>            <NA>        <NA>               FALSE #> 15     <NA>              <NA>            <NA>        <NA>               FALSE #> 16     <NA>              <NA>            <NA>        <NA>               FALSE #> 17     <NA>              <NA>            <NA>        <NA>               FALSE #> 18     <NA>              <NA>            <NA>        <NA>               FALSE #> 19     <NA>              <NA>            <NA>        <NA>               FALSE #> 20     <NA>              <NA>            <NA>        <NA>               FALSE #> 21     <NA>              <NA>            <NA>        <NA>               FALSE #>    max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1               <NA>               <NA>             <NA>         <NA> #> 2               <NA>               <NA>             <NA>         <NA> #> 3               <NA>               <NA>             <NA>         <NA> #> 4               <NA>               <NA>             <NA>         <NA> #> 5               <NA>               <NA>             <NA>         <NA> #> 6               <NA>               <NA>             <NA>         <NA> #> 7               <NA>               <NA>             <NA>         <NA> #> 8               <NA>               <NA>             <NA>         <NA> #> 9               <NA>               <NA>             <NA>         <NA> #> 10              <NA>               <NA>             <NA>         <NA> #> 11              <NA>               <NA>             <NA>         <NA> #> 12              <NA>               <NA>             <NA>         <NA> #> 13              <NA>               <NA>             <NA>         <NA> #> 14              <NA>               <NA>             <NA>         <NA> #> 15              <NA>               <NA>             <NA>         <NA> #> 16              <NA>               <NA>             <NA>         <NA> #> 17              <NA>               <NA>             <NA>         <NA> #> 18              <NA>               <NA>             <NA>         <NA> #> 19              <NA>               <NA>             <NA>         <NA> #> 20              <NA>               <NA>             <NA>         <NA> #> 21              <NA>               <NA>             <NA>         <NA> #>    reliable_fit2.linfit max_slope.spline x.max.spline     lambda.spline #> 1                 FALSE 92.2668917228847         20.5  15.5467166096294 #> 2                 FALSE 30.7727385498294           20  31.2872267087641 #> 3                 FALSE 64.1757831646195           16  20.8131240327289 #> 4                 FALSE 242.557704041626         23.5   14.982628746023 #> 5                 FALSE 64.6529094536605           19  21.6712998092256 #> 6                 FALSE 205.579719130273           18  12.5662904914231 #> 7                 FALSE 509.394721871828         21.5  6.95952698278091 #> 8                 FALSE 204.031623957349         17.5  13.4360564669416 #> 9                 FALSE 290.961299939404           13  4.67379381987626 #> 10                FALSE 670.985334314906            6 0.373248436531125 #> 11                FALSE 327.194544214636           17  9.86802427129631 #> 12                FALSE  335.24358478568         17.5  3.65080407904796 #> 13                FALSE 728.625260083634          6.5 0.553816578577824 #> 14                FALSE 346.268113254507         16.5  9.75821807365783 #> 15                FALSE 320.246598452139         17.5  3.21350390586807 #> 16                FALSE  774.05398642078          5.5 0.246732777852533 #> 17                FALSE 337.909403917534         16.5  8.08916482172041 #> 18                FALSE 351.643501664612           18  4.84484452250892 #> 19                FALSE 779.134078966909            6 0.462268482214904 #> 20                FALSE 353.185039298395         16.5   9.5717850859864 #> 21                FALSE 338.826806405161           18  5.01597033523556 #>    max_slope2.spline x.max2.spline lambda2.spline        y0.spline #> 1               <NA>          <NA>           <NA>  1291.4242870252 #> 2               <NA>          <NA>           <NA> 1188.27831547782 #> 3               <NA>          <NA>           <NA> 1565.59217809736 #> 4               <NA>          <NA>           <NA> 1519.80363776351 #> 5               <NA>          <NA>           <NA>  1255.7213080438 #> 6               <NA>          <NA>           <NA> 1624.15289883901 #> 7               <NA>          <NA>           <NA> 1132.18524639308 #> 8               <NA>          <NA>           <NA> 1405.71652864703 #> 9               <NA>          <NA>           <NA> 1468.52438340082 #> 10              <NA>          <NA>           <NA> 1209.47395589045 #> 11              <NA>          <NA>           <NA> 1187.83879461914 #> 12              <NA>          <NA>           <NA> 1467.93981010311 #> 13              <NA>          <NA>           <NA> 891.795404947046 #> 14              <NA>          <NA>           <NA> 1282.77700477438 #> 15              <NA>          <NA>           <NA> 1542.64869773804 #> 16              <NA>          <NA>           <NA> 1132.44043950227 #> 17              <NA>          <NA>           <NA> 862.662992687727 #> 18              <NA>          <NA>           <NA> 1602.42470098365 #> 19              <NA>          <NA>           <NA> 1017.04362101536 #> 20              <NA>          <NA>           <NA>  1323.6959493112 #> 21              <NA>          <NA>           <NA> 1707.52183129309 #>            A.spline        dY.spline  integral.spline reliable_fit.spline #> 1   3427.1255242313  2135.7012372061  82881.406474157                TRUE #> 2  1470.99207749982 282.713762021994 43222.9360971386                TRUE #> 3  2196.18856426073 630.596386163366 67033.6678589485                TRUE #> 4  7592.80063751346 6072.99699974995 151370.675832012                TRUE #> 5  2384.30375521349 1128.58244716969 58249.0814015737                TRUE #> 6  4820.28715109276 3196.13425225375 132414.081549265                TRUE #> 7  17121.2144379564 15989.0291915634 367233.851934483                TRUE #> 8    5206.543176868 3800.82664822097 120525.231431367                TRUE #> 9  7768.18866992603 6299.66428652521  223919.42858498                TRUE #> 10 20079.0095008516 18869.5355449612 490254.828661569                TRUE #> 11 6840.37784263295 5652.53904801381 169914.301957325                TRUE #> 12 9191.86346478591  7723.9236546828 269744.222628614                TRUE #> 13  20481.097768094  19589.302363147 497122.375105375                TRUE #> 14 7000.84532046262 5718.06831568824 179100.135589319                TRUE #> 15 9006.21056404733 7463.56186630929 267724.576457373                TRUE #> 16 20704.0909872879 19571.6505477857 520199.730690857                TRUE #> 17 6952.68659445902 6090.02360177129 178120.140852737                TRUE #> 18 9322.62835009364 7720.20364910999  273698.19440202                TRUE #> 19  19774.702139564 18757.6585185487 508722.732093212                TRUE #> 20 7189.59680355244 5865.90085424124 182547.707805716                TRUE #> 21 9258.53106887529 7551.00923758219 271383.083788705                TRUE #>    reliable_fit2.spline smooth.spline     max_slope.bt         lambda.bt #> 1                 FALSE          0.75 91.7571874621317  15.4951592846805 #> 2                 FALSE          0.75 33.6883675932537  30.0435321725322 #> 3                 FALSE          0.75 65.7003016331875  20.4375137287128 #> 4                 FALSE          0.75 242.804643660357   15.120666562135 #> 5                 FALSE          0.75 65.0978041358775   22.625580976285 #> 6                 FALSE          0.75 205.663389645023  12.4513605101749 #> 7                 FALSE          0.75 511.280601956544  7.16282090330433 #> 8                 FALSE          0.75 200.631649938206  13.3957926427753 #> 9                 FALSE          0.75 288.397209147271  4.72336098803318 #> 10                FALSE          0.75 680.079883766004 0.773277087930799 #> 11                FALSE          0.75 324.555540141284  9.82765163794777 #> 12                FALSE          0.75 335.394880416315  3.86990322944088 #> 13                FALSE          0.75 737.549989502854 0.698544460400932 #> 14                FALSE          0.75  347.95622227628  9.96840361856203 #> 15                FALSE          0.75 319.478458090499  3.33519176457119 #> 16                FALSE          0.75 772.712782102873 0.470223116259992 #> 17                FALSE          0.75 335.883636820561  8.05934706653639 #> 18                FALSE          0.75 349.135163042602  4.96775032673874 #> 19                FALSE          0.75 773.448941458843 0.723675466498743 #> 20                FALSE          0.75 349.278252288334    9.513730213528 #> 21                FALSE          0.75 338.048200830425  5.09698123035893 #>                A.bt            dY.bt      integral.bt  stdmax_slope.bt #> 1  3422.15075496419 2130.66940959556 82215.8029853642 2.28521781444277 #> 2  1460.38036023162 301.487215219054 42116.9898974438 2.76862686375399 #> 3  2193.90028078529 667.528301851681  66089.134443513 1.60099057732196 #> 4  7577.53895926798 6025.11799911221 150359.316792598  2.9290004408476 #> 5  2366.93025392241 1134.75960857041 57308.3258727914 2.67083481036196 #> 6  4820.49910414923 3224.31050626599   130750.4940858 2.32539691342454 #> 7  17093.5763886169 15896.3565267266 364795.204143048 10.8738345401162 #> 8   5202.6191736305 3797.53745496955  119679.09037532 8.52699859678305 #> 9  7767.09056363676 6248.50602200514 220041.794863022 6.35336062278117 #> 10 20079.0891987485 18625.5293818014 487147.469020559 24.8805021364351 #> 11 6776.32973312641 5560.82653009054 167278.913123103 16.0854748446625 #> 12 9183.10626943126 7633.76790538599 266372.755931256 5.96285455624501 #> 13 20437.3934811962 19449.5355468449 490747.509024971 28.5582021267503 #> 14 6962.11121487829 5619.92327961751  176226.69313968 12.3349402998471 #> 15 9001.80418640475  7411.6566978309 265651.991426469 5.33395037753728 #> 16 20657.3915896562 19325.2407691848  513025.54623458 26.1176899905668 #> 17 6866.13883150174 5986.25628779098 174853.017439626 14.0892969276682 #> 18 9322.39225530914 7633.65237395932 267261.410229311 6.57429433802513 #> 19 19777.1000524336 18526.1877629777 495223.347626551 32.1251009964011 #> 20 7135.81339906964 5796.37057598962 180536.617413617 14.0914388632565 #> 21 9254.72505407317 7493.65500248359 268119.257461069 8.42258794597612 #>         stdlambda.bt          stdA.bt         stddY.bt   stdintegral.bt #> 1  0.705540771608567 13.8700474320123 66.4142350740106 993.801654301595 #> 2   2.72205965110038  21.992631050674 89.8034158881178 927.284450259652 #> 3   1.67802559749398 5.01830832458774 115.895872814242 1172.48452199526 #> 4  0.338989268801685 44.7443122727414 78.2749390194751 2566.18127652222 #> 5   2.96563853871121 28.2892824661541 170.649457047427 1091.23987039254 #> 6  0.395181394290108 12.6135117362313  79.467802753223 1894.28426545992 #> 7  0.311898627054443 79.4653740675939 94.9994229525587 4245.55799111226 #> 8  0.744008741502491 20.6082077846747 132.146430238172 1586.11694614267 #> 9  0.358062364664758 20.6018419941618 62.3974435949375 3193.13926154447 #> 10 0.353960326763955  64.283012096253 274.629745653646 6327.60796076254 #> 11 0.872160527891366 84.9628533799471 219.732555663291 3089.95017397695 #> 12 0.441474069831838 10.5378817565086 116.118303539726 6182.12654832107 #> 13 0.309790438388049 79.0487673399243 230.911377883117 8030.80634057796 #> 14 0.727775281624496   55.90727628134 225.423078447555  3546.1102469235 #> 15 0.400105826211087 23.5123520745434 106.174251828912  2648.9353270664 #> 16 0.352009080269672 117.449301216733 233.342550180491 12522.1213640306 #> 17 0.483877154860822 112.216324074938 150.997187996046 4589.36568016936 #> 18 0.435080405597402 9.39182171694711 131.921988006696 6525.02347807843 #> 19 0.361658047030798 78.8023121993293 202.261694319208 12827.2520091036 #> 20  0.41475641192724 85.6591488704806 120.794674975069 2736.77655577445 #> 21 0.635909606105566 9.85130440187095 160.193386684918 3526.90664324438 #>    reliable_fit.bt    ci90.mu.bt.lo    ci90.mu.bt.up  ci90.lambda.bt.lo #> 1             TRUE 87.9980041573734 95.5163707668901   14.3345447153844 #> 2             TRUE 29.1339764023784  38.242758784129   25.5657440464721 #> 3             TRUE 63.0666721334928 68.3339311328821   17.6771616208352 #> 4             TRUE 237.986437935163 247.622849385551   14.5630292149562 #> 5             TRUE 60.7042808728321 69.4913273989229   17.7471055801051 #> 6             TRUE  201.83811172244 209.488667567606   11.8012871165676 #> 7             TRUE 493.393144138053 529.168059775035   6.64974766179977 #> 8             TRUE 186.604737246498 214.658562629914   12.1718982630037 #> 9             TRUE 277.945930922796 298.848487371746   4.13434839815966 #> 10            TRUE 639.151457751569  721.00830978044  0.191012350404093 #> 11            TRUE 298.094934021814 351.016146260754   8.39294756956647 #> 12            TRUE 325.585984671292 345.203776161338    3.1436783845675 #> 13            TRUE  690.57174700435 784.528232001358  0.188939189252591 #> 14            TRUE 327.665245483031 368.247199069528   8.77121328028973 #> 15            TRUE  310.70410971945 328.252806461548   2.67701768045395 #> 16            TRUE  729.74918206839 815.676382137355 -0.108831820783618 #> 17            TRUE 312.706743374547 359.060530266575   7.26336914679034 #> 18            TRUE  338.32044885655 359.949877228653   4.25204305953101 #> 19            TRUE 720.603150319763 826.294732597923   0.12874797913308 #> 20            TRUE 326.097835358277 372.458669218391   8.83145591590769 #> 21            TRUE 324.193043659294 351.903358001556   4.05090992831528 #>    ci90.lambda.bt.up     ci90.A.bt.lo     ci90.A.bt.up ci90.integral.bt.lo #> 1   16.6557738539766 3399.33452693853 3444.96698298985    80580.9992640381 #> 2   34.5213202985924 1424.20248215326 1496.55823830998    40591.6069767667 #> 3   23.1978658365904 2185.64516359134 2202.15539797924    64160.3974048308 #> 4   15.6783039093138 7503.93456557932 7651.14335295664    146137.948592719 #> 5    27.504056372465 2320.39438426558 2413.46612357923    55513.2362859957 #> 6   13.1014339037821 4799.74987734313 4841.24833095533    127634.396469118 #> 7   7.67589414480889 16962.8558482757 17224.2969289581    357811.261247668 #> 8   14.6196870225469 5168.71867182471 5236.51967543629    117069.927998915 #> 9   5.31237357790671 7733.20053355636 7800.98059371715    214789.080777781 #> 10  1.35554182545751 19973.3436438501 20184.8347536468    476738.553925104 #> 11  11.2623557063291  6636.5658393164 6916.09362693642    162195.945086911 #> 12  4.59612807431425  9165.7714539418 9200.44108492072    256203.157759267 #> 13  1.20814973154927  20307.358258922 20567.4287034704     477536.83259472 #> 14  11.1655939568343 6870.14374539549  7054.0786843611    170393.341783491 #> 15  3.99336584868842 8963.12636724212 9040.48200556737    261294.492813445 #> 16   1.0492780533036 20464.1874891546 20850.5956901577     492426.65659075 #> 17  8.85532498628244 6681.54297839847 7050.73468460501    167303.510895748 #> 18  5.68345759394646 9306.94270858477 9337.84180203352    256527.746607872 #> 19  1.31860295386441 19647.4702488657 19906.7298560015    474122.518071575 #> 20  10.1960045111483  6994.9040991777 7276.72269896158    176034.619979369 #> 21  6.14305253240259 9238.51965833209 9270.93044981425    262317.496032932 #>    ci90.integral.bt.up    ci95.mu.bt.lo    ci95.mu.bt.up  ci95.lambda.bt.lo #> 1     83850.6067066903 87.2781605458239 96.2362143784395   14.1122993723277 #> 2     43642.3728181209 28.2618589402959 39.1148762462115   24.7082952563755 #> 3     68017.8714821952 62.5623601016364 68.8382431647385   17.1485835576246 #> 4     154580.684992478 237.063802796296 248.545484524418   14.4562475952837 #> 5     59103.4154595871 59.8629679075681  70.332640364187   16.8129294404111 #> 6     133866.591702481 201.105611694711 210.221167595335   11.6768049773663 #> 7     371779.147038428 489.967886257916 532.593317655172   6.55149959427762 #> 8     122288.252751725 183.918732688511 217.344567187901   11.9375355094304 #> 9     225294.508948262  275.94462232662 300.849795967922   4.02155875329026 #> 10    497556.384116013 631.314099578591 728.845667953417 0.0795148474734477 #> 11    172361.881159296 293.028009445746 356.083070836823   8.11821700328069 #> 12    276542.354103244 323.707685486075 347.082075346555   3.00461405257048 #> 13    503958.185455222 681.575913334423 793.524065671284  0.091355201160356 #> 14    182060.044495869 323.779739288579  372.13270526398   8.54196406657802 #> 15    270009.490039494 309.023915350526 329.933000830472   2.55098434519746 #> 16     533624.43587841 721.522109721362 823.903454484384 -0.219714681068565 #> 17    182402.523983505 308.268614842331  363.49865879879   7.11094784300918 #> 18     277995.07385075 336.249546140072 362.020779945131   4.11499273176783 #> 19    516324.177181526 710.483743505897 836.414139411789 0.0148256943183783 #> 20    185038.614847866 321.659032116351 376.897472460316   8.70080764615061 #> 21    273921.018889206 321.539928456312 354.556473204538   3.85059840239202 #>    ci95.lambda.bt.up     ci95.A.bt.lo     ci95.A.bt.up ci95.integral.bt.lo #> 1   16.8780191970333 3394.96546199744 3449.33604793093     80267.951742933 #> 2    35.378769088689  1417.2748033723 1503.48591709094    40299.5123749349 #> 3    23.726443899801  2184.0643964691 2203.73616510148    63791.0647804023 #> 4   15.7850855289863 7489.84010721341 7665.23781132255    145329.601490615 #> 5    28.438232512159 2311.48326028875 2422.37724755607     55169.495726822 #> 6   13.2259160429835 4795.77662114622 4845.22158715225    127037.696925498 #> 7   7.77414221233103 16937.8242554444 17249.3285217894    356473.910480468 #> 8   14.8540497761202 5162.22708637254 5243.01126088846     116570.30116088 #> 9   5.42516322277611  7726.7109533282 7807.47017394531    213783.241910395 #> 10  1.46703932838815 19953.0944950398 20205.0839024571    474745.357417464 #> 11  11.5370862726148 6609.80254050172 6942.85692575111    161222.610782109 #> 12  4.73519240631128  9162.4520211885 9203.76051767402    254255.787896546 #> 13  1.30573371964151   20282.45789721 20592.3290651825    475007.128597438 #> 14   11.394843170546 6852.53295336687 7071.68947638972     169276.31705571 #> 15  4.11939918394492 8955.71997633864 9047.88839647085    260460.078185419 #> 16  1.16016091358855 20427.1909592714  20887.592220041     488482.18836108 #> 17   9.0077462900636 6646.19483631486 7086.08282668862    165857.860706495 #> 18  5.82050792170965 9303.98428474393 9340.80022587436    254472.364212278 #> 19  1.43252523867911 19622.6475205229 19931.5525843443    470081.933688708 #> 20  10.3266527809054 6967.92146728349 7303.70533085578      175172.5353643 #> 21  6.34336405832584  9235.4164974455 9274.03361070084     261206.52044031 #>    ci95.integral.bt.up #> 1     84163.6542277953 #> 2     43934.4674199527 #> 3     68387.2041066237 #> 4     155389.032094582 #> 5     59447.1560187608 #> 6     134463.291246101 #> 7     373116.497805628 #> 8      122787.87958976 #> 9     226300.347815649 #> 10    499549.580623653 #> 11    173335.215464098 #> 12    278489.723965965 #> 13    506487.889452504 #> 14     183177.06922365 #> 15     270843.90466752 #> 16     537568.90410808 #> 17    183848.174172758 #> 18    280050.456246345 #> 19    520364.761564394 #> 20    185900.699462935 #> 21    275031.994481828"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFitLinear objects — summary.flFitLinear","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"Generic summary function flFitLinear objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"","code":"# S3 method for flFitLinear summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"object object class flFitLinear ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"dataframe parameters extracted linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 'l', x_type = 'time',                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  summary(TestFit) #>   max_slope.linfit    lambda.linfit        dY.linfit         A.linfit #> 1 233.480098034089 15.2207558251445 5820.56714471966 7503.25945241197 #>   x.mu.start.linfit x.mu.end.linfit       r2mu.linfit reliable_fit.linfit #> 1              14.5            30.5 0.996370266149326                TRUE #>   max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1              <NA>               <NA>             <NA>         <NA> #>   reliable_fit2.linfit #> 1                FALSE"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFitSpline objects — summary.flFitSpline","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"Generic summary function flFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"","code":"# S3 method for flFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"object object class flFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"dataframe parameters extracted nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time'))  summary(TestFit) #>   max_slope.spline x.max.spline   lambda.spline max_slope2.spline x.max2.spline #> 1 242.557704041626         23.5 14.982628746023              <NA>          <NA> #>   lambda2.spline        y0.spline         A.spline        dY.spline #> 1           <NA> 1519.80363776351 7592.80063751346 6072.99699974995 #>    integral.spline reliable_fit.spline reliable_fit2.spline smooth.spline #> 1 151370.675832012                TRUE                FALSE          0.75"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"Generic summary function gcBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"","code":"# S3 method for gcBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"object object class gcBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"dataframe statistical parameters extracted spline fit bootstrapping computation.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = 'TestFit',               control = growth.control(fit.opt = 's', nboot.gc = 50))  summary(TestFit) #>              mu.bt        lambda.bt             A.bt            dY.bt #> 1 0.60749371756425 4.36183877667759 6.30107789561384 6.22741078369304 #>        integral.bt           stdmu.bt      stdlambda.bt            stdA.bt #> 1 71.1473721203315 0.0176337854760378 0.253900265424406 0.0233263387027112 #>             stddY.bt   stdintegral.bt reliable_fit.bt     ci90.mu.bt.lo #> 1 0.0249113380593411 1.08323753973353            TRUE 0.578486140456168 #>       ci90.mu.bt.up ci90.lambda.bt.lo ci90.lambda.bt.up     ci90.A.bt.lo #> 1 0.636501294672332  3.94417284005445  4.77950471330074 6.26270606844788 #>      ci90.A.bt.up ci90.integral.bt.lo ci90.integral.bt.up     ci95.mu.bt.lo #> 1 6.3394497227798    69.3654463674699    72.9292978731932 0.572931498031216 #>       ci95.mu.bt.up ci95.lambda.bt.lo ci95.lambda.bt.up     ci95.A.bt.lo #> 1 0.642055937097284  3.86419425644576  4.85948329690943 6.25535827175653 #>       ci95.A.bt.up ci95.integral.bt.lo ci95.integral.bt.up #> 1 6.34679751947116    69.0242265424538    73.2705176982093"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFit objects — summary.gcFit","title":"Generic summary function for gcFit objects — summary.gcFit","text":"Generic summary function gcFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFit objects — summary.gcFit","text":"","code":"# S3 method for gcFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFit objects — summary.gcFit","text":"object object class gcFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFit objects — summary.gcFit","text":"dataframe parameters extracted fits workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFit objects — summary.gcFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE,                                                 nboot.gc = 20)) summary(gcFit) #>    TestId AddId concentration reliability_tag used.model log.x log.y.lin #> 1   Test1     1         0.000            TRUE         NA FALSE      TRUE #> 2   Test1     1         0.017            TRUE         NA FALSE      TRUE #> 3   Test1     1         0.026            TRUE         NA FALSE      TRUE #> 4   Test1     1         0.039            TRUE         NA FALSE      TRUE #> 5   Test1     1         0.059            TRUE         NA FALSE      TRUE #> 6   Test1     1         0.088            TRUE         NA FALSE      TRUE #> 7   Test1     1         0.130            TRUE         NA FALSE      TRUE #> 8   Test1     1         0.200            TRUE         NA FALSE      TRUE #> 9   Test1     1         0.300            TRUE         NA FALSE      TRUE #> 10  Test1     1         0.440            TRUE         NA FALSE      TRUE #> 11  Test1     1         0.670            TRUE         NA FALSE      TRUE #> 12  Test1     1         1.000            TRUE         NA FALSE      TRUE #> 13  Test1     2         0.000            TRUE         NA FALSE      TRUE #> 14  Test1     2         0.017            TRUE         NA FALSE      TRUE #> 15  Test1     2         0.026            TRUE         NA FALSE      TRUE #> 16  Test1     2         0.039            TRUE         NA FALSE      TRUE #> 17  Test1     2         0.059            TRUE         NA FALSE      TRUE #> 18  Test1     2         0.088            TRUE         NA FALSE      TRUE #> 19  Test1     2         0.130            TRUE         NA FALSE      TRUE #> 20  Test1     2         0.200            TRUE         NA FALSE      TRUE #> 21  Test1     2         0.300            TRUE         NA FALSE      TRUE #> 22  Test1     2         0.440            TRUE         NA FALSE      TRUE #> 23  Test1     2         0.670            TRUE         NA FALSE      TRUE #> 24  Test1     2         1.000            TRUE         NA FALSE      TRUE #> 25  Test1     3         0.000            TRUE         NA FALSE      TRUE #> 26  Test1     3         0.026            TRUE         NA FALSE      TRUE #> 27  Test1     3         0.039            TRUE         NA FALSE      TRUE #> 28  Test1     3         0.059            TRUE         NA FALSE      TRUE #> 29  Test1     3         0.088            TRUE         NA FALSE      TRUE #> 30  Test1     3         0.130            TRUE         NA FALSE      TRUE #> 31  Test1     3         0.200            TRUE         NA FALSE      TRUE #> 32  Test1     3         0.300            TRUE         NA FALSE      TRUE #> 33  Test1     3         0.440            TRUE         NA FALSE      TRUE #> 34  Test1     3         0.670            TRUE         NA FALSE      TRUE #> 35  Test1     3         1.000            TRUE         NA FALSE      TRUE #> 36  Test2     1         0.000            TRUE         NA FALSE      TRUE #> 37  Test2     1         0.017            TRUE         NA FALSE      TRUE #> 38  Test2     1         0.026            TRUE         NA FALSE      TRUE #> 39  Test2     1         0.039            TRUE         NA FALSE      TRUE #> 40  Test2     1         0.059            TRUE         NA FALSE      TRUE #> 41  Test2     1         0.088            TRUE         NA FALSE      TRUE #> 42  Test2     1         0.130            TRUE         NA FALSE      TRUE #> 43  Test2     1         0.200            TRUE         NA FALSE      TRUE #> 44  Test2     1         0.300            TRUE         NA FALSE      TRUE #> 45  Test2     1         0.440            TRUE         NA FALSE      TRUE #> 46  Test2     1         0.670            TRUE         NA FALSE      TRUE #> 47  Test2     1         1.000            TRUE         NA FALSE      TRUE #> 48  Test2     2         0.000            TRUE         NA FALSE      TRUE #> 49  Test2     2         0.017            TRUE         NA FALSE      TRUE #> 50  Test2     2         0.026            TRUE         NA FALSE      TRUE #> 51  Test2     2         0.039            TRUE         NA FALSE      TRUE #> 52  Test2     2         0.059            TRUE         NA FALSE      TRUE #> 53  Test2     2         0.088            TRUE         NA FALSE      TRUE #> 54  Test2     2         0.130            TRUE         NA FALSE      TRUE #> 55  Test2     2         0.200            TRUE         NA FALSE      TRUE #> 56  Test2     2         0.300            TRUE         NA FALSE      TRUE #> 57  Test2     2         0.440            TRUE         NA FALSE      TRUE #> 58  Test2     2         0.670            TRUE         NA FALSE      TRUE #> 59  Test2     2         1.000            TRUE         NA FALSE      TRUE #> 60  Test2     3         0.000            TRUE         NA FALSE      TRUE #> 61  Test2     3         0.026            TRUE         NA FALSE      TRUE #> 62  Test2     3         0.039            TRUE         NA FALSE      TRUE #> 63  Test2     3         0.059            TRUE         NA FALSE      TRUE #> 64  Test2     3         0.088            TRUE         NA FALSE      TRUE #> 65  Test2     3         0.130            TRUE         NA FALSE      TRUE #> 66  Test2     3         0.200            TRUE         NA FALSE      TRUE #> 67  Test2     3         0.300            TRUE         NA FALSE      TRUE #> 68  Test2     3         0.440            TRUE         NA FALSE      TRUE #> 69  Test2     3         0.670            TRUE         NA FALSE      TRUE #> 70  Test2     3         1.000            TRUE         NA FALSE      TRUE #>    log.y.spline log.y.model nboot.gc mu.linfit tD.linfit lambda.linfit #> 1          TRUE        TRUE       20         0      <NA>          <NA> #> 2          TRUE        TRUE       20         0      <NA>          <NA> #> 3          TRUE        TRUE       20         0      <NA>          <NA> #> 4          TRUE        TRUE       20         0      <NA>          <NA> #> 5          TRUE        TRUE       20         0      <NA>          <NA> #> 6          TRUE        TRUE       20         0      <NA>          <NA> #> 7          TRUE        TRUE       20         0      <NA>          <NA> #> 8          TRUE        TRUE       20         0      <NA>          <NA> #> 9          TRUE        TRUE       20         0      <NA>          <NA> #> 10         TRUE        TRUE       20         0      <NA>          <NA> #> 11         TRUE        TRUE       20         0      <NA>          <NA> #> 12         TRUE        TRUE       20         0      <NA>          <NA> #> 13         TRUE        TRUE       20         0      <NA>          <NA> #> 14         TRUE        TRUE       20         0      <NA>          <NA> #> 15         TRUE        TRUE       20         0      <NA>          <NA> #> 16         TRUE        TRUE       20         0      <NA>          <NA> #> 17         TRUE        TRUE       20         0      <NA>          <NA> #> 18         TRUE        TRUE       20         0      <NA>          <NA> #> 19         TRUE        TRUE       20         0      <NA>          <NA> #> 20         TRUE        TRUE       20         0      <NA>          <NA> #> 21         TRUE        TRUE       20         0      <NA>          <NA> #> 22         TRUE        TRUE       20         0      <NA>          <NA> #> 23         TRUE        TRUE       20         0      <NA>          <NA> #> 24         TRUE        TRUE       20         0      <NA>          <NA> #> 25         TRUE        TRUE       20         0      <NA>          <NA> #> 26         TRUE        TRUE       20         0      <NA>          <NA> #> 27         TRUE        TRUE       20         0      <NA>          <NA> #> 28         TRUE        TRUE       20         0      <NA>          <NA> #> 29         TRUE        TRUE       20         0      <NA>          <NA> #> 30         TRUE        TRUE       20         0      <NA>          <NA> #> 31         TRUE        TRUE       20         0      <NA>          <NA> #> 32         TRUE        TRUE       20         0      <NA>          <NA> #> 33         TRUE        TRUE       20         0      <NA>          <NA> #> 34         TRUE        TRUE       20         0      <NA>          <NA> #> 35         TRUE        TRUE       20         0      <NA>          <NA> #> 36         TRUE        TRUE       20         0      <NA>          <NA> #> 37         TRUE        TRUE       20         0      <NA>          <NA> #> 38         TRUE        TRUE       20         0      <NA>          <NA> #> 39         TRUE        TRUE       20         0      <NA>          <NA> #> 40         TRUE        TRUE       20         0      <NA>          <NA> #> 41         TRUE        TRUE       20         0      <NA>          <NA> #> 42         TRUE        TRUE       20         0      <NA>          <NA> #> 43         TRUE        TRUE       20         0      <NA>          <NA> #> 44         TRUE        TRUE       20         0      <NA>          <NA> #> 45         TRUE        TRUE       20         0      <NA>          <NA> #> 46         TRUE        TRUE       20         0      <NA>          <NA> #> 47         TRUE        TRUE       20         0      <NA>          <NA> #> 48         TRUE        TRUE       20         0      <NA>          <NA> #> 49         TRUE        TRUE       20         0      <NA>          <NA> #> 50         TRUE        TRUE       20         0      <NA>          <NA> #> 51         TRUE        TRUE       20         0      <NA>          <NA> #> 52         TRUE        TRUE       20         0      <NA>          <NA> #> 53         TRUE        TRUE       20         0      <NA>          <NA> #> 54         TRUE        TRUE       20         0      <NA>          <NA> #> 55         TRUE        TRUE       20         0      <NA>          <NA> #> 56         TRUE        TRUE       20         0      <NA>          <NA> #> 57         TRUE        TRUE       20         0      <NA>          <NA> #> 58         TRUE        TRUE       20         0      <NA>          <NA> #> 59         TRUE        TRUE       20         0      <NA>          <NA> #> 60         TRUE        TRUE       20         0      <NA>          <NA> #> 61         TRUE        TRUE       20         0      <NA>          <NA> #> 62         TRUE        TRUE       20         0      <NA>          <NA> #> 63         TRUE        TRUE       20         0      <NA>          <NA> #> 64         TRUE        TRUE       20         0      <NA>          <NA> #> 65         TRUE        TRUE       20         0      <NA>          <NA> #> 66         TRUE        TRUE       20         0      <NA>          <NA> #> 67         TRUE        TRUE       20         0      <NA>          <NA> #> 68         TRUE        TRUE       20         0      <NA>          <NA> #> 69         TRUE        TRUE       20         0      <NA>          <NA> #> 70         TRUE        TRUE       20         0      <NA>          <NA> #>    dY.linfit A.linfit tmu.start.linfit tmu.end.linfit r2mu.linfit #> 1          0     <NA>             <NA>           <NA>        <NA> #> 2          0     <NA>             <NA>           <NA>        <NA> #> 3          0     <NA>             <NA>           <NA>        <NA> #> 4          0     <NA>             <NA>           <NA>        <NA> #> 5          0     <NA>             <NA>           <NA>        <NA> #> 6          0     <NA>             <NA>           <NA>        <NA> #> 7          0     <NA>             <NA>           <NA>        <NA> #> 8          0     <NA>             <NA>           <NA>        <NA> #> 9          0     <NA>             <NA>           <NA>        <NA> #> 10         0     <NA>             <NA>           <NA>        <NA> #> 11         0     <NA>             <NA>           <NA>        <NA> #> 12         0     <NA>             <NA>           <NA>        <NA> #> 13         0     <NA>             <NA>           <NA>        <NA> #> 14         0     <NA>             <NA>           <NA>        <NA> #> 15         0     <NA>             <NA>           <NA>        <NA> #> 16         0     <NA>             <NA>           <NA>        <NA> #> 17         0     <NA>             <NA>           <NA>        <NA> #> 18         0     <NA>             <NA>           <NA>        <NA> #> 19         0     <NA>             <NA>           <NA>        <NA> #> 20         0     <NA>             <NA>           <NA>        <NA> #> 21         0     <NA>             <NA>           <NA>        <NA> #> 22         0     <NA>             <NA>           <NA>        <NA> #> 23         0     <NA>             <NA>           <NA>        <NA> #> 24         0     <NA>             <NA>           <NA>        <NA> #> 25         0     <NA>             <NA>           <NA>        <NA> #> 26         0     <NA>             <NA>           <NA>        <NA> #> 27         0     <NA>             <NA>           <NA>        <NA> #> 28         0     <NA>             <NA>           <NA>        <NA> #> 29         0     <NA>             <NA>           <NA>        <NA> #> 30         0     <NA>             <NA>           <NA>        <NA> #> 31         0     <NA>             <NA>           <NA>        <NA> #> 32         0     <NA>             <NA>           <NA>        <NA> #> 33         0     <NA>             <NA>           <NA>        <NA> #> 34         0     <NA>             <NA>           <NA>        <NA> #> 35         0     <NA>             <NA>           <NA>        <NA> #> 36         0     <NA>             <NA>           <NA>        <NA> #> 37         0     <NA>             <NA>           <NA>        <NA> #> 38         0     <NA>             <NA>           <NA>        <NA> #> 39         0     <NA>             <NA>           <NA>        <NA> #> 40         0     <NA>             <NA>           <NA>        <NA> #> 41         0     <NA>             <NA>           <NA>        <NA> #> 42         0     <NA>             <NA>           <NA>        <NA> #> 43         0     <NA>             <NA>           <NA>        <NA> #> 44         0     <NA>             <NA>           <NA>        <NA> #> 45         0     <NA>             <NA>           <NA>        <NA> #> 46         0     <NA>             <NA>           <NA>        <NA> #> 47         0     <NA>             <NA>           <NA>        <NA> #> 48         0     <NA>             <NA>           <NA>        <NA> #> 49         0     <NA>             <NA>           <NA>        <NA> #> 50         0     <NA>             <NA>           <NA>        <NA> #> 51         0     <NA>             <NA>           <NA>        <NA> #> 52         0     <NA>             <NA>           <NA>        <NA> #> 53         0     <NA>             <NA>           <NA>        <NA> #> 54         0     <NA>             <NA>           <NA>        <NA> #> 55         0     <NA>             <NA>           <NA>        <NA> #> 56         0     <NA>             <NA>           <NA>        <NA> #> 57         0     <NA>             <NA>           <NA>        <NA> #> 58         0     <NA>             <NA>           <NA>        <NA> #> 59         0     <NA>             <NA>           <NA>        <NA> #> 60         0     <NA>             <NA>           <NA>        <NA> #> 61         0     <NA>             <NA>           <NA>        <NA> #> 62         0     <NA>             <NA>           <NA>        <NA> #> 63         0     <NA>             <NA>           <NA>        <NA> #> 64         0     <NA>             <NA>           <NA>        <NA> #> 65         0     <NA>             <NA>           <NA>        <NA> #> 66         0     <NA>             <NA>           <NA>        <NA> #> 67         0     <NA>             <NA>           <NA>        <NA> #> 68         0     <NA>             <NA>           <NA>        <NA> #> 69         0     <NA>             <NA>           <NA>        <NA> #> 70         0     <NA>             <NA>           <NA>        <NA> #>    reliable_fit.linfit mu2.linfit tD2.linfit tmu2.start.linfit tmu2.end.linfit #> 1                FALSE       <NA>       <NA>              <NA>            <NA> #> 2                FALSE       <NA>       <NA>              <NA>            <NA> #> 3                FALSE       <NA>       <NA>              <NA>            <NA> #> 4                FALSE       <NA>       <NA>              <NA>            <NA> #> 5                FALSE       <NA>       <NA>              <NA>            <NA> #> 6                FALSE       <NA>       <NA>              <NA>            <NA> #> 7                FALSE       <NA>       <NA>              <NA>            <NA> #> 8                FALSE       <NA>       <NA>              <NA>            <NA> #> 9                FALSE       <NA>       <NA>              <NA>            <NA> #> 10               FALSE       <NA>       <NA>              <NA>            <NA> #> 11               FALSE       <NA>       <NA>              <NA>            <NA> #> 12               FALSE       <NA>       <NA>              <NA>            <NA> #> 13               FALSE       <NA>       <NA>              <NA>            <NA> #> 14               FALSE       <NA>       <NA>              <NA>            <NA> #> 15               FALSE       <NA>       <NA>              <NA>            <NA> #> 16               FALSE       <NA>       <NA>              <NA>            <NA> #> 17               FALSE       <NA>       <NA>              <NA>            <NA> #> 18               FALSE       <NA>       <NA>              <NA>            <NA> #> 19               FALSE       <NA>       <NA>              <NA>            <NA> #> 20               FALSE       <NA>       <NA>              <NA>            <NA> #> 21               FALSE       <NA>       <NA>              <NA>            <NA> #> 22               FALSE       <NA>       <NA>              <NA>            <NA> #> 23               FALSE       <NA>       <NA>              <NA>            <NA> #> 24               FALSE       <NA>       <NA>              <NA>            <NA> #> 25               FALSE       <NA>       <NA>              <NA>            <NA> #> 26               FALSE       <NA>       <NA>              <NA>            <NA> #> 27               FALSE       <NA>       <NA>              <NA>            <NA> #> 28               FALSE       <NA>       <NA>              <NA>            <NA> #> 29               FALSE       <NA>       <NA>              <NA>            <NA> #> 30               FALSE       <NA>       <NA>              <NA>            <NA> #> 31               FALSE       <NA>       <NA>              <NA>            <NA> #> 32               FALSE       <NA>       <NA>              <NA>            <NA> #> 33               FALSE       <NA>       <NA>              <NA>            <NA> #> 34               FALSE       <NA>       <NA>              <NA>            <NA> #> 35               FALSE       <NA>       <NA>              <NA>            <NA> #> 36               FALSE       <NA>       <NA>              <NA>            <NA> #> 37               FALSE       <NA>       <NA>              <NA>            <NA> #> 38               FALSE       <NA>       <NA>              <NA>            <NA> #> 39               FALSE       <NA>       <NA>              <NA>            <NA> #> 40               FALSE       <NA>       <NA>              <NA>            <NA> #> 41               FALSE       <NA>       <NA>              <NA>            <NA> #> 42               FALSE       <NA>       <NA>              <NA>            <NA> #> 43               FALSE       <NA>       <NA>              <NA>            <NA> #> 44               FALSE       <NA>       <NA>              <NA>            <NA> #> 45               FALSE       <NA>       <NA>              <NA>            <NA> #> 46               FALSE       <NA>       <NA>              <NA>            <NA> #> 47               FALSE       <NA>       <NA>              <NA>            <NA> #> 48               FALSE       <NA>       <NA>              <NA>            <NA> #> 49               FALSE       <NA>       <NA>              <NA>            <NA> #> 50               FALSE       <NA>       <NA>              <NA>            <NA> #> 51               FALSE       <NA>       <NA>              <NA>            <NA> #> 52               FALSE       <NA>       <NA>              <NA>            <NA> #> 53               FALSE       <NA>       <NA>              <NA>            <NA> #> 54               FALSE       <NA>       <NA>              <NA>            <NA> #> 55               FALSE       <NA>       <NA>              <NA>            <NA> #> 56               FALSE       <NA>       <NA>              <NA>            <NA> #> 57               FALSE       <NA>       <NA>              <NA>            <NA> #> 58               FALSE       <NA>       <NA>              <NA>            <NA> #> 59               FALSE       <NA>       <NA>              <NA>            <NA> #> 60               FALSE       <NA>       <NA>              <NA>            <NA> #> 61               FALSE       <NA>       <NA>              <NA>            <NA> #> 62               FALSE       <NA>       <NA>              <NA>            <NA> #> 63               FALSE       <NA>       <NA>              <NA>            <NA> #> 64               FALSE       <NA>       <NA>              <NA>            <NA> #> 65               FALSE       <NA>       <NA>              <NA>            <NA> #> 66               FALSE       <NA>       <NA>              <NA>            <NA> #> 67               FALSE       <NA>       <NA>              <NA>            <NA> #> 68               FALSE       <NA>       <NA>              <NA>            <NA> #> 69               FALSE       <NA>       <NA>              <NA>            <NA> #> 70               FALSE       <NA>       <NA>              <NA>            <NA> #>    r2mu2.linfit reliable_fit2.linfit mu.model tD.model lambda.model A.model #> 1          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 2          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 3          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 4          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 5          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 6          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 7          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 8          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 9          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 10         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 11         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 12         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 13         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 14         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 15         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 16         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 17         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 18         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 19         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 20         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 21         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 22         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 23         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 24         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 25         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 26         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 27         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 28         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 29         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 30         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 31         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 32         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 33         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 34         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 35         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 36         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 37         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 38         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 39         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 40         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 41         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 42         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 43         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 44         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 45         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 46         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 47         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 48         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 49         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 50         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 51         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 52         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 53         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 54         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 55         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 56         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 57         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 58         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 59         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 60         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 61         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 62         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 63         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 64         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 65         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 66         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 67         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 68         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 69         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 70         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #>    dY.model A.orig.model dY.orig.model integral.model parameter_nu.model #> 1      <NA>         <NA>          <NA>           <NA>               <NA> #> 2      <NA>         <NA>          <NA>           <NA>               <NA> #> 3      <NA>         <NA>          <NA>           <NA>               <NA> #> 4      <NA>         <NA>          <NA>           <NA>               <NA> #> 5      <NA>         <NA>          <NA>           <NA>               <NA> #> 6      <NA>         <NA>          <NA>           <NA>               <NA> #> 7      <NA>         <NA>          <NA>           <NA>               <NA> #> 8      <NA>         <NA>          <NA>           <NA>               <NA> #> 9      <NA>         <NA>          <NA>           <NA>               <NA> #> 10     <NA>         <NA>          <NA>           <NA>               <NA> #> 11     <NA>         <NA>          <NA>           <NA>               <NA> #> 12     <NA>         <NA>          <NA>           <NA>               <NA> #> 13     <NA>         <NA>          <NA>           <NA>               <NA> #> 14     <NA>         <NA>          <NA>           <NA>               <NA> #> 15     <NA>         <NA>          <NA>           <NA>               <NA> #> 16     <NA>         <NA>          <NA>           <NA>               <NA> #> 17     <NA>         <NA>          <NA>           <NA>               <NA> #> 18     <NA>         <NA>          <NA>           <NA>               <NA> #> 19     <NA>         <NA>          <NA>           <NA>               <NA> #> 20     <NA>         <NA>          <NA>           <NA>               <NA> #> 21     <NA>         <NA>          <NA>           <NA>               <NA> #> 22     <NA>         <NA>          <NA>           <NA>               <NA> #> 23     <NA>         <NA>          <NA>           <NA>               <NA> #> 24     <NA>         <NA>          <NA>           <NA>               <NA> #> 25     <NA>         <NA>          <NA>           <NA>               <NA> #> 26     <NA>         <NA>          <NA>           <NA>               <NA> #> 27     <NA>         <NA>          <NA>           <NA>               <NA> #> 28     <NA>         <NA>          <NA>           <NA>               <NA> #> 29     <NA>         <NA>          <NA>           <NA>               <NA> #> 30     <NA>         <NA>          <NA>           <NA>               <NA> #> 31     <NA>         <NA>          <NA>           <NA>               <NA> #> 32     <NA>         <NA>          <NA>           <NA>               <NA> #> 33     <NA>         <NA>          <NA>           <NA>               <NA> #> 34     <NA>         <NA>          <NA>           <NA>               <NA> #> 35     <NA>         <NA>          <NA>           <NA>               <NA> #> 36     <NA>         <NA>          <NA>           <NA>               <NA> #> 37     <NA>         <NA>          <NA>           <NA>               <NA> #> 38     <NA>         <NA>          <NA>           <NA>               <NA> #> 39     <NA>         <NA>          <NA>           <NA>               <NA> #> 40     <NA>         <NA>          <NA>           <NA>               <NA> #> 41     <NA>         <NA>          <NA>           <NA>               <NA> #> 42     <NA>         <NA>          <NA>           <NA>               <NA> #> 43     <NA>         <NA>          <NA>           <NA>               <NA> #> 44     <NA>         <NA>          <NA>           <NA>               <NA> #> 45     <NA>         <NA>          <NA>           <NA>               <NA> #> 46     <NA>         <NA>          <NA>           <NA>               <NA> #> 47     <NA>         <NA>          <NA>           <NA>               <NA> #> 48     <NA>         <NA>          <NA>           <NA>               <NA> #> 49     <NA>         <NA>          <NA>           <NA>               <NA> #> 50     <NA>         <NA>          <NA>           <NA>               <NA> #> 51     <NA>         <NA>          <NA>           <NA>               <NA> #> 52     <NA>         <NA>          <NA>           <NA>               <NA> #> 53     <NA>         <NA>          <NA>           <NA>               <NA> #> 54     <NA>         <NA>          <NA>           <NA>               <NA> #> 55     <NA>         <NA>          <NA>           <NA>               <NA> #> 56     <NA>         <NA>          <NA>           <NA>               <NA> #> 57     <NA>         <NA>          <NA>           <NA>               <NA> #> 58     <NA>         <NA>          <NA>           <NA>               <NA> #> 59     <NA>         <NA>          <NA>           <NA>               <NA> #> 60     <NA>         <NA>          <NA>           <NA>               <NA> #> 61     <NA>         <NA>          <NA>           <NA>               <NA> #> 62     <NA>         <NA>          <NA>           <NA>               <NA> #> 63     <NA>         <NA>          <NA>           <NA>               <NA> #> 64     <NA>         <NA>          <NA>           <NA>               <NA> #> 65     <NA>         <NA>          <NA>           <NA>               <NA> #> 66     <NA>         <NA>          <NA>           <NA>               <NA> #> 67     <NA>         <NA>          <NA>           <NA>               <NA> #> 68     <NA>         <NA>          <NA>           <NA>               <NA> #> 69     <NA>         <NA>          <NA>           <NA>               <NA> #> 70     <NA>         <NA>          <NA>           <NA>               <NA> #>    parameter_alpha.model parameter_t_shift.model parameter_y0.model stdmu.model #> 1                   <NA>                    <NA>               <NA>        <NA> #> 2                   <NA>                    <NA>               <NA>        <NA> #> 3                   <NA>                    <NA>               <NA>        <NA> #> 4                   <NA>                    <NA>               <NA>        <NA> #> 5                   <NA>                    <NA>               <NA>        <NA> #> 6                   <NA>                    <NA>               <NA>        <NA> #> 7                   <NA>                    <NA>               <NA>        <NA> #> 8                   <NA>                    <NA>               <NA>        <NA> #> 9                   <NA>                    <NA>               <NA>        <NA> #> 10                  <NA>                    <NA>               <NA>        <NA> #> 11                  <NA>                    <NA>               <NA>        <NA> #> 12                  <NA>                    <NA>               <NA>        <NA> #> 13                  <NA>                    <NA>               <NA>        <NA> #> 14                  <NA>                    <NA>               <NA>        <NA> #> 15                  <NA>                    <NA>               <NA>        <NA> #> 16                  <NA>                    <NA>               <NA>        <NA> #> 17                  <NA>                    <NA>               <NA>        <NA> #> 18                  <NA>                    <NA>               <NA>        <NA> #> 19                  <NA>                    <NA>               <NA>        <NA> #> 20                  <NA>                    <NA>               <NA>        <NA> #> 21                  <NA>                    <NA>               <NA>        <NA> #> 22                  <NA>                    <NA>               <NA>        <NA> #> 23                  <NA>                    <NA>               <NA>        <NA> #> 24                  <NA>                    <NA>               <NA>        <NA> #> 25                  <NA>                    <NA>               <NA>        <NA> #> 26                  <NA>                    <NA>               <NA>        <NA> #> 27                  <NA>                    <NA>               <NA>        <NA> #> 28                  <NA>                    <NA>               <NA>        <NA> #> 29                  <NA>                    <NA>               <NA>        <NA> #> 30                  <NA>                    <NA>               <NA>        <NA> #> 31                  <NA>                    <NA>               <NA>        <NA> #> 32                  <NA>                    <NA>               <NA>        <NA> #> 33                  <NA>                    <NA>               <NA>        <NA> #> 34                  <NA>                    <NA>               <NA>        <NA> #> 35                  <NA>                    <NA>               <NA>        <NA> #> 36                  <NA>                    <NA>               <NA>        <NA> #> 37                  <NA>                    <NA>               <NA>        <NA> #> 38                  <NA>                    <NA>               <NA>        <NA> #> 39                  <NA>                    <NA>               <NA>        <NA> #> 40                  <NA>                    <NA>               <NA>        <NA> #> 41                  <NA>                    <NA>               <NA>        <NA> #> 42                  <NA>                    <NA>               <NA>        <NA> #> 43                  <NA>                    <NA>               <NA>        <NA> #> 44                  <NA>                    <NA>               <NA>        <NA> #> 45                  <NA>                    <NA>               <NA>        <NA> #> 46                  <NA>                    <NA>               <NA>        <NA> #> 47                  <NA>                    <NA>               <NA>        <NA> #> 48                  <NA>                    <NA>               <NA>        <NA> #> 49                  <NA>                    <NA>               <NA>        <NA> #> 50                  <NA>                    <NA>               <NA>        <NA> #> 51                  <NA>                    <NA>               <NA>        <NA> #> 52                  <NA>                    <NA>               <NA>        <NA> #> 53                  <NA>                    <NA>               <NA>        <NA> #> 54                  <NA>                    <NA>               <NA>        <NA> #> 55                  <NA>                    <NA>               <NA>        <NA> #> 56                  <NA>                    <NA>               <NA>        <NA> #> 57                  <NA>                    <NA>               <NA>        <NA> #> 58                  <NA>                    <NA>               <NA>        <NA> #> 59                  <NA>                    <NA>               <NA>        <NA> #> 60                  <NA>                    <NA>               <NA>        <NA> #> 61                  <NA>                    <NA>               <NA>        <NA> #> 62                  <NA>                    <NA>               <NA>        <NA> #> 63                  <NA>                    <NA>               <NA>        <NA> #> 64                  <NA>                    <NA>               <NA>        <NA> #> 65                  <NA>                    <NA>               <NA>        <NA> #> 66                  <NA>                    <NA>               <NA>        <NA> #> 67                  <NA>                    <NA>               <NA>        <NA> #> 68                  <NA>                    <NA>               <NA>        <NA> #> 69                  <NA>                    <NA>               <NA>        <NA> #> 70                  <NA>                    <NA>               <NA>        <NA> #>    stdlambda.model stdA.model reliable_fit.model ci90.mu.model.lo #> 1             <NA>       <NA>              FALSE             <NA> #> 2             <NA>       <NA>              FALSE             <NA> #> 3             <NA>       <NA>              FALSE             <NA> #> 4             <NA>       <NA>              FALSE             <NA> #> 5             <NA>       <NA>              FALSE             <NA> #> 6             <NA>       <NA>              FALSE             <NA> #> 7             <NA>       <NA>              FALSE             <NA> #> 8             <NA>       <NA>              FALSE             <NA> #> 9             <NA>       <NA>              FALSE             <NA> #> 10            <NA>       <NA>              FALSE             <NA> #> 11            <NA>       <NA>              FALSE             <NA> #> 12            <NA>       <NA>              FALSE             <NA> #> 13            <NA>       <NA>              FALSE             <NA> #> 14            <NA>       <NA>              FALSE             <NA> #> 15            <NA>       <NA>              FALSE             <NA> #> 16            <NA>       <NA>              FALSE             <NA> #> 17            <NA>       <NA>              FALSE             <NA> #> 18            <NA>       <NA>              FALSE             <NA> #> 19            <NA>       <NA>              FALSE             <NA> #> 20            <NA>       <NA>              FALSE             <NA> #> 21            <NA>       <NA>              FALSE             <NA> #> 22            <NA>       <NA>              FALSE             <NA> #> 23            <NA>       <NA>              FALSE             <NA> #> 24            <NA>       <NA>              FALSE             <NA> #> 25            <NA>       <NA>              FALSE             <NA> #> 26            <NA>       <NA>              FALSE             <NA> #> 27            <NA>       <NA>              FALSE             <NA> #> 28            <NA>       <NA>              FALSE             <NA> #> 29            <NA>       <NA>              FALSE             <NA> #> 30            <NA>       <NA>              FALSE             <NA> #> 31            <NA>       <NA>              FALSE             <NA> #> 32            <NA>       <NA>              FALSE             <NA> #> 33            <NA>       <NA>              FALSE             <NA> #> 34            <NA>       <NA>              FALSE             <NA> #> 35            <NA>       <NA>              FALSE             <NA> #> 36            <NA>       <NA>              FALSE             <NA> #> 37            <NA>       <NA>              FALSE             <NA> #> 38            <NA>       <NA>              FALSE             <NA> #> 39            <NA>       <NA>              FALSE             <NA> #> 40            <NA>       <NA>              FALSE             <NA> #> 41            <NA>       <NA>              FALSE             <NA> #> 42            <NA>       <NA>              FALSE             <NA> #> 43            <NA>       <NA>              FALSE             <NA> #> 44            <NA>       <NA>              FALSE             <NA> #> 45            <NA>       <NA>              FALSE             <NA> #> 46            <NA>       <NA>              FALSE             <NA> #> 47            <NA>       <NA>              FALSE             <NA> #> 48            <NA>       <NA>              FALSE             <NA> #> 49            <NA>       <NA>              FALSE             <NA> #> 50            <NA>       <NA>              FALSE             <NA> #> 51            <NA>       <NA>              FALSE             <NA> #> 52            <NA>       <NA>              FALSE             <NA> #> 53            <NA>       <NA>              FALSE             <NA> #> 54            <NA>       <NA>              FALSE             <NA> #> 55            <NA>       <NA>              FALSE             <NA> #> 56            <NA>       <NA>              FALSE             <NA> #> 57            <NA>       <NA>              FALSE             <NA> #> 58            <NA>       <NA>              FALSE             <NA> #> 59            <NA>       <NA>              FALSE             <NA> #> 60            <NA>       <NA>              FALSE             <NA> #> 61            <NA>       <NA>              FALSE             <NA> #> 62            <NA>       <NA>              FALSE             <NA> #> 63            <NA>       <NA>              FALSE             <NA> #> 64            <NA>       <NA>              FALSE             <NA> #> 65            <NA>       <NA>              FALSE             <NA> #> 66            <NA>       <NA>              FALSE             <NA> #> 67            <NA>       <NA>              FALSE             <NA> #> 68            <NA>       <NA>              FALSE             <NA> #> 69            <NA>       <NA>              FALSE             <NA> #> 70            <NA>       <NA>              FALSE             <NA> #>    ci90.mu.model.up ci90.lambda.model.lo ci90.lambda.model.up ci90.A.model.lo #> 1              <NA>                 <NA>                 <NA>            <NA> #> 2              <NA>                 <NA>                 <NA>            <NA> #> 3              <NA>                 <NA>                 <NA>            <NA> #> 4              <NA>                 <NA>                 <NA>            <NA> #> 5              <NA>                 <NA>                 <NA>            <NA> #> 6              <NA>                 <NA>                 <NA>            <NA> #> 7              <NA>                 <NA>                 <NA>            <NA> #> 8              <NA>                 <NA>                 <NA>            <NA> #> 9              <NA>                 <NA>                 <NA>            <NA> #> 10             <NA>                 <NA>                 <NA>            <NA> #> 11             <NA>                 <NA>                 <NA>            <NA> #> 12             <NA>                 <NA>                 <NA>            <NA> #> 13             <NA>                 <NA>                 <NA>            <NA> #> 14             <NA>                 <NA>                 <NA>            <NA> #> 15             <NA>                 <NA>                 <NA>            <NA> #> 16             <NA>                 <NA>                 <NA>            <NA> #> 17             <NA>                 <NA>                 <NA>            <NA> #> 18             <NA>                 <NA>                 <NA>            <NA> #> 19             <NA>                 <NA>                 <NA>            <NA> #> 20             <NA>                 <NA>                 <NA>            <NA> #> 21             <NA>                 <NA>                 <NA>            <NA> #> 22             <NA>                 <NA>                 <NA>            <NA> #> 23             <NA>                 <NA>                 <NA>            <NA> #> 24             <NA>                 <NA>                 <NA>            <NA> #> 25             <NA>                 <NA>                 <NA>            <NA> #> 26             <NA>                 <NA>                 <NA>            <NA> #> 27             <NA>                 <NA>                 <NA>            <NA> #> 28             <NA>                 <NA>                 <NA>            <NA> #> 29             <NA>                 <NA>                 <NA>            <NA> #> 30             <NA>                 <NA>                 <NA>            <NA> #> 31             <NA>                 <NA>                 <NA>            <NA> #> 32             <NA>                 <NA>                 <NA>            <NA> #> 33             <NA>                 <NA>                 <NA>            <NA> #> 34             <NA>                 <NA>                 <NA>            <NA> #> 35             <NA>                 <NA>                 <NA>            <NA> #> 36             <NA>                 <NA>                 <NA>            <NA> #> 37             <NA>                 <NA>                 <NA>            <NA> #> 38             <NA>                 <NA>                 <NA>            <NA> #> 39             <NA>                 <NA>                 <NA>            <NA> #> 40             <NA>                 <NA>                 <NA>            <NA> #> 41             <NA>                 <NA>                 <NA>            <NA> #> 42             <NA>                 <NA>                 <NA>            <NA> #> 43             <NA>                 <NA>                 <NA>            <NA> #> 44             <NA>                 <NA>                 <NA>            <NA> #> 45             <NA>                 <NA>                 <NA>            <NA> #> 46             <NA>                 <NA>                 <NA>            <NA> #> 47             <NA>                 <NA>                 <NA>            <NA> #> 48             <NA>                 <NA>                 <NA>            <NA> #> 49             <NA>                 <NA>                 <NA>            <NA> #> 50             <NA>                 <NA>                 <NA>            <NA> #> 51             <NA>                 <NA>                 <NA>            <NA> #> 52             <NA>                 <NA>                 <NA>            <NA> #> 53             <NA>                 <NA>                 <NA>            <NA> #> 54             <NA>                 <NA>                 <NA>            <NA> #> 55             <NA>                 <NA>                 <NA>            <NA> #> 56             <NA>                 <NA>                 <NA>            <NA> #> 57             <NA>                 <NA>                 <NA>            <NA> #> 58             <NA>                 <NA>                 <NA>            <NA> #> 59             <NA>                 <NA>                 <NA>            <NA> #> 60             <NA>                 <NA>                 <NA>            <NA> #> 61             <NA>                 <NA>                 <NA>            <NA> #> 62             <NA>                 <NA>                 <NA>            <NA> #> 63             <NA>                 <NA>                 <NA>            <NA> #> 64             <NA>                 <NA>                 <NA>            <NA> #> 65             <NA>                 <NA>                 <NA>            <NA> #> 66             <NA>                 <NA>                 <NA>            <NA> #> 67             <NA>                 <NA>                 <NA>            <NA> #> 68             <NA>                 <NA>                 <NA>            <NA> #> 69             <NA>                 <NA>                 <NA>            <NA> #> 70             <NA>                 <NA>                 <NA>            <NA> #>    ci90.A.model.up ci95.mu.model.lo ci95.mu.model.up ci95.lambda.model.lo #> 1             <NA>             <NA>             <NA>                 <NA> #> 2             <NA>             <NA>             <NA>                 <NA> #> 3             <NA>             <NA>             <NA>                 <NA> #> 4             <NA>             <NA>             <NA>                 <NA> #> 5             <NA>             <NA>             <NA>                 <NA> #> 6             <NA>             <NA>             <NA>                 <NA> #> 7             <NA>             <NA>             <NA>                 <NA> #> 8             <NA>             <NA>             <NA>                 <NA> #> 9             <NA>             <NA>             <NA>                 <NA> #> 10            <NA>             <NA>             <NA>                 <NA> #> 11            <NA>             <NA>             <NA>                 <NA> #> 12            <NA>             <NA>             <NA>                 <NA> #> 13            <NA>             <NA>             <NA>                 <NA> #> 14            <NA>             <NA>             <NA>                 <NA> #> 15            <NA>             <NA>             <NA>                 <NA> #> 16            <NA>             <NA>             <NA>                 <NA> #> 17            <NA>             <NA>             <NA>                 <NA> #> 18            <NA>             <NA>             <NA>                 <NA> #> 19            <NA>             <NA>             <NA>                 <NA> #> 20            <NA>             <NA>             <NA>                 <NA> #> 21            <NA>             <NA>             <NA>                 <NA> #> 22            <NA>             <NA>             <NA>                 <NA> #> 23            <NA>             <NA>             <NA>                 <NA> #> 24            <NA>             <NA>             <NA>                 <NA> #> 25            <NA>             <NA>             <NA>                 <NA> #> 26            <NA>             <NA>             <NA>                 <NA> #> 27            <NA>             <NA>             <NA>                 <NA> #> 28            <NA>             <NA>             <NA>                 <NA> #> 29            <NA>             <NA>             <NA>                 <NA> #> 30            <NA>             <NA>             <NA>                 <NA> #> 31            <NA>             <NA>             <NA>                 <NA> #> 32            <NA>             <NA>             <NA>                 <NA> #> 33            <NA>             <NA>             <NA>                 <NA> #> 34            <NA>             <NA>             <NA>                 <NA> #> 35            <NA>             <NA>             <NA>                 <NA> #> 36            <NA>             <NA>             <NA>                 <NA> #> 37            <NA>             <NA>             <NA>                 <NA> #> 38            <NA>             <NA>             <NA>                 <NA> #> 39            <NA>             <NA>             <NA>                 <NA> #> 40            <NA>             <NA>             <NA>                 <NA> #> 41            <NA>             <NA>             <NA>                 <NA> #> 42            <NA>             <NA>             <NA>                 <NA> #> 43            <NA>             <NA>             <NA>                 <NA> #> 44            <NA>             <NA>             <NA>                 <NA> #> 45            <NA>             <NA>             <NA>                 <NA> #> 46            <NA>             <NA>             <NA>                 <NA> #> 47            <NA>             <NA>             <NA>                 <NA> #> 48            <NA>             <NA>             <NA>                 <NA> #> 49            <NA>             <NA>             <NA>                 <NA> #> 50            <NA>             <NA>             <NA>                 <NA> #> 51            <NA>             <NA>             <NA>                 <NA> #> 52            <NA>             <NA>             <NA>                 <NA> #> 53            <NA>             <NA>             <NA>                 <NA> #> 54            <NA>             <NA>             <NA>                 <NA> #> 55            <NA>             <NA>             <NA>                 <NA> #> 56            <NA>             <NA>             <NA>                 <NA> #> 57            <NA>             <NA>             <NA>                 <NA> #> 58            <NA>             <NA>             <NA>                 <NA> #> 59            <NA>             <NA>             <NA>                 <NA> #> 60            <NA>             <NA>             <NA>                 <NA> #> 61            <NA>             <NA>             <NA>                 <NA> #> 62            <NA>             <NA>             <NA>                 <NA> #> 63            <NA>             <NA>             <NA>                 <NA> #> 64            <NA>             <NA>             <NA>                 <NA> #> 65            <NA>             <NA>             <NA>                 <NA> #> 66            <NA>             <NA>             <NA>                 <NA> #> 67            <NA>             <NA>             <NA>                 <NA> #> 68            <NA>             <NA>             <NA>                 <NA> #> 69            <NA>             <NA>             <NA>                 <NA> #> 70            <NA>             <NA>             <NA>                 <NA> #>    ci95.lambda.model.up ci95.A.model.lo ci95.A.model.up          mu.spline #> 1                  <NA>            <NA>            <NA>  0.671551384930258 #> 2                  <NA>            <NA>            <NA>   0.64143806749456 #> 3                  <NA>            <NA>            <NA>  0.598435952642431 #> 4                  <NA>            <NA>            <NA>  0.574121715623406 #> 5                  <NA>            <NA>            <NA>  0.549055107371777 #> 6                  <NA>            <NA>            <NA>  0.469897693996339 #> 7                  <NA>            <NA>            <NA>  0.391492971234946 #> 8                  <NA>            <NA>            <NA>  0.258614311093975 #> 9                  <NA>            <NA>            <NA>   0.15286628911175 #> 10                 <NA>            <NA>            <NA> 0.0688539259124827 #> 11                 <NA>            <NA>            <NA> 0.0309233332375739 #> 12                 <NA>            <NA>            <NA>                  0 #> 13                 <NA>            <NA>            <NA>  0.661251388252481 #> 14                 <NA>            <NA>            <NA>  0.618125966318488 #> 15                 <NA>            <NA>            <NA>   0.60900434491644 #> 16                 <NA>            <NA>            <NA>  0.578683838768198 #> 17                 <NA>            <NA>            <NA>  0.541689538921731 #> 18                 <NA>            <NA>            <NA>   0.47762356881935 #> 19                 <NA>            <NA>            <NA>  0.392397976317974 #> 20                 <NA>            <NA>            <NA>  0.267775369834406 #> 21                 <NA>            <NA>            <NA>   0.14465145660572 #> 22                 <NA>            <NA>            <NA> 0.0782919185754535 #> 23                 <NA>            <NA>            <NA> 0.0325431037904104 #> 24                 <NA>            <NA>            <NA>                  0 #> 25                 <NA>            <NA>            <NA>  0.661925744973408 #> 26                 <NA>            <NA>            <NA>   0.61192355855575 #> 27                 <NA>            <NA>            <NA>    0.5655904798207 #> 28                 <NA>            <NA>            <NA>   0.53285145757781 #> 29                 <NA>            <NA>            <NA>  0.473106745100869 #> 30                 <NA>            <NA>            <NA>  0.392655521450968 #> 31                 <NA>            <NA>            <NA>  0.262349288365535 #> 32                 <NA>            <NA>            <NA>  0.148645387945738 #> 33                 <NA>            <NA>            <NA>  0.074391842158019 #> 34                 <NA>            <NA>            <NA> 0.0348708045835356 #> 35                 <NA>            <NA>            <NA>                  0 #> 36                 <NA>            <NA>            <NA>  0.473544756417673 #> 37                 <NA>            <NA>            <NA>  0.432362233544795 #> 38                 <NA>            <NA>            <NA>   0.41338676219915 #> 39                 <NA>            <NA>            <NA>  0.391691724411127 #> 40                 <NA>            <NA>            <NA>  0.353956806026158 #> 41                 <NA>            <NA>            <NA>  0.288922081854242 #> 42                 <NA>            <NA>            <NA>  0.221542215922278 #> 43                 <NA>            <NA>            <NA>  0.117287338895661 #> 44                 <NA>            <NA>            <NA> 0.0482958422103586 #> 45                 <NA>            <NA>            <NA>                  0 #> 46                 <NA>            <NA>            <NA>                  0 #> 47                 <NA>            <NA>            <NA>                  0 #> 48                 <NA>            <NA>            <NA>  0.478939353211944 #> 49                 <NA>            <NA>            <NA>  0.438017473898102 #> 50                 <NA>            <NA>            <NA>  0.411967352873426 #> 51                 <NA>            <NA>            <NA>  0.392688600689522 #> 52                 <NA>            <NA>            <NA>   0.36289266800476 #> 53                 <NA>            <NA>            <NA>  0.285490645711993 #> 54                 <NA>            <NA>            <NA>  0.211012858214281 #> 55                 <NA>            <NA>            <NA>  0.121396050648579 #> 56                 <NA>            <NA>            <NA> 0.0416180895579426 #> 57                 <NA>            <NA>            <NA>                  0 #> 58                 <NA>            <NA>            <NA>                  0 #> 59                 <NA>            <NA>            <NA>                  0 #> 60                 <NA>            <NA>            <NA>  0.466997625806368 #> 61                 <NA>            <NA>            <NA>  0.417508505220623 #> 62                 <NA>            <NA>            <NA>  0.391234704026273 #> 63                 <NA>            <NA>            <NA>   0.34484526967798 #> 64                 <NA>            <NA>            <NA>  0.302498992681628 #> 65                 <NA>            <NA>            <NA>  0.207480855485445 #> 66                 <NA>            <NA>            <NA>  0.116122754101185 #> 67                 <NA>            <NA>            <NA> 0.0426256234877721 #> 68                 <NA>            <NA>            <NA>                  0 #> 69                 <NA>            <NA>            <NA>                  0 #> 70                 <NA>            <NA>            <NA>                  0 #>           tD.spline tmax.spline        lambda.spline mu2.spline tD2.spline #> 1  1.03215806878565        8.25     4.61893555056666       <NA>       <NA> #> 2  1.08061435029474        8.25     4.72273394620892       <NA>       <NA> #> 3  1.15826460208367           8      4.6562476138709       <NA>       <NA> #> 4  1.20731747588975           8     4.63186255184894       <NA>       <NA> #> 5  1.26243644991831           8     4.52275983797053       <NA>       <NA> #> 6   1.4751023242207         8.5     4.65239857879419       <NA>       <NA> #> 7   1.7705226695985           8     4.13789846962922       <NA>       <NA> #> 8  2.68023520286961        9.25     3.68262454688306       <NA>       <NA> #> 9  4.53433640986231           9     3.04694703843657       <NA>       <NA> #> 10 10.0669231474321        7.75     1.49238976876262       <NA>       <NA> #> 11 22.4150215384196           1   0.0565956216005827       <NA>       <NA> #> 12             <NA>        <NA>                 <NA>       <NA>       <NA> #> 13 1.04823550146603        7.75     4.19620905821313       <NA>       <NA> #> 14 1.12136881206961         7.5     4.33910659498421       <NA>       <NA> #> 15 1.13816459003269        7.75     4.27979913508085       <NA>       <NA> #> 16 1.19779944440024        8.25     4.78374808145378       <NA>       <NA> #> 17 1.27960230123643           8     4.51533697214777       <NA>       <NA> #> 18 1.45124157560598        8.25     4.49275479046101       <NA>       <NA> #> 19  1.7664392336169         8.5     4.59194824245181       <NA>       <NA> #> 20 2.58853971890167           9     3.90938753067387       <NA>       <NA> #> 21 4.79184376586869        9.75     2.92315595366529       <NA>       <NA> #> 22 8.85336817863171       15.25     2.98968668662486       <NA>       <NA> #> 23  21.299356847585       10.75     2.54673208586639       <NA>       <NA> #> 24             <NA>        <NA>                 <NA>       <NA>       <NA> #> 25 1.04716758008527           8     4.36325413960689       <NA>       <NA> #> 26 1.13273491577265        7.75     4.47067814071545       <NA>       <NA> #> 27 1.22552837307248           8     4.43668944208558       <NA>       <NA> #> 28 1.30082628226409        8.25     4.61702272429077       <NA>       <NA> #> 29 1.46509680476477        7.75     4.16634640693735       <NA>       <NA> #> 30 1.76528061543253         8.5     4.44238708655466       <NA>       <NA> #> 31 2.64207760912304        9.25     4.01127957405983       <NA>       <NA> #> 32 4.66309241167289       10.25     3.00672822672166       <NA>       <NA> #> 33 9.31751601321555           7     1.79209520127355       <NA>       <NA> #> 34 19.8775792195864         3.5    0.561114674249791       <NA>       <NA> #> 35             <NA>        <NA>                 <NA>       <NA>       <NA> #> 36 1.46374164461992        8.75     4.17120242763403       <NA>       <NA> #> 37 1.60316310441146         8.5     4.13668954956644       <NA>       <NA> #> 38 1.67675224255493         8.5     4.16767207548031       <NA>       <NA> #> 39 1.76962426663986           8     3.93416373921742       <NA>       <NA> #> 40 1.95828182636703           9     3.98206380758836       <NA>       <NA> #> 41  2.3990799737821          10     3.72554651417074       <NA>       <NA> #> 42 3.12873633440191           9     3.34769282290245       <NA>       <NA> #> 43  5.9098210180774       12.75      2.4856012547882       <NA>       <NA> #> 44 14.3521087703752          16     3.36287873479872       <NA>       <NA> #> 45             <NA>        <NA>                 <NA>       <NA>       <NA> #> 46             <NA>        <NA>                 <NA>       <NA>       <NA> #> 47             <NA>        <NA>                 <NA>       <NA>       <NA> #> 48 1.44725459687421        8.25      4.1377032086362       <NA>       <NA> #> 49 1.58246467747356        8.25     4.12298641234303       <NA>       <NA> #> 50 1.68252939395639         8.5     4.02717100575028       <NA>       <NA> #> 51 1.76513191201081        8.75     3.96586375977227       <NA>       <NA> #> 52 1.91006113287153           9     4.16762653387601       <NA>       <NA> #> 53 2.42791555860363         8.5     3.94411665173495       <NA>       <NA> #> 54 3.28485755051033        9.25      3.5882987045642       <NA>       <NA> #> 55  5.7098000870431        9.75     2.45228993840581       <NA>       <NA> #> 56 16.6549495164816         5.5     1.28405743879024       <NA>       <NA> #> 57             <NA>        <NA>                 <NA>       <NA>       <NA> #> 58             <NA>        <NA>                 <NA>       <NA>       <NA> #> 59             <NA>        <NA>                 <NA>       <NA>       <NA> #> 60 1.48426275050774        8.25     3.84588353035223       <NA>       <NA> #> 61 1.66019894659072           8     4.01430586809134       <NA>       <NA> #> 62 1.77169145126093         8.5     3.83451315981983       <NA>       <NA> #> 63 2.01002374545318        8.75     3.87670804052801       <NA>       <NA> #> 64 2.29140326853737           9      3.9703268277116       <NA>       <NA> #> 65 3.34077656918361        9.25     3.17506448521161       <NA>       <NA> #> 66 5.96909008854509        10.5     2.72699815109772       <NA>       <NA> #> 67 16.2612795742163        0.25 -0.00226925440305691       <NA>       <NA> #> 68             <NA>        <NA>                 <NA>       <NA>       <NA> #> 69             <NA>        <NA>                 <NA>       <NA>       <NA> #> 70             <NA>        <NA>                 <NA>       <NA>       <NA> #>    tmax2.spline lambda2.spline          y0.spline           A.spline #> 1          <NA>           <NA> 0.0553429712680868   7.15748262695526 #> 2          <NA>           <NA> 0.0543513686931929   4.35712515546407 #> 3          <NA>           <NA> 0.0469012806132869   2.84723739874509 #> 4          <NA>           <NA> 0.0566854825034766   2.69017260367586 #> 5          <NA>           <NA> 0.0509543647308686   2.28842479265366 #> 6          <NA>           <NA> 0.0547937380343417   1.68101118339576 #> 7          <NA>           <NA> 0.0492010215376226   1.20343668573984 #> 8          <NA>           <NA> 0.0477336950058109   0.71929619822982 #> 9          <NA>           <NA> 0.0482115823309883  0.402146948763673 #> 10         <NA>           <NA>    0.0568647198088  0.212500401449692 #> 11         <NA>           <NA> 0.0560486703858775 0.0973367865910742 #> 12         <NA>           <NA>               <NA>               <NA> #> 13         <NA>           <NA> 0.0500099698673573    5.8716442231701 #> 14         <NA>           <NA> 0.0471492815607073   3.13767340798449 #> 15         <NA>           <NA> 0.0475273160466503   3.09640493796317 #> 16         <NA>           <NA> 0.0519857005428217   2.73909482985051 #> 17         <NA>           <NA> 0.0548852788447309   2.53655634340866 #> 18         <NA>           <NA> 0.0517182292717773   1.66629191353758 #> 19         <NA>           <NA> 0.0514796107075732    1.3077283532928 #> 20         <NA>           <NA> 0.0506798313760026  0.763482704520893 #> 21         <NA>           <NA> 0.0514491116130788  0.409169445179965 #> 22         <NA>           <NA> 0.0556056688495667  0.220554092721463 #> 23         <NA>           <NA> 0.0501917221954623 0.0870049395366432 #> 24         <NA>           <NA>               <NA>               <NA> #> 25         <NA>           <NA> 0.0520317567262829   6.32877378225987 #> 26         <NA>           <NA> 0.0536118069112015   3.58580391766127 #> 27         <NA>           <NA> 0.0574202780745288   2.77200195290449 #> 28         <NA>           <NA> 0.0543109225359308   2.42224524510915 #> 29         <NA>           <NA> 0.0508903274018537   1.56763577148989 #> 30         <NA>           <NA> 0.0542597636701836   1.35969606134247 #> 31         <NA>           <NA> 0.0523247024721252  0.774629293864673 #> 32         <NA>           <NA> 0.0473802124228789  0.421530673272572 #> 33         <NA>           <NA>  0.052562848451896  0.193249212933725 #> 34         <NA>           <NA> 0.0577934870797745   0.10565614921344 #> 35         <NA>           <NA>               <NA>               <NA> #> 36         <NA>           <NA> 0.0466206608251536   3.22973207629043 #> 37         <NA>           <NA> 0.0466356569314252   2.03717340620749 #> 38         <NA>           <NA> 0.0565739463643773   2.27413137584356 #> 39         <NA>           <NA> 0.0503838815973376   1.65853644707409 #> 40         <NA>           <NA> 0.0548355704302015    1.4597772568504 #> 41         <NA>           <NA> 0.0475662608743996   1.05113527027295 #> 42         <NA>           <NA> 0.0527067880639872  0.864853882603944 #> 43         <NA>           <NA> 0.0563422796961713  0.475108010091446 #> 44         <NA>           <NA> 0.0481522695760314  0.123484569154627 #> 45         <NA>           <NA>               <NA>               <NA> #> 46         <NA>           <NA>               <NA>               <NA> #> 47         <NA>           <NA>               <NA>               <NA> #> 48         <NA>           <NA> 0.0516701179590209   3.70006477855438 #> 49         <NA>           <NA> 0.0550705024932721   2.78549832486598 #> 50         <NA>           <NA> 0.0477283762770593   1.79858688952934 #> 51         <NA>           <NA> 0.0574783768236089   2.13212489343534 #> 52         <NA>           <NA>  0.054551442059114   1.67140394806805 #> 53         <NA>           <NA>  0.055819018871567   1.12581443392809 #> 54         <NA>           <NA> 0.0571810954971321  0.894299458229759 #> 55         <NA>           <NA> 0.0558412050608672  0.498962999365189 #> 56         <NA>           <NA> 0.0570901055154519  0.121189432423611 #> 57         <NA>           <NA>               <NA>               <NA> #> 58         <NA>           <NA>               <NA>               <NA> #> 59         <NA>           <NA>               <NA>               <NA> #> 60         <NA>           <NA> 0.0480309278103199   3.37253078212032 #> 61         <NA>           <NA> 0.0483027591649101   1.92374405112227 #> 62         <NA>           <NA> 0.0506236222071155   1.72314867881094 #> 63         <NA>           <NA> 0.0553503194811702   1.57037568664091 #> 64         <NA>           <NA> 0.0480163348385467    1.1878650803892 #> 65         <NA>           <NA> 0.0542930187524113  0.806545875440483 #> 66         <NA>           <NA> 0.0477223969003331  0.390327214458541 #> 67         <NA>           <NA> 0.0512558365964511  0.105965066782662 #> 68         <NA>           <NA>               <NA>               <NA> #> 69         <NA>           <NA>               <NA>               <NA> #> 70         <NA>           <NA>               <NA>               <NA> #>             dY.spline  integral.spline reliable_fit.spline reliable_fit2.spline #> 1    7.10213965568717 76.3812211610626                TRUE                FALSE #> 2    4.30277378677088 68.8823601897769                TRUE                FALSE #> 3     2.8003361181318 64.8751703639181                TRUE                FALSE #> 4    2.63348712117239  61.882375828782                TRUE                FALSE #> 5    2.23747042792279 60.2245154092752                TRUE                FALSE #> 6    1.62621744536142 53.8369442421997                TRUE                FALSE #> 7    1.15423566420222 49.5557157877317                TRUE                FALSE #> 8   0.671562503224009 40.5684070214881                TRUE                FALSE #> 9   0.353935366432685 29.0325821575642                TRUE                FALSE #> 10  0.155635681640892 16.6620836219011                TRUE                FALSE #> 11 0.0412881162051967 7.00959547716662                TRUE                FALSE #> 12                  0                0               FALSE                FALSE #> 13   5.82163425330274 76.7707936518656                TRUE                FALSE #> 14   3.09052412642378 68.1340383697961                TRUE                FALSE #> 15   3.04887762191652 67.6655972023515                TRUE                FALSE #> 16   2.68710912930769 62.3335697677418                TRUE                FALSE #> 17   2.48167106456393 60.6894457031621                TRUE                FALSE #> 18   1.61457368426581 54.6976338218847                TRUE                FALSE #> 19   1.25624874258523 49.4275170955474                TRUE                FALSE #> 20  0.712802873144891 40.6336348213741                TRUE                FALSE #> 21  0.357720333566886 28.1564319952987                TRUE                FALSE #> 22  0.164948423871896 17.1099301160914                TRUE                FALSE #> 23 0.0368132173411809    6.82635700188                TRUE                FALSE #> 24                  0                0               FALSE                FALSE #> 25   6.27674202553359  76.275155800583                TRUE                FALSE #> 26   3.53219211075007 67.5322679521333                TRUE                FALSE #> 27   2.71458167482996 62.4696554333718                TRUE                FALSE #> 28   2.36793432257322  59.819643545453                TRUE                FALSE #> 29   1.51674544408804 55.5003285241348                TRUE                FALSE #> 30   1.30543629767228 49.1238367599053                TRUE                FALSE #> 31  0.722304591392548 39.8545493347009                TRUE                FALSE #> 32  0.374150460849693 29.4699161003114                TRUE                FALSE #> 33  0.140686364481829 16.4306978841593                TRUE                FALSE #> 34 0.0478626621336655 7.91251820291241                TRUE                FALSE #> 35                  0                0               FALSE                FALSE #> 36   3.18311141546527 64.8634769360654                TRUE                FALSE #> 37   1.99053774927607 57.8747059747332                TRUE                FALSE #> 38   2.21755742947919 56.1933978460107                TRUE                FALSE #> 39   1.60815256547675  54.010543826114                TRUE                FALSE #> 40    1.4049416864202 50.0146124927831                TRUE                FALSE #> 41   1.00356900939855 45.9254455181124                TRUE                FALSE #> 42  0.812147094539957 39.3214670803752                TRUE                FALSE #> 43  0.418765730395275 26.4564503937855                TRUE                FALSE #> 44 0.0753322995785952  10.822587357595                TRUE                FALSE #> 45                  0                0               FALSE                FALSE #> 46                  0                0               FALSE                FALSE #> 47                  0                0               FALSE                FALSE #> 48   3.64839466059536 65.2871676549811                TRUE                FALSE #> 49   2.73042782237271 59.8975125327837                TRUE                FALSE #> 50   1.75085851325228 55.7443459579256                TRUE                FALSE #> 51   2.07464651661174 55.2583577663355                TRUE                FALSE #> 52   1.61685250600894 51.4007956671579                TRUE                FALSE #> 53   1.06999541505652 43.8139988968175                TRUE                FALSE #> 54  0.837118362732627  37.629579753448                TRUE                FALSE #> 55  0.443121794304322 26.8299218603252                TRUE                FALSE #> 56 0.0640993269081586 9.08420537670654                TRUE                FALSE #> 57                  0                0               FALSE                FALSE #> 58                  0                0               FALSE                FALSE #> 59                  0                0               FALSE                FALSE #> 60      3.32449985431 65.6766161474931                TRUE                FALSE #> 61   1.87544129195736 56.8667493965759                TRUE                FALSE #> 62   1.67252505660382 54.8355022854761                TRUE                FALSE #> 63   1.51502536715974 50.3142983660212                TRUE                FALSE #> 64   1.13984874555066 46.6112366966185                TRUE                FALSE #> 65  0.752252856688071 38.0657454809757                TRUE                FALSE #> 66  0.342604817558208 25.6243230633069                TRUE                FALSE #> 67 0.0547092301862106 9.14545034054506                TRUE                FALSE #> 68                  0                0               FALSE                FALSE #> 69                  0                0               FALSE                FALSE #> 70                  0                0               FALSE                FALSE #>    smooth.spline              mu.bt        lambda.bt               A.bt #> 1           0.55  0.668854581355404 4.60410476819465   7.16550630879372 #> 2           0.55  0.640392366731663 4.72522531959256   4.36479097828853 #> 3           0.55  0.596773647552951 4.65252641259937   2.86318452283093 #> 4           0.55  0.571624542088136 4.60485015603659   2.69797022116491 #> 5           0.55  0.546203535474807 4.52078652538125   2.29090430967095 #> 6           0.55  0.468980756979913 4.63634542817389   1.68725084424823 #> 7           0.55  0.393105448241652  4.1762086486998   1.20627006797369 #> 8           0.55  0.260240971892194 3.71216013334201   0.72194492626493 #> 9           0.55  0.151633708487957   3.004067089759   0.40033894398268 #> 10          0.55 0.0716401628953341 1.80247575756264  0.209743964944329 #> 11          0.55 0.0344195165979916 2.14885402183637 0.0962268429171838 #> 12          0.55               <NA>             <NA>               <NA> #> 13          0.55  0.661334879379562 4.20106911478712   5.88567056616818 #> 14          0.55  0.615414602463154 4.32176459923613   3.14519911261789 #> 15          0.55  0.606819421121652 4.27300307852836   3.10957597793603 #> 16          0.55  0.576070146354454 4.77012982930246   2.75300240605483 #> 17          0.55  0.541875270829635 4.52670791623802   2.56165309907863 #> 18          0.55  0.475417901915733 4.47973165475626   1.67261013413259 #> 19          0.55  0.390146580666156  4.5542361628288   1.30561534728013 #> 20          0.55  0.268398513103096 3.91446591766741  0.765290997146693 #> 21          0.55  0.146896906607111 3.03482207161302  0.409545152621532 #> 22          0.55  0.079146348340217   2.756539697772  0.218901625149335 #> 23          0.55 0.0354089315179735 2.54193447148688 0.0870267744930082 #> 24          0.55               <NA>             <NA>               <NA> #> 25          0.55  0.660761275933229 4.36315754166292   6.33410592981623 #> 26          0.55  0.611064555136249 4.46523881254334   3.59591813279081 #> 27          0.55  0.562640986883107 4.41655930909382   2.76932074731846 #> 28          0.55  0.531801073026015 4.61087174188608   2.42518040374778 #> 29          0.55  0.472109228993421 4.15578676304978   1.57101784865329 #> 30          0.55  0.391471118732665 4.44526702624002   1.36692644470026 #> 31          0.55  0.261548129501031 3.98547011777551  0.766249884644444 #> 32          0.55  0.151808804103457  3.1419350865252   0.41490426122618 #> 33          0.55  0.076066262866749 2.19019081465291  0.190627557505679 #> 34          0.55 0.0370100426692012 1.01734616520984  0.105248449649883 #> 35          0.55               <NA>             <NA>               <NA> #> 36          0.55   0.47175719119958 4.15363696426659   3.23353695725291 #> 37          0.55   0.43020352784823 4.12173477395585   2.04147286046543 #> 38          0.55  0.413506064077595 4.17665380047516   2.29383757280888 #> 39          0.55  0.391604715982889 3.93817444083618   1.66326898254692 #> 40          0.55  0.352860414042163 3.96917606199169   1.46191625028231 #> 41          0.55   0.29250850296797 3.77998501010908   1.05170700321397 #> 42          0.55  0.220938168136935 3.33231113908697  0.864852281787593 #> 43          0.55  0.119442054731908 2.64791297653329   0.46687872811871 #> 44          0.55 0.0502088035933467 3.61368127313137  0.120813132047028 #> 45          0.55               <NA>             <NA>               <NA> #> 46          0.55               <NA>             <NA>               <NA> #> 47          0.55               <NA>             <NA>               <NA> #> 48          0.55  0.479921687685366 4.14574168914662   3.70262604468774 #> 49          0.55  0.438898291172399 4.12509537576667   2.77677647607162 #> 50          0.55  0.410651545901012 4.02587656372701   1.80244289621753 #> 51          0.55  0.390082984282553 3.93920777035121   2.11742179507244 #> 52          0.55  0.363472264697805 4.17238640201862   1.66000290593958 #> 53          0.55  0.286410091035854 3.96090120871765   1.11868460570531 #> 54          0.55  0.210266059517225 3.56502833467469  0.895384061035165 #> 55          0.55  0.122052779593425 2.55254110473011  0.487291713637095 #> 56          0.55 0.0428452977449445 2.45889986858314  0.119956390797432 #> 57          0.55               <NA>             <NA>               <NA> #> 58          0.55               <NA>             <NA>               <NA> #> 59          0.55               <NA>             <NA>               <NA> #> 60          0.55  0.467639533745198  3.8578947653229   3.36058210069153 #> 61          0.55  0.418294080901748 4.02196981455254   1.91913213381406 #> 62          0.55  0.392295824825146 3.84846774234129   1.71900386546905 #> 63          0.55  0.346288650680385 3.90770126147199   1.57216527123431 #> 64          0.55  0.303569537193191 3.99397620773459   1.19256352763025 #> 65          0.55  0.209166667913107 3.21140877032156  0.806783508918573 #> 66          0.55   0.11650590752169 2.74608074559078  0.380954098970622 #> 67          0.55 0.0443131599062974 4.81817426551545  0.106093683546656 #> 68          0.55               <NA>             <NA>               <NA> #> 69          0.55               <NA>             <NA>               <NA> #> 70          0.55               <NA>             <NA>               <NA> #>                 dY.bt      integral.bt            stdmu.bt       stdlambda.bt #> 1    7.11018460339251 74.6409049989365 0.00391315735565319 0.0235019845655652 #> 2    4.31015732938726 67.0231009899114 0.00391129371411152 0.0298244554979481 #> 3    2.81615010839418 63.1930860536093 0.00369153194920436  0.030439883737274 #> 4    2.64165599645196 60.3054882289741 0.00450772469658367 0.0271645297517486 #> 5    2.23958703684275 58.7533454911589 0.00337040117330288 0.0196127923612136 #> 6     1.6326921113999 52.9022080721195 0.00334226175731889 0.0239867866765544 #> 7    1.15663529045633 48.4048231527308 0.00436647371676484 0.0519376002336204 #> 8   0.674168615841326 39.6284403380183 0.00268526137754642 0.0620678488398517 #> 9   0.352137379861374  28.291968347131 0.00338023730649318  0.129603530770697 #> 10  0.152983597364022 16.1588433126749 0.00334055339307108  0.393531508314327 #> 11 0.0400392991361902 6.74007541520974 0.00283264964948358  0.911126824804642 #> 12               <NA>             <NA>                <NA>               <NA> #> 13   5.83546828076567  74.924365402466 0.00323244099225249 0.0214902052855709 #> 14   3.09808390101058 66.3567244166349 0.00507997432859935 0.0258248019766941 #> 15   3.06195850620387 65.5335347695858 0.00417499318403367 0.0213211477640398 #> 16   2.70095266127314 60.4459957866793 0.00544594548988689 0.0346986159172861 #> 17   2.50641606870217 59.3079782001905 0.00557646397057952 0.0445914954298159 #> 18   1.62076302561951  53.313818672232  0.0073769494021591 0.0531763786722062 #> 19   1.25446705842127  48.206778682624 0.00284887180096131 0.0465685722474796 #> 20  0.714702563908373 39.6109900601286 0.00310844387705117 0.0606753064765864 #> 21  0.357987566913883 27.4303563338534 0.00348319325862806  0.159197994196264 #> 22  0.163102159943805 16.6555456029508  0.0035841028333287  0.883870815221422 #> 23  0.036745536080707 6.63743737632682 0.00230243348640846  0.860677715415869 #> 24               <NA>             <NA>                <NA>               <NA> #> 25    6.2819325517431 74.5479291379027 0.00454923257677906 0.0223264715049185 #> 26   3.54230689219881 66.2295952524157  0.0039857603220786 0.0222314927068879 #> 27   2.71190699051592 61.1187791550863 0.00594530279466337 0.0331235788619623 #> 28   2.37084543050638 58.3463050693398 0.00433710559503216 0.0246173897845906 #> 29   1.52024005769858 54.1390580824849 0.00441462903400063 0.0313868864165638 #> 30   1.31241210938548 48.2052960658024 0.00376693859977963 0.0415273761350658 #> 31  0.714077023836588 38.8457840361686 0.00457266002147169 0.0971189507432083 #> 32  0.367468630062162  28.655559881259 0.00241348029873522  0.160094648176366 #> 33  0.138045844367744 15.9782939722593 0.00457247216220141  0.361102352404181 #> 34 0.0474801752984402 7.68617587912277 0.00265558056806879  0.813405382326164 #> 35               <NA>             <NA>                <NA>               <NA> #> 36   3.18696617294725 63.3219753040606 0.00384118408519187 0.0391530611613567 #> 37   1.99472709708335  56.654785272507 0.00235557611217644 0.0312417481723202 #> 38   2.23711501639838  54.818577705667 0.00218410427181455 0.0284408499646056 #> 39   1.61280385222112  52.752881317131 0.00241059362447217  0.018901403159172 #> 40   1.40703161654551 48.4891715804531 0.00255080321121949 0.0416584180509822 #> 41   1.00423431238864 44.3761705249175 0.00315752637950147 0.0640962520685733 #> 42  0.812053664784271 38.2258511033686 0.00492157755322054  0.135868907451448 #> 43  0.410556744283597 25.4751867360553 0.00274019572296833  0.231200743272881 #> 44 0.0725960014712059 10.4966306913364 0.00227561724356243   1.47537663149704 #> 45               <NA>             <NA>                <NA>               <NA> #> 46               <NA>             <NA>                <NA>               <NA> #> 47               <NA>             <NA>                <NA>               <NA> #> 48   3.65093351743093 63.7990742065363 0.00325483097205758 0.0328562439889913 #> 49     2.721732005716 58.5306492639151 0.00447516741905612   0.04179081728791 #> 50   1.75445047657125 54.3902345966343 0.00230834579181396 0.0296427981767225 #> 51   2.05985029685419 53.9577905676494    0.00433649157989  0.046300793233136 #> 52   1.60551767037758 50.0277324378503 0.00507622077897867 0.0625966011147573 #> 53   1.06279946474981 42.4587824282211 0.00347519902046631  0.055666163082009 #> 54  0.838202442611102  36.333122861589  0.0032251882738989 0.0902058261652997 #> 55  0.431295506820603  25.944390828599 0.00218864044137074   0.13963055822118 #> 56  0.062809255027955 8.79710900051393 0.00373839712665159   2.03219914691331 #> 57               <NA>             <NA>                <NA>               <NA> #> 58               <NA>             <NA>                <NA>               <NA> #> 59               <NA>             <NA>                <NA>               <NA> #> 60   3.31238212630676  64.015953312632 0.00220292287681044 0.0265024209829108 #> 61   1.87083158754577 55.5320286462608 0.00429927051473832 0.0436234092734693 #> 62   1.66839772453957 53.4608451452035 0.00211517737012966 0.0295570257056315 #> 63   1.51652249240565  49.164771671393 0.00387027049672107 0.0485395072046253 #> 64   1.14435073103722 45.2318107940747 0.00373319171007339 0.0612638240385291 #> 65  0.752597529736226 37.1537945158507 0.00365379306985709  0.114218127617747 #> 66   0.33334732127149 24.6942132737096 0.00232255117765041  0.177623471171747 #> 67 0.0550011136378524 8.87318270830333 0.00236994241123258   1.86876443127616 #> 68               <NA>             <NA>                <NA>               <NA> #> 69               <NA>             <NA>                <NA>               <NA> #> 70               <NA>             <NA>                <NA>               <NA> #>                 stdA.bt             stddY.bt     stdintegral.bt reliable_fit.bt #> 1    0.0247802481753455   0.0247290190180801  0.722648557626528            TRUE #> 2    0.0161348515758044   0.0161274477758226  0.949281820601474            TRUE #> 3    0.0163300704681364   0.0163452627435215   1.00852024946446            TRUE #> 4    0.0111790127359631   0.0112836825309674   1.01561537943387            TRUE #> 5   0.00822021352040337  0.00817515295598554  0.640514698536722            TRUE #> 6    0.0100907290291969   0.0100416874665417  0.252560565198234            TRUE #> 7    0.0067806745368479  0.00677518918329671  0.648534225412046            TRUE #> 8   0.00402878190306359  0.00401886377156823   0.46180809808487            TRUE #> 9   0.00370165223769207  0.00367357702777964  0.497714595732426            TRUE #> 10  0.00261563765597583   0.0025982475642166  0.279102809630345            TRUE #> 11 0.000596154754151341 0.000559731989895842  0.225968836402913            TRUE #> 12                 <NA>                 <NA>               <NA>            <NA> #> 13   0.0187032699237881   0.0187063247718063   1.12434499894368            TRUE #> 14  0.00665859428686579  0.00668980160886193   1.23724388770441            TRUE #> 15   0.0100915825209966   0.0100561519947457   1.86472149444586            TRUE #> 16   0.0124651116857835   0.0124895260169152   1.10240415300435            TRUE #> 17   0.0134419333753168   0.0134747290439848  0.797254042377972            TRUE #> 18  0.00816388012399331  0.00816618752624597  0.595179553175326            TRUE #> 19  0.00549636961817848  0.00545666745186375  0.558291946597633            TRUE #> 20  0.00250907361359594  0.00252064848505717  0.678154309646093            TRUE #> 21  0.00218793377479082  0.00216804083540726  0.394539587881061            TRUE #> 22  0.00198996581203042  0.00215600512292409   0.19988263197027            TRUE #> 23 0.000381961103230039 0.000441573553257623 0.0980973950831433            TRUE #> 24                 <NA>                 <NA>               <NA>            <NA> #> 25   0.0298923132242812   0.0298536760026106   0.81539685231986            TRUE #> 26   0.0114775105670762   0.0114447777435218  0.465908077628426            TRUE #> 27   0.0130134246572733   0.0129749417406892  0.664570290133304            TRUE #> 28   0.0125996699257574   0.0127728189122841   0.70812579965979            TRUE #> 29   0.0076506442785598  0.00762426288773555   0.74747161452376            TRUE #> 30  0.00760200873715916  0.00766610200919077  0.294660196524868            TRUE #> 31  0.00491428823395972  0.00491084634394526  0.566076853347588            TRUE #> 32   0.0031409879946408  0.00309709033799204  0.465256686203854            TRUE #> 33  0.00189946144231258  0.00192188880869626   0.20265146828451            TRUE #> 34 0.000286387227494843  0.00036845269945716  0.140499103860419            TRUE #> 35                 <NA>                 <NA>               <NA>            <NA> #> 36  0.00592575334155165  0.00594528219582171  0.793075676289612            TRUE #> 37  0.00308526906968301  0.00315435212863095  0.625843171505071            TRUE #> 38   0.0113242582564984   0.0112845153198209  0.930558668624766            TRUE #> 39  0.00716115130346976  0.00721238246880077  0.603544498264016            TRUE #> 40   0.0115817379056279   0.0116179436470195  0.607188564542851            TRUE #> 41  0.00502460453885083  0.00506774117524884  0.953672162494777            TRUE #> 42  0.00929301152291081   0.0093424081831929  0.538393915415813            TRUE #> 43  0.00903051712523618  0.00891434306955741  0.728146837275214            TRUE #> 44 0.000986010054257085  0.00105495117248929  0.175100145958949            TRUE #> 45                 <NA>                 <NA>               <NA>            <NA> #> 46                 <NA>                 <NA>               <NA>            <NA> #> 47                 <NA>                 <NA>               <NA>            <NA> #> 48   0.0114746844800027      0.0115136844489  0.717156441469997            TRUE #> 49   0.0201773891510076   0.0201045109080242  0.739379498597259            TRUE #> 50  0.00696079951235346   0.0069336881062779  0.901816895786799            TRUE #> 51  0.00684657577086703  0.00684815488122475  0.840978427800165            TRUE #> 52   0.0094609602903351  0.00942229237098744  0.585134366019298            TRUE #> 53  0.00538076847483048   0.0053600158671674   0.75211064316936            TRUE #> 54  0.00499868782908027  0.00508643544997253   0.58371860314742            TRUE #> 55  0.00386677755758066   0.0038843821278455  0.436218785247784            TRUE #> 56 0.000880715315946238 0.000889490948108683   0.15973701783673            TRUE #> 57                 <NA>                 <NA>               <NA>            <NA> #> 58                 <NA>                 <NA>               <NA>            <NA> #> 59                 <NA>                 <NA>               <NA>            <NA> #> 60  0.00877143595218922  0.00879475141145432   1.11060736380151            TRUE #> 61   0.0100101797005219   0.0100377789161762  0.623661591641163            TRUE #> 62   0.0100814772113473   0.0101382297171369  0.594002737831663            TRUE #> 63  0.00462641978775129  0.00455827957958685   0.77962054319721            TRUE #> 64   0.0109036553617225   0.0109710462457445   1.15768971200871            TRUE #> 65  0.00736505366433108  0.00733827329678293  0.449641912447133            TRUE #> 66  0.00635940995654882  0.00655280168855351  0.416125500949233            TRUE #> 67  0.00082564647178668 0.000933288031884746   0.17797137046322            TRUE #> 68                 <NA>                 <NA>               <NA>            <NA> #> 69                 <NA>                 <NA>               <NA>            <NA> #> 70                 <NA>                 <NA>               <NA>            <NA> #>         ci90.mu.bt.lo      ci90.mu.bt.up  ci90.lambda.bt.lo ci90.lambda.bt.up #> 1   0.662417437505354  0.675291725205453    4.5654440035843  4.64276553280501 #> 2   0.633958288571949  0.646826444891376   4.67616409029844  4.77428654888669 #> 3    0.59070107749651  0.602846217609392   4.60245280385155  4.70260002134718 #> 4   0.564209334962256  0.579039749214016   4.56016450459496  4.64953580747822 #> 5   0.540659225544724   0.55174784540489   4.48852348194706  4.55304956881545 #> 6   0.463482736389124  0.474478777570703   4.59688716409096  4.67580369225682 #> 7   0.385922598977574  0.400288297505731   4.09077129631549   4.2616460010841 #> 8    0.25582371692613  0.264658226858258   3.61005852200045  3.81426174468357 #> 9   0.146073218118776  0.157194198857139   2.79086928164121   3.2172648978768 #> 10 0.0661449525637322  0.077135373226936   1.15511642638557  2.44983508873971 #> 11 0.0297598079245911 0.0390792252713921  0.650050395032739  3.64765764864001 #> 12               <NA>               <NA>               <NA>              <NA> #> 13  0.656017513947306  0.666652244811817   4.16571772709236  4.23642050248188 #> 14  0.607058044692608    0.6237711602337   4.27928279998447  4.36424639848779 #> 15  0.599951557333916  0.613687284909387   4.23792979045651   4.3080763666002 #> 16   0.56711156602359  0.585028726685318   4.71305060611852  4.82720905248639 #> 17  0.532701987598031  0.551048554061238   4.45335490625597  4.60006092622007 #> 18  0.463282820149182  0.487552983682285   4.39225651184048  4.56720679767204 #> 19  0.385460186553575  0.394832974778738    4.4776308614817  4.63084146417591 #> 20  0.263285122925347  0.273511903280846   3.81465503851342  4.01427679682139 #> 21  0.141167053696668  0.152626759517554   2.77294137116016  3.29670277206587 #> 22 0.0732504991793913 0.0850421975010427   1.30257220673276  4.21050718881124 #> 23 0.0316214284328315 0.0391964346031154   1.12611962962778  3.95774931334599 #> 24               <NA>               <NA>               <NA>              <NA> #> 25  0.653277788344428  0.668244763522031   4.32643049603732  4.39988458728851 #> 26   0.60450797940643  0.617621130866068   4.42866800704051  4.50180961804617 #> 27  0.552860963785886  0.572421009980329   4.36207102186589  4.47104759632175 #> 28  0.524666534322187  0.538935611729843   4.57037613569043  4.65136734808173 #> 29   0.46484716423249  0.479371293754352   4.10415533489453  4.20741819120503 #> 30  0.385274504736028  0.397667732729303   4.37695449249784  4.51357955998221 #> 31   0.25402610376571  0.269070155236351   3.82570944380294  4.14523079174809 #> 32  0.147838629012037  0.155778979194876   2.87857939027508  3.40529078277533 #> 33 0.0685445461599277 0.0835879795735704   1.59617744494803  2.78420418435779 #> 34 0.0326416126347281 0.0413784727036744 -0.320705688716699  2.35539801913638 #> 35               <NA>               <NA>               <NA>              <NA> #> 36   0.46543844337944  0.478075939019721   4.08923017865616  4.21804374987702 #> 37  0.426328605143699   0.43407845055276   4.07034209821238  4.17312744969932 #> 38   0.40991321255046   0.41709891560473   4.12986860228339  4.22343899866694 #> 39  0.387639289470632  0.395570142495146   3.90708163263935  3.96926724903302 #> 40  0.348664342759707  0.357056485324619   3.90064796429782  4.03770415968556 #> 41   0.28731437207369   0.29770263386225   3.67454667545628  3.88542334476189 #> 42  0.212842173061887  0.229034163211983   3.10880678632934   3.5558154918446 #> 43  0.114934432767625   0.12394967669619    2.2675877538494  3.02823819921718 #> 44 0.0464654132276865 0.0539521939590069   1.18668671431875    6.040675831944 #> 45               <NA>               <NA>               <NA>              <NA> #> 46               <NA>               <NA>               <NA>              <NA> #> 47               <NA>               <NA>               <NA>              <NA> #> 48  0.474567490736332  0.485275884634401   4.09169316778473  4.19979021050851 #> 49  0.431536640768052  0.446259941576747   4.05634948132806  4.19384127020528 #> 50  0.406854317073478  0.414448774728546    3.9771141607263  4.07463896672772 #> 51  0.382949455633634  0.397216512931472    3.8630429654827  4.01537257521971 #> 52  0.355121881516385  0.371822647879225   4.06941499318484  4.27535781085239 #> 53  0.280693388647187  0.292126793424521   3.86933037044774  4.05247204698755 #> 54  0.204960624806662  0.215571494227789   3.41663975063278  3.71341691871661 #> 55   0.11845246606737   0.12565309311948   2.32284883645627  2.78223337300396 #> 56 0.0366956344716027 0.0489949610182864 -0.884067728089258  5.80186746525554 #> 57               <NA>               <NA>               <NA>              <NA> #> 58               <NA>               <NA>               <NA>              <NA> #> 59               <NA>               <NA>               <NA>              <NA> #> 60  0.464015725612844  0.471263341877551   3.81429828280601  3.90149124783978 #> 61  0.411221780905004  0.425366380898493   3.95020930629768   4.0937303228074 #> 62  0.388816358051283   0.39577529159901   3.79984643505552  3.89708904962705 #> 63  0.339922055713278  0.352655245647491   3.82785377212038   3.9875487508236 #> 64   0.29742843683012  0.309710637556261   3.89319721719121  4.09475519827797 #> 65  0.203156178313192  0.215177157513022   3.02351995039036  3.39929759025275 #> 66  0.112685310834455  0.120326504208925   2.45389013551326   3.0382713556683 #> 67 0.0404146046398198  0.048211715172775   1.74405677606615  7.89229175496474 #> 68               <NA>               <NA>               <NA>              <NA> #> 69               <NA>               <NA>               <NA>              <NA> #> 70               <NA>               <NA>               <NA>              <NA> #>          ci90.A.bt.lo       ci90.A.bt.up ci90.integral.bt.lo #> 1    7.12474280054528   7.20626981704216    73.4521481216408 #> 2    4.33824914744634   4.39133280913073    65.4615323950219 #> 3    2.83632155691084   2.89004748875101    61.5340702432402 #> 4    2.67958074521425   2.71635969711557    58.6348009298054 #> 5    2.27738205842989   2.30442656091202     57.699698812066 #> 6     1.6706515949952   1.70385009350126    52.4867459423684 #> 7    1.19511585836058   1.21742427758681     47.337984351928 #> 8    0.71531758003439  0.728572272495469    38.8687660166687 #> 9   0.394249726051677  0.406428161913684    27.4732278371512 #> 10  0.205441241000249  0.214046688888409     15.699719190833 #> 11 0.0952461683466048 0.0972075174877627    6.36835667932695 #> 12               <NA>               <NA>                <NA> #> 13   5.85490368714354   5.91643744519281    73.0748178792037 #> 14     3.134245725016   3.15615250021979    64.3214582213611 #> 15   3.09297532468899   3.12617663118307    62.4660679112224 #> 16   2.73249729733171   2.77350751477794    58.6325409549871 #> 17   2.53954111867623   2.58376507948102    57.9964953004788 #> 18   1.65918055132862   1.68603971693656    52.3347483072586 #> 19   1.29657381925822   1.31465687530203    47.2883884304709 #> 20  0.761163571052327  0.769418423241058    38.4954262207608 #> 21  0.405946001562001  0.413144303681063    26.7813387117891 #> 22  0.215628131388545  0.222175118910125    16.3267386733597 #> 23 0.0863984484781948 0.0876551005078216    6.47606716141505 #> 24               <NA>               <NA>                <NA> #> 25   6.28493307456229   6.38327878507017    73.2066013158366 #> 26   3.57703762790797   3.61479863767365     65.463176464717 #> 27   2.74791366375724   2.79072783087967     60.025561027817 #> 28   2.40445394671991   2.44590686077565    57.1814381288994 #> 29   1.55843253881506   1.58360315849152    52.9094672765933 #> 30   1.35442114032763   1.37943174907288    47.7205800425189 #> 31  0.758165880499581  0.774333888789308    37.9145876124119 #> 32  0.409737335974996  0.420071186477364    27.8902126324537 #> 33  0.187502943433074  0.193752171578283    15.6449323069313 #> 34  0.104777342660654  0.105719556639112    7.45505485327238 #> 35               <NA>               <NA>                <NA> #> 36   3.22378909300606   3.24328482149977    62.0173658165641 #> 37   2.03639759284581   2.04654812808506    55.6252732553811 #> 38   2.27520916797694   2.31246597764082    53.2878086957793 #> 39   1.65148888865271   1.67504907644113    51.7600506174867 #> 40   1.44286429142756   1.48096820913707    47.4903463917801 #> 41   1.04344152874756   1.05997247768038    42.8073798176136 #> 42  0.849565277832404  0.880139285742781    37.3401931125096 #> 43  0.452023527447697  0.481733928789724    24.2773851887376 #> 44  0.119191145507775  0.122435118586281    10.2085909512339 #> 45               <NA>               <NA>                <NA> #> 46               <NA>               <NA>                <NA> #> 47               <NA>               <NA>                <NA> #> 48   3.68375018871814   3.72150190065735    62.6193518603182 #> 49   2.74358467091822   2.80996828122503    57.3143699887226 #> 50    1.7909923810197   1.81389341141535     52.906745803065 #> 51   2.10615917792936   2.12868441221552    52.5743810539181 #> 52   1.64443962626198   1.67556618561718    49.0651864057486 #> 53   1.10983324156421    1.1275359698464    41.2215604202075 #> 54  0.887161219556328  0.903606902514002    35.3729057594115 #> 55  0.480930864554874  0.493652562719315    25.2268109268664 #> 56  0.118507614102701  0.121405167492164    8.53434160617251 #> 57               <NA>               <NA>                <NA> #> 58               <NA>               <NA>                <NA> #> 59               <NA>               <NA>                <NA> #> 60   3.34615308855018   3.37501111283288    62.1890041991785 #> 61    1.9026653882067   1.93559887942142     54.506105328011 #> 62   1.70241983545638   1.73558789548171    52.4837106414705 #> 63   1.56455481068346   1.57977573178516    47.8822958778336 #> 64   1.17462701456021   1.21050004070028    43.3274112178204 #> 65  0.794667995640748  0.818899022196397    36.4141335698752 #> 66  0.370492869592099  0.391415328349145    24.0096868246481 #> 67  0.104735495100567  0.107451871992746    8.58041980389133 #> 68               <NA>               <NA>                <NA> #> 69               <NA>               <NA>                <NA> #> 70               <NA>               <NA>                <NA> #>    ci90.integral.bt.up      ci95.mu.bt.lo      ci95.mu.bt.up ci95.lambda.bt.lo #> 1     75.8296618762321  0.661184792938323  0.676524369772484  4.55804087844614 #> 2     68.5846695848008  0.632726231052004  0.648058502411321  4.66676938681658 #> 3     64.8521018639783   0.58953824493251  0.604009050173391  4.59286424047431 #> 4     61.9761755281428  0.562789401682832   0.58045968249344  4.55160767772316 #> 5     59.8069921702518  0.539597549175133  0.552809521774481  4.48234545235327 #> 6     53.3176702018706  0.462429923935568  0.475531590024258  4.58933132628784 #> 7     49.4716619535336  0.384547159756793  0.401663736726511   4.0744109522419 #> 8     40.3881146593679  0.254977859592203  0.265504084192185   3.5905071496159 #> 9     29.1107088571109  0.145008443367231  0.158258973608684  2.75004416944844 #> 10    16.6179674345168 0.0650926782449148 0.0781876475457534  1.03115400126656 #> 11    7.11179415109254 0.0288675232850038 0.0399715099109794 0.363045445219277 #> 12                <NA>               <NA>               <NA>              <NA> #> 13    76.7739129257284  0.654999295034747  0.667670463724377   4.1589483124274 #> 14    68.3919906119086    0.6054578527791  0.625371352147209  4.27114798736181 #> 15    68.6010016279492  0.598636434480946  0.615002407762358  4.23121362891084 #> 16    62.2594506183714  0.565396093194276  0.586744199514632  4.70212054210458 #> 17    60.6194610999023  0.530945401447299  0.552805140211971  4.43930858519558 #> 18    54.2928890372054  0.460959081087501  0.489876722743965  4.37550595255874 #> 19    49.1251689347771  0.384562791936272  0.395730369396041  4.46296176122374 #> 20    40.7265538994965  0.262305963104076  0.274491063102117   3.7955423169733 #> 21    28.0793739559178    0.1400698478202  0.153723965394022  2.72279400298834 #> 22    16.9843525325419 0.0721215067868928 0.0861711898935413  1.02415289993801 #> 23    6.79880759123859 0.0308961618846129  0.039921701151334  0.85500614927178 #> 24                <NA>               <NA>               <NA>              <NA> #> 25    75.8892569599689  0.651844780082742  0.669677771783716  4.31939765751328 #> 26    66.9960140401145  0.603252464904975  0.618876645367523  4.42166508683784 #> 27    62.2119972823555  0.550988193405567  0.574293780360648  4.35163709452438 #> 28    59.5111720097801  0.523300346059752  0.540301799992278  4.56262165790829 #> 29    55.3686488883765   0.46345655608678  0.480761901900062  4.09426846567332 #> 30    48.6900120890858  0.384087919077097  0.398854318388233  4.36387336901529 #> 31    39.7769804599254  0.252585715858946  0.270510543143115  3.79511697431882 #> 32    29.4209071300644  0.147078382717936  0.156539225488978  2.82814957609953 #> 33    16.3116556375873 0.0671042174288343 0.0850283083046638  1.48243020394072 #> 34    7.91729690497316 0.0318051047557864  0.042214980582616 -0.57692838414944 #> 35                <NA>               <NA>               <NA>              <NA> #> 36     64.626584791557  0.464228470392604  0.479285912006556  4.07689696439033 #> 37    57.6842972896328  0.425586598668364  0.434820457028095   4.0605009475381 #> 38    56.3493467155547  0.409225219704839  0.417786908450352  4.12090973454453 #> 39    53.7457120167753  0.386879952478923  0.396329479486854  3.90112769064421 #> 40    49.4879967691261  0.347860839748173  0.357859988336153  3.88752556261176 #> 41    45.9449612322215  0.286319751264148  0.298697254671793  3.65435635605468 #> 42    39.1115090942276  0.211291876132623  0.230584460141248  3.06600808048213 #> 43     26.672988283373   0.11407127111489  0.124812838348925  2.19475951971844 #> 44    10.7846704314389 0.0457485937959643  0.054669013390729 0.721943075397184 #> 45                <NA>               <NA>               <NA>              <NA> #> 46                <NA>               <NA>               <NA>              <NA> #> 47                <NA>               <NA>               <NA>              <NA> #> 48    64.9787965527545  0.473542218980133  0.486301156390599   4.0813434509282 #> 49    59.7469285391076  0.430126963031049  0.447669619313749  4.04318537388237 #> 50    55.8737233902036  0.406127188149056  0.415175903652967  3.96777667930064 #> 51    55.3412000813807  0.381583460785969  0.398582507779138  3.84845821561426 #> 52    50.9902784699521  0.353522871971007  0.373421657424603  4.04969706383369 #> 53    43.6960044362347   0.27959870095574  0.293221481115968  3.85179552907691 #> 54    37.2933399637665  0.203944690500383  0.216587428534067  3.38822491539071 #> 55    26.6619707303316  0.117763044328338  0.126342514858512   2.2788652106166 #> 56    9.05987639485535 0.0355180393767074 0.0501725561131816 -1.52421045936695 #> 57                <NA>               <NA>               <NA>              <NA> #> 58                <NA>               <NA>               <NA>              <NA> #> 59                <NA>               <NA>               <NA>              <NA> #> 60    65.8429024260855  0.463321804906649  0.471957262583746  3.80595002019639 #> 61    56.5579519645105  0.409867510692861  0.426720651110636  3.93646793237654 #> 62    54.4379796489366  0.388150077179692    0.3964415724706  3.79053597195825 #> 63    50.4472474649524  0.338702920506811  0.353874380853958  3.81256382735093 #> 64    47.1362103703291  0.296252481441447  0.310886592944934  3.87389911261907 #> 65    37.8934554618262  0.202005233496187  0.216328102330027  2.98754124019077 #> 66    25.3787397227711  0.111953707213495  0.121058107829885  2.39793874209415 #> 67    9.16594561271532 0.0396680727802816 0.0489582470323133  1.15539598021416 #> 68                <NA>               <NA>               <NA>              <NA> #> 69                <NA>               <NA>               <NA>              <NA> #> 70                <NA>               <NA>               <NA>              <NA> #>    ci95.lambda.bt.up       ci95.A.bt.lo       ci95.A.bt.up ci95.integral.bt.lo #> 1   4.65016865794316   7.11693702237004    7.2140755952174    73.2245138259885 #> 2   4.78368125236854   4.33316666919996   4.39641528737711    65.1625086215325 #> 3   4.71218858472443   2.83117758471338   2.89519146094848    61.2163863646589 #> 4   4.65809263435002   2.67605935620242    2.7198810861274    58.3148820852837 #> 5   4.55922759840923   2.27479269117096   2.30701592817094    57.4979366820269 #> 6   4.68335953005994     1.667473015351   1.70702867314546     52.407189364331 #> 7   4.27800634515769   1.19297994588147   1.21956019006591    47.1336960709232 #> 8   3.83381311706812  0.714048513734925  0.729841338794934     38.723296465772 #> 9   3.25809001006957  0.393083705596804  0.407594182368557    27.3164477394955 #> 10  2.57379751385872  0.204617315138616  0.214870614750041    15.6118018057994 #> 11  3.93466259845347 0.0950583795990471 0.0973953062353204    6.29717649586004 #> 12              <NA>               <NA>               <NA>                <NA> #> 13  4.24318991714684   5.84901215711755    5.9223289752188    72.7206492045364 #> 14  4.37238121111045   3.13214826781564   3.15824995742015    63.9317263967342 #> 15  4.31479252814588   3.08979647619487   3.12935547967718    61.8786806404719 #> 16  4.83813911650034   2.72857078715069   2.77743402495896    58.2852836467907 #> 17  4.61410724728046   2.53530690966301   2.58799928849425    57.7453602771297 #> 18  4.58395735695379   1.65660892908956   1.68861133917562    52.1472667480084 #> 19  4.64551056443386    1.2948424628285   1.31638823173176    47.1125264672926 #> 20  4.03338951836152  0.760373212864045  0.770208781429341    38.2818076132223 #> 21  3.34685014023769  0.405256802422942  0.413833502820122    26.6570587416066 #> 22  4.48892649560599  0.215001292157755  0.222801958140914     16.263775644289 #> 23  4.22886279370199 0.0862781307306773 0.0877754182553391    6.44516648196385 #> 24              <NA>               <NA>               <NA>                <NA> #> 25  4.40691742581256   6.27551699589664   6.39269486373582    72.9497513073558 #> 26  4.50881253824884   3.57342221207934   3.61841405350228     65.316415420264 #> 27  4.48148152366327    2.7438144349902   2.79482705964671     59.816221386425 #> 28  4.65912182586388    2.4004850506933   2.44987575680227    56.9583785020066 #> 29  4.21730506042625   1.55602258586731   1.58601311143927    52.6740137180183 #> 30  4.52666068346475   1.35202650757542   1.38182638182509    47.6277620806136 #> 31   4.1758232612322  0.756617879705883  0.775881889583006    37.7362734036074 #> 32  3.45572059695088  0.408747924756684  0.421060597695676    27.7436567762995 #> 33   2.8979514253651  0.186904613078746  0.194350501932611    15.5810970944216 #> 34  2.61162071456912  0.104687130683993  0.105809768615773    7.41079763555635 #> 35              <NA>               <NA>               <NA>                <NA> #> 36  4.23037696414285   3.22192248070347   3.24515143380235    61.7675469785329 #> 37   4.1829686003736   2.03542573308886   2.04751998784201     55.428132656357 #> 38  4.23239786640579   2.27164202662614   2.31603311899162    52.9946827151625 #> 39  3.97522119102816   1.64923312599212   1.67730483910172    51.5699341005335 #> 40  4.05082656137161   1.43921604398728   1.48461645657734    47.2990819939491 #> 41  3.90561366416349   1.04185877831782   1.06155522811012    42.5069730864278 #> 42  3.59861419769181  0.846637979202687  0.883066584372498    37.1705990291536 #> 43  3.10106643334813  0.449178914553247  0.484578541684173    24.0480189349959 #> 44  6.50541947086557  0.118880552340684  0.122745711753372    10.1534344052569 #> 45              <NA>               <NA>               <NA>                <NA> #> 46              <NA>               <NA>               <NA>                <NA> #> 47              <NA>               <NA>               <NA>                <NA> #> 48  4.21013992736505   3.68013566310694   3.72511642626855    62.3934475812551 #> 49  4.20700537765097   2.73722879333565    2.8163241588076    57.0814654466645 #> 50  4.08397644815339   1.78879972917331   1.81608606326174    52.6226734808922 #> 51  4.02995732508815   2.10400250656154   2.13084108358334    52.3094728491611 #> 52  4.29507574020354   1.64145942377053   1.67854638810864    48.8808690804525 #> 53  4.07000688835838   1.10813829949464   1.12923091191597    40.9846455676091 #> 54  3.74183175395868  0.885586632890168  0.905181489180163      35.18903439942 #> 55  2.82621699884363  0.479712829624236  0.494870597649953    25.0894020095134 #> 56  6.44201019653323  0.118230188778178  0.121682592816687    8.48402444555394 #> 57              <NA>               <NA>               <NA>                <NA> #> 58              <NA>               <NA>               <NA>                <NA> #> 59              <NA>               <NA>               <NA>                <NA> #> 60   3.9098395104494   3.34339008622524   3.37777411515782     61.839162879581 #> 61  4.10747169672854   1.89951218160104   1.93875208602708    54.3096519266441 #> 62  3.90639951272433   1.69924417013481   1.73876356080329    52.2965997790535 #> 63  4.00283869559306   1.56309748845031    1.5812330540183    47.6367154067265 #> 64   4.1140533028501   1.17119236312127   1.21393469213922    42.9627389585377 #> 65  3.43527630045234  0.792348003736484  0.821219014100661    36.2724963674543 #> 66   3.0942227490874  0.368489655455786  0.393418542485458    23.8786072918491 #> 67  8.48095255081673  0.104475416461955  0.107711950631358    8.52435882219542 #> 68              <NA>               <NA>               <NA>                <NA> #> 69              <NA>               <NA>               <NA>                <NA> #> 70              <NA>               <NA>               <NA>                <NA> #>    ci95.integral.bt.up #> 1     76.0572961718845 #> 2     68.8836933582903 #> 3     65.1697857425596 #> 4     62.2960943726645 #> 5     60.0087543002909 #> 6     53.3972267799081 #> 7     49.6759502345384 #> 8     40.5335842102647 #> 9     29.2674889547666 #> 10    16.7058848195504 #> 11    7.18297433455945 #> 12                <NA> #> 13    77.1280816003956 #> 14    68.7817224365355 #> 15    69.1883888986997 #> 16    62.6067079265678 #> 17    60.8705961232514 #> 18    54.4803705964556 #> 19    49.3010308979553 #> 20     40.940172507035 #> 21    28.2036539261003 #> 22    17.0473155616125 #> 23    6.82970827068978 #> 24                <NA> #> 25    76.1461069684497 #> 26    67.1427750845674 #> 27    62.4213369237475 #> 28     59.734231636673 #> 29    55.6041024469515 #> 30    48.7828300509911 #> 31    39.9552946687299 #> 32    29.5674629862186 #> 33    16.3754908500969 #> 34    7.96155412268919 #> 35                <NA> #> 36    64.8764036295882 #> 37    57.8814378886569 #> 38    56.6424726961715 #> 39    53.9358285337284 #> 40    49.6792611669571 #> 41    46.2453679634073 #> 42    39.2811031775836 #> 43    26.9023545371147 #> 44     10.839826977416 #> 45                <NA> #> 46                <NA> #> 47                <NA> #> 48    65.2047008318175 #> 49    59.9798330811658 #> 50    56.1577957123764 #> 51    55.6061082861377 #> 52    51.1745957952482 #> 53     43.932919288833 #> 54    37.4772113237579 #> 55    26.7993796476847 #> 56    9.11019355547392 #> 57                <NA> #> 58                <NA> #> 59                <NA> #> 60     66.192743745683 #> 61    56.7544053658774 #> 62    54.6250905113536 #> 63    50.6928279360595 #> 64    47.5008826296118 #> 65    38.0350926642471 #> 66    25.5098192555701 #> 67    9.22200659441124 #> 68                <NA> #> 69                <NA> #> 70                <NA> # }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"Generic summary function gcFitLinear objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"","code":"# S3 method for gcFitLinear summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"object object class gcFitLinear ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"dataframe parameters extracted linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'l'))  summary(TestFit) #>          mu.linfit        tD.linfit    lambda.linfit        dY.linfit #> 1 0.63616751378163 1.08956708027985 3.96462294577352 6.02387821240112 #>           A.linfit tmu.start.linfit tmu.end.linfit       r2mu.linfit #> 1 6.07385690082057             5.75            9.5 0.999523402272331 #>   reliable_fit.linfit mu2.linfit tD2.linfit tmu2.start.linfit tmu2.end.linfit #> 1                TRUE       <NA>       <NA>              <NA>            <NA> #>   r2mu2.linfit reliable_fit2.linfit #> 1         <NA>                FALSE"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitModel objects — summary.gcFitModel","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"Generic summary function gcFitModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"","code":"# S3 method for gcFitModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"object object class gcFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"dataframe parameters extracted growth model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'm')) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  summary(TestFit) #>            mu.model          tD.model     lambda.model          A.model #> 1 0.801386732861995 0.864934684012682 4.85278434444725 4.69514721321101 #>           dY.model     A.orig.model    dY.orig.model   integral.model #> 1 4.70011755362908 5.23106149996608 5.25712637836862 75.9678060287848 #>   parameter_nu.model parameter_alpha.model parameter_t_shift.model #> 1               <NA>                  <NA>                    <NA> #>     parameter_y0.model         stdmu.model    stdlambda.model #> 1 -0.00499396244253793 0.00245366559688375 0.0149828183131298 #>            stdA.model reliable_fit.model  ci90.mu.model.lo  ci90.mu.model.up #> 1 0.00225040372543567               TRUE 0.797350452955122 0.805423012768869 #>   ci90.lambda.model.lo ci90.lambda.model.up  ci90.A.model.lo  ci90.A.model.up #> 1     4.82813760832215     4.87743108057234 4.69144529908267 4.69884912733935 #>    ci95.mu.model.lo  ci95.mu.model.up ci95.lambda.model.lo ci95.lambda.model.up #> 1 0.796577548292103 0.806195917431888     4.82341802055351     4.88215066834098 #>    ci95.A.model.lo  ci95.A.model.up #> 1 4.69073642190915 4.69955800451286"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"Generic summary function gcFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"","code":"# S3 method for gcFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"object object class gcFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"dataframe parameters extracted nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitSpline(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 's'))  summary(TestFit) #>           mu.spline        tD.spline tmax.spline    lambda.spline mu2.spline #> 1 0.673935438068483 1.02850679962241           8 4.36597668354251       <NA> #>   tD2.spline tmax2.spline lambda2.spline          y0.spline         A.spline #> 1       <NA>         <NA>           <NA> 0.0503885771804589 6.10175537092369 #>          dY.spline  integral.spline reliable_fit.spline reliable_fit2.spline #> 1 6.05136679374323 76.2343510630086                TRUE                FALSE #>   smooth.spline #> 1          0.55"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"Generate grouped results table linear fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"","code":"table_group_fluorescence_linear(flTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"flTable object class flTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"data frame grouped linear fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"","code":"# \\donttest{ # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"l\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  table_group_fluorescence_linear(res$flFit$flTable) #>             Sample|Conc. slope_max lagtime        dY     Y_max x_start(mumax) #> 1       pSEVA634∙GFP | 0                                                      #> 2      pSEVA634r∙GFP | 0                                                      #> 3     pSEVA634rκ∙GFP | 0    75.796  23.666   376.798  2228.283             16 #> 4    pSEVA634∙GFP | 0.01   262.266  17.259  5820.567  7503.259             30 #> 5   pSEVA634r∙GFP | 0.01                                                      #> 6  pSEVA634rκ∙GFP | 0.01   225.688  13.904  3020.995  4880.808             15 #> 7    pSEVA634∙GFP | 0.05   658.849  10.171 15562.241     17045             16 #> 8   pSEVA634r∙GFP | 0.05   307.497  14.566  3856.069   5224.49           14.5 #> 9  pSEVA634rκ∙GFP | 0.05   385.864   7.481  6056.345  7883.268             10 #> 10    pSEVA634∙GFP | 0.1   786.634   1.892 18027.038 19670.602            2.5 #> 11   pSEVA634r∙GFP | 0.1   514.144  11.836  6070.424  6990.424             15 #> 12  pSEVA634rκ∙GFP | 0.1   404.264   6.785  7467.593  9260.697           15.5 #> 13    pSEVA634∙GFP | 0.2   810.584   2.174 18686.014 20250.899            3.5 #> 14   pSEVA634r∙GFP | 0.2    540.02  11.918  6008.673  7054.127             15 #> 15  pSEVA634rκ∙GFP | 0.2   391.915    6.01   7526.82  9138.889             16 #> 16    pSEVA634∙GFP | 0.5   820.283   1.388 18860.637 20504.202              5 #> 17   pSEVA634r∙GFP | 0.5   494.059  11.004  6225.536  7150.065             15 #> 18  pSEVA634rκ∙GFP | 0.5    429.55   7.469  7650.517  9370.143           15.5 #> 19      pSEVA634∙GFP | 1   877.851   2.083 17785.309 19449.102            3.5 #> 20     pSEVA634r∙GFP | 1   559.313  12.303  6148.718  7412.869             16 #> 21    pSEVA634rκ∙GFP | 1   395.584   6.293  7763.536  9317.992             15 #>    x_end(mumax) #> 1               #> 2               #> 3          19.5 #> 4          34.5 #> 5               #> 6            20 #> 7            20 #> 8          19.5 #> 9          14.5 #> 10          6.5 #> 11           19 #> 12           20 #> 13          8.5 #> 14         19.5 #> 15           20 #> 16            9 #> 17         19.5 #> 18           20 #> 19            8 #> 20         19.5 #> 21           20  # with HTML formatting DT::datatable(table_group_fluorescence_linear(res$flFit$flTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"],[\"pSEVA634∙GFP | 0\",\"pSEVA634r∙GFP | 0\",\"pSEVA634rκ∙GFP | 0\",\"pSEVA634∙GFP | 0.01\",\"pSEVA634r∙GFP | 0.01\",\"pSEVA634rκ∙GFP | 0.01\",\"pSEVA634∙GFP | 0.05\",\"pSEVA634r∙GFP | 0.05\",\"pSEVA634rκ∙GFP | 0.05\",\"pSEVA634∙GFP | 0.1\",\"pSEVA634r∙GFP | 0.1\",\"pSEVA634rκ∙GFP | 0.1\",\"pSEVA634∙GFP | 0.2\",\"pSEVA634r∙GFP | 0.2\",\"pSEVA634rκ∙GFP | 0.2\",\"pSEVA634∙GFP | 0.5\",\"pSEVA634r∙GFP | 0.5\",\"pSEVA634rκ∙GFP | 0.5\",\"pSEVA634∙GFP | 1\",\"pSEVA634r∙GFP | 1\",\"pSEVA634rκ∙GFP | 1\"],[\"\",\"\",\"75.796\",\"262.266\",\"\",\"225.688\",\"658.849\",\"307.497\",\"385.864\",\"786.634\",\"514.144\",\"404.264\",\"810.584\",\"540.02\",\"391.915\",\"820.283\",\"494.059\",\"429.55\",\"877.851\",\"559.313\",\"395.584\"],[\"\",\"\",\"23.666\",\"17.259\",\"\",\"13.904\",\"10.171\",\"14.566\",\"7.481\",\"1.892\",\"11.836\",\"6.785\",\"2.174\",\"11.918\",\"6.01\",\"1.388\",\"11.004\",\"7.469\",\"2.083\",\"12.303\",\"6.293\"],[\"\",\"\",\"376.798\",\"5820.567\",\"\",\"3020.995\",\"15562.241\",\"3856.069\",\"6056.345\",\"18027.038\",\"6070.424\",\"7467.593\",\"18686.014\",\"6008.673\",\"7526.82\",\"18860.637\",\"6225.536\",\"7650.517\",\"17785.309\",\"6148.718\",\"7763.536\"],[\"\",\"\",\"2228.283\",\"7503.259\",\"\",\"4880.808\",\"17045\",\"5224.49\",\"7883.268\",\"19670.602\",\"6990.424\",\"9260.697\",\"20250.899\",\"7054.127\",\"9138.889\",\"20504.202\",\"7150.065\",\"9370.143\",\"19449.102\",\"7412.869\",\"9317.992\"],[\"\",\"\",\"16\",\"30\",\"\",\"15\",\"16\",\"14.5\",\"10\",\"2.5\",\"15\",\"15.5\",\"3.5\",\"15\",\"16\",\"5\",\"15\",\"15.5\",\"3.5\",\"16\",\"15\"],[\"\",\"\",\"19.5\",\"34.5\",\"\",\"20\",\"20\",\"19.5\",\"14.5\",\"6.5\",\"19\",\"20\",\"8.5\",\"19.5\",\"20\",\"9\",\"19.5\",\"20\",\"8\",\"19.5\",\"20\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>slope<sub>max<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>x<sub>start<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n      <th>x<sub>end<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"Generate grouped results table spline fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"","code":"table_group_fluorescence_spline(flTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"flTable object class flTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"data frame grouped spline fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  table_group_fluorescence_spline(res$flFit$flTable) #>           Sample | Conc. slope_max lagtime     Y_max        dY x(slope_max) #> 1       pSEVA634∙GFP | 0    92.267  15.547  3427.126  2135.701         20.5 #> 2      pSEVA634r∙GFP | 0    30.773  31.287  1470.992   282.714           20 #> 3     pSEVA634rκ∙GFP | 0    64.176  20.813  2196.189   630.596           16 #> 4    pSEVA634∙GFP | 0.01   242.558  14.983  7592.801  6072.997         23.5 #> 5   pSEVA634r∙GFP | 0.01    64.653  21.671  2384.304  1128.582           19 #> 6  pSEVA634rκ∙GFP | 0.01    205.58  12.566  4820.287  3196.134           18 #> 7    pSEVA634∙GFP | 0.05   509.395    6.96 17121.214 15989.029         21.5 #> 8   pSEVA634r∙GFP | 0.05   204.032  13.436  5206.543  3800.827         17.5 #> 9  pSEVA634rκ∙GFP | 0.05   290.961   4.674  7768.189  6299.664           13 #> 10    pSEVA634∙GFP | 0.1   670.985   0.373  20079.01 18869.536            6 #> 11   pSEVA634r∙GFP | 0.1   327.195   9.868  6840.378  5652.539           17 #> 12  pSEVA634rκ∙GFP | 0.1   335.244   3.651  9191.863  7723.924         17.5 #> 13    pSEVA634∙GFP | 0.2   728.625   0.554 20481.098 19589.302          6.5 #> 14   pSEVA634r∙GFP | 0.2   346.268   9.758  7000.845  5718.068         16.5 #> 15  pSEVA634rκ∙GFP | 0.2   320.247   3.214  9006.211  7463.562         17.5 #> 16    pSEVA634∙GFP | 0.5   774.054   0.247 20704.091 19571.651          5.5 #> 17   pSEVA634r∙GFP | 0.5   337.909   8.089  6952.687  6090.024         16.5 #> 18  pSEVA634rκ∙GFP | 0.5   351.644   4.845  9322.628  7720.204           18 #> 19      pSEVA634∙GFP | 1   779.134   0.462 19774.702 18757.659            6 #> 20     pSEVA634r∙GFP | 1   353.185   9.572  7189.597  5865.901         16.5 #> 21    pSEVA634rκ∙GFP | 1   338.827   5.016  9258.531  7551.009           18  # with HTML formatting DT::datatable(table_group_fluorescence_spline(res$flFit$flTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"],[\"pSEVA634∙GFP | 0\",\"pSEVA634r∙GFP | 0\",\"pSEVA634rκ∙GFP | 0\",\"pSEVA634∙GFP | 0.01\",\"pSEVA634r∙GFP | 0.01\",\"pSEVA634rκ∙GFP | 0.01\",\"pSEVA634∙GFP | 0.05\",\"pSEVA634r∙GFP | 0.05\",\"pSEVA634rκ∙GFP | 0.05\",\"pSEVA634∙GFP | 0.1\",\"pSEVA634r∙GFP | 0.1\",\"pSEVA634rκ∙GFP | 0.1\",\"pSEVA634∙GFP | 0.2\",\"pSEVA634r∙GFP | 0.2\",\"pSEVA634rκ∙GFP | 0.2\",\"pSEVA634∙GFP | 0.5\",\"pSEVA634r∙GFP | 0.5\",\"pSEVA634rκ∙GFP | 0.5\",\"pSEVA634∙GFP | 1\",\"pSEVA634r∙GFP | 1\",\"pSEVA634rκ∙GFP | 1\"],[\"92.267\",\"30.773\",\"64.176\",\"242.558\",\"64.653\",\"205.58\",\"509.395\",\"204.032\",\"290.961\",\"670.985\",\"327.195\",\"335.244\",\"728.625\",\"346.268\",\"320.247\",\"774.054\",\"337.909\",\"351.644\",\"779.134\",\"353.185\",\"338.827\"],[\"15.547\",\"31.287\",\"20.813\",\"14.983\",\"21.671\",\"12.566\",\"6.96\",\"13.436\",\"4.674\",\"0.373\",\"9.868\",\"3.651\",\"0.554\",\"9.758\",\"3.214\",\"0.247\",\"8.089\",\"4.845\",\"0.462\",\"9.572\",\"5.016\"],[\"3427.126\",\"1470.992\",\"2196.189\",\"7592.801\",\"2384.304\",\"4820.287\",\"17121.214\",\"5206.543\",\"7768.189\",\"20079.01\",\"6840.378\",\"9191.863\",\"20481.098\",\"7000.845\",\"9006.211\",\"20704.091\",\"6952.687\",\"9322.628\",\"19774.702\",\"7189.597\",\"9258.531\"],[\"2135.701\",\"282.714\",\"630.596\",\"6072.997\",\"1128.582\",\"3196.134\",\"15989.029\",\"3800.827\",\"6299.664\",\"18869.536\",\"5652.539\",\"7723.924\",\"19589.302\",\"5718.068\",\"7463.562\",\"19571.651\",\"6090.024\",\"7720.204\",\"18757.659\",\"5865.901\",\"7551.009\"],[\"20.5\",\"20\",\"16\",\"23.5\",\"19\",\"18\",\"21.5\",\"17.5\",\"13\",\"6\",\"17\",\"17.5\",\"6.5\",\"16.5\",\"17.5\",\"5.5\",\"16.5\",\"18\",\"6\",\"16.5\",\"18\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>slope<sub>max<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>x(slope<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"Generate grouped results table linear fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"","code":"table_group_growth_linear(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"data frame grouped linear fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"","code":"# \\donttest{ # Create random growth data set rnd.data <- rdm.data(d = 30, mu = 0.6, A = 4.5, label = \"Test2\")   # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"l\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_linear(res$gcFit$gcTable) #>     Sample|Conc.         mumax            tD       lagtime            dY #> 1      Test2 | 0 0.473 ± 0.001 1.467 ± 0.004 3.966 ± 0.194 3.632 ± 0.084 #> 2  Test2 | 0.039 0.383 ± 0.003 1.808 ± 0.012 4.053 ± 0.166 1.783 ± 0.194 #> 3  Test2 | 0.059 0.345 ± 0.012 2.013 ± 0.071 4.028 ± 0.122 1.525 ± 0.099 #> 4  Test2 | 0.088  0.29 ± 0.003 2.387 ± 0.022 3.716 ± 0.245 1.123 ± 0.061 #> 5   Test2 | 0.13 0.214 ± 0.008 3.247 ± 0.129 3.486 ± 0.191  0.887 ± 0.12 #> 6    Test2 | 0.2 0.126 ± 0.018 5.562 ± 0.784 3.233 ± 1.207 0.413 ± 0.044 #> 7    Test2 | 0.3                                                         #> 8   Test2 | 0.44                                                         #> 9   Test2 | 0.67                                                         #> 10     Test2 | 1                                                         #>            Y_max t_start(mumax)   t_end(mumax) #> 1  3.681 ± 0.085    6.75 ± 0.25   10.25 ± 0.25 #> 2  1.836 ± 0.197  6.833 ± 0.144   10.25 ± 0.25 #> 3  1.581 ± 0.099    6.75 ± 0.75    9.25 ± 0.75 #> 4  1.175 ± 0.061        7 ± 0.5   10.5 ± 1.392 #> 5  0.943 ± 0.121  9.083 ± 1.181    11.5 ± 1.09 #> 6  0.467 ± 0.046 12.333 ± 0.804 14.333 ± 0.629 #> 7                                              #> 8                                              #> 9                                              #> 10                                              # with HTML formatting DT::datatable(table_group_growth_linear(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[\"Test2 | 0\",\"Test2 | 0.039\",\"Test2 | 0.059\",\"Test2 | 0.088\",\"Test2 | 0.13\",\"Test2 | 0.2\",\"Test2 | 0.3\",\"Test2 | 0.44\",\"Test2 | 0.67\",\"Test2 | 1\"],[\"0.473 ± 0.001\",\"0.383 ± 0.003\",\"0.345 ± 0.012\",\"0.29 ± 0.003\",\"0.214 ± 0.008\",\"0.126 ± 0.018\",\"\",\"\",\"\",\"\"],[\"1.467 ± 0.004\",\"1.808 ± 0.012\",\"2.013 ± 0.071\",\"2.387 ± 0.022\",\"3.247 ± 0.129\",\"5.562 ± 0.784\",\"\",\"\",\"\",\"\"],[\"3.966 ± 0.194\",\"4.053 ± 0.166\",\"4.028 ± 0.122\",\"3.716 ± 0.245\",\"3.486 ± 0.191\",\"3.233 ± 1.207\",\"\",\"\",\"\",\"\"],[\"3.632 ± 0.084\",\"1.783 ± 0.194\",\"1.525 ± 0.099\",\"1.123 ± 0.061\",\"0.887 ± 0.12\",\"0.413 ± 0.044\",\"\",\"\",\"\",\"\"],[\"3.681 ± 0.085\",\"1.836 ± 0.197\",\"1.581 ± 0.099\",\"1.175 ± 0.061\",\"0.943 ± 0.121\",\"0.467 ± 0.046\",\"\",\"\",\"\",\"\"],[\"6.75 ± 0.25\",\"6.833 ± 0.144\",\"6.75 ± 0.75\",\"7 ± 0.5\",\"9.083 ± 1.181\",\"12.333 ± 0.804\",\"\",\"\",\"\",\"\"],[\"10.25 ± 0.25\",\"10.25 ± 0.25\",\"9.25 ± 0.75\",\"10.5 ± 1.392\",\"11.5 ± 1.09\",\"14.333 ± 0.629\",\"\",\"\",\"\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>t<sub>start<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n      <th>t<sub>end<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"Generate grouped results table parametric fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"","code":"table_group_growth_model(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"data frame grouped model fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"","code":"# Create random growth data set rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")   # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"m\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_model(res$gcFit$gcTable) #>     Sample|Conc.         mumax             tD       lagtime         Y_max #> 1      Test1 | 0 0.802 ± 0.004  0.864 ± 0.004 5.052 ± 0.158 4.732 ± 0.055 #> 2  Test1 | 0.017 0.786 ± 0.009   0.882 ± 0.01 5.085 ± 0.218 4.323 ± 0.038 #> 3  Test1 | 0.026 0.779 ± 0.007   0.89 ± 0.008 5.205 ± 0.236 4.149 ± 0.056 #> 4  Test1 | 0.039  0.76 ± 0.008   0.913 ± 0.01 5.287 ± 0.239 3.931 ± 0.046 #> 5  Test1 | 0.059 0.732 ± 0.009  0.947 ± 0.012 5.336 ± 0.066 3.748 ± 0.061 #> 6  Test1 | 0.088 0.673 ± 0.006    1.03 ± 0.01   5.47 ± 0.16 3.556 ± 0.014 #> 7   Test1 | 0.13 0.589 ± 0.014  1.177 ± 0.028 5.754 ± 0.077 3.103 ± 0.083 #> 8    Test1 | 0.2 0.441 ± 0.005  1.574 ± 0.017 6.206 ± 0.106 2.639 ± 0.039 #> 9    Test1 | 0.3 0.226 ± 0.066  3.288 ± 1.159 5.168 ± 1.743 2.249 ± 0.103 #> 10  Test1 | 0.44 0.142 ± 0.014  4.899 ± 0.448 6.571 ± 0.137 1.583 ± 0.089 #> 11  Test1 | 0.67 0.061 ± 0.022 12.237 ± 3.831 3.688 ± 4.372 1.046 ± 0.113 #> 12     Test1 | 1                                                          #>               dY #> 1  4.739 ± 0.059 #> 2  4.334 ± 0.043 #> 3  4.142 ± 0.052 #> 4  3.929 ± 0.068 #> 5  3.745 ± 0.061 #> 6  3.535 ± 0.013 #> 7  3.111 ± 0.074 #> 8  2.635 ± 0.027 #> 9  2.132 ± 0.038 #> 10 1.305 ± 0.049 #> 11 0.601 ± 0.021 #> 12                # with HTML formatting DT::datatable(table_group_growth_model(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"Test1 | 0\",\"Test1 | 0.017\",\"Test1 | 0.026\",\"Test1 | 0.039\",\"Test1 | 0.059\",\"Test1 | 0.088\",\"Test1 | 0.13\",\"Test1 | 0.2\",\"Test1 | 0.3\",\"Test1 | 0.44\",\"Test1 | 0.67\",\"Test1 | 1\"],[\"0.802 ± 0.004\",\"0.786 ± 0.009\",\"0.779 ± 0.007\",\"0.76 ± 0.008\",\"0.732 ± 0.009\",\"0.673 ± 0.006\",\"0.589 ± 0.014\",\"0.441 ± 0.005\",\"0.226 ± 0.066\",\"0.142 ± 0.014\",\"0.061 ± 0.022\",\"\"],[\"0.864 ± 0.004\",\"0.882 ± 0.01\",\"0.89 ± 0.008\",\"0.913 ± 0.01\",\"0.947 ± 0.012\",\"1.03 ± 0.01\",\"1.177 ± 0.028\",\"1.574 ± 0.017\",\"3.288 ± 1.159\",\"4.899 ± 0.448\",\"12.237 ± 3.831\",\"\"],[\"5.052 ± 0.158\",\"5.085 ± 0.218\",\"5.205 ± 0.236\",\"5.287 ± 0.239\",\"5.336 ± 0.066\",\"5.47 ± 0.16\",\"5.754 ± 0.077\",\"6.206 ± 0.106\",\"5.168 ± 1.743\",\"6.571 ± 0.137\",\"3.688 ± 4.372\",\"\"],[\"4.732 ± 0.055\",\"4.323 ± 0.038\",\"4.149 ± 0.056\",\"3.931 ± 0.046\",\"3.748 ± 0.061\",\"3.556 ± 0.014\",\"3.103 ± 0.083\",\"2.639 ± 0.039\",\"2.249 ± 0.103\",\"1.583 ± 0.089\",\"1.046 ± 0.113\",\"\"],[\"4.739 ± 0.059\",\"4.334 ± 0.043\",\"4.142 ± 0.052\",\"3.929 ± 0.068\",\"3.745 ± 0.061\",\"3.535 ± 0.013\",\"3.111 ± 0.074\",\"2.635 ± 0.027\",\"2.132 ± 0.038\",\"1.305 ± 0.049\",\"0.601 ± 0.021\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>dY<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"Generate grouped results table spline fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"","code":"table_group_growth_spline(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"data frame grouped spline fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"","code":"# Create random growth data set rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_spline(res$gcFit$gcTable) #>     Sample|Conc.         mumax             tD       lagtime         Y_max #> 1      Test1 | 0 0.663 ± 0.006  1.046 ± 0.009  4.375 ± 0.21  6.46 ± 0.524 #> 2  Test1 | 0.017 0.626 ± 0.006   1.108 ± 0.01 4.213 ± 0.022  3.56 ± 0.153 #> 3  Test1 | 0.026 0.596 ± 0.003  1.162 ± 0.006 4.306 ± 0.158 3.026 ± 0.291 #> 4  Test1 | 0.039 0.583 ± 0.012   1.19 ± 0.025 4.456 ± 0.122 3.007 ± 0.201 #> 5  Test1 | 0.059 0.535 ± 0.006  1.297 ± 0.015 4.688 ± 0.098  2.19 ± 0.308 #> 6  Test1 | 0.088 0.474 ± 0.006  1.461 ± 0.017 4.619 ± 0.291  1.689 ± 0.04 #> 7   Test1 | 0.13 0.383 ± 0.008   1.81 ± 0.039 4.351 ± 0.209 1.215 ± 0.116 #> 8    Test1 | 0.2 0.269 ± 0.012   2.578 ± 0.12 3.983 ± 0.303 0.799 ± 0.079 #> 9    Test1 | 0.3  0.15 ± 0.005   4.64 ± 0.168 3.199 ± 0.409 0.465 ± 0.009 #> 10  Test1 | 0.44 0.071 ± 0.002  9.812 ± 0.326 1.962 ± 0.152 0.192 ± 0.023 #> 11  Test1 | 0.67 0.034 ± 0.003 20.474 ± 1.868 1.804 ± 0.723  0.092 ± 0.01 #> 12     Test1 | 1                                                          #>               dY       t(mumax) #> 1  6.408 ± 0.521       8 ± 0.25 #> 2  3.511 ± 0.153            7.5 #> 3  2.974 ± 0.286  7.667 ± 0.144 #> 4  2.953 ± 0.198  7.917 ± 0.144 #> 5  2.136 ± 0.304    8.25 ± 0.25 #> 6   1.64 ± 0.038  8.417 ± 0.382 #> 7   1.16 ± 0.115  8.333 ± 0.289 #> 8  0.748 ± 0.076  9.417 ± 0.144 #> 9    0.41 ± 0.01   10.5 ± 1.146 #> 10 0.141 ± 0.019 10.333 ± 2.255 #> 11 0.039 ± 0.006  6.333 ± 3.394 #> 12                               # with HTML formatting DT::datatable(table_group_growth_spline(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"Test1 | 0\",\"Test1 | 0.017\",\"Test1 | 0.026\",\"Test1 | 0.039\",\"Test1 | 0.059\",\"Test1 | 0.088\",\"Test1 | 0.13\",\"Test1 | 0.2\",\"Test1 | 0.3\",\"Test1 | 0.44\",\"Test1 | 0.67\",\"Test1 | 1\"],[\"0.663 ± 0.006\",\"0.626 ± 0.006\",\"0.596 ± 0.003\",\"0.583 ± 0.012\",\"0.535 ± 0.006\",\"0.474 ± 0.006\",\"0.383 ± 0.008\",\"0.269 ± 0.012\",\"0.15 ± 0.005\",\"0.071 ± 0.002\",\"0.034 ± 0.003\",\"\"],[\"1.046 ± 0.009\",\"1.108 ± 0.01\",\"1.162 ± 0.006\",\"1.19 ± 0.025\",\"1.297 ± 0.015\",\"1.461 ± 0.017\",\"1.81 ± 0.039\",\"2.578 ± 0.12\",\"4.64 ± 0.168\",\"9.812 ± 0.326\",\"20.474 ± 1.868\",\"\"],[\"4.375 ± 0.21\",\"4.213 ± 0.022\",\"4.306 ± 0.158\",\"4.456 ± 0.122\",\"4.688 ± 0.098\",\"4.619 ± 0.291\",\"4.351 ± 0.209\",\"3.983 ± 0.303\",\"3.199 ± 0.409\",\"1.962 ± 0.152\",\"1.804 ± 0.723\",\"\"],[\"6.46 ± 0.524\",\"3.56 ± 0.153\",\"3.026 ± 0.291\",\"3.007 ± 0.201\",\"2.19 ± 0.308\",\"1.689 ± 0.04\",\"1.215 ± 0.116\",\"0.799 ± 0.079\",\"0.465 ± 0.009\",\"0.192 ± 0.023\",\"0.092 ± 0.01\",\"\"],[\"6.408 ± 0.521\",\"3.511 ± 0.153\",\"2.974 ± 0.286\",\"2.953 ± 0.198\",\"2.136 ± 0.304\",\"1.64 ± 0.038\",\"1.16 ± 0.115\",\"0.748 ± 0.076\",\"0.41 ± 0.01\",\"0.141 ± 0.019\",\"0.039 ± 0.006\",\"\"],[\"8 ± 0.25\",\"7.5\",\"7.667 ± 0.144\",\"7.917 ± 0.144\",\"8.25 ± 0.25\",\"8.417 ± 0.382\",\"8.333 ± 0.289\",\"9.417 ± 0.144\",\"10.5 ± 1.146\",\"10.333 ± 2.255\",\"6.333 ± 3.394\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>t(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"function converts data frame \"tidy\" format custom format used QurvE (row format). provided \"tidy\" data columns \"Description\", \"Concentration\", \"Replicate\", \"Values\", one row per time point sample. Alternatively, function converts data custom QurvE column format row format (data.format = \"col\").","code":""},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"","code":"tidy_to_custom(df, data.format = \"col\")"},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"df data frame tidy format, containing \"Time\", \"Description\", either \"Values\" \"Value\" columns. Optionally, meta information provided columns \"Replicate\" \"Concentration\" used. data.format (Character string) \"col\" (default) \"row\". relevant data provided \"tidy\" format prepared custom QurvE data format.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"data frame custom format (row format) used QurvE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/tidy_to_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a tidy data frame to a custom QurvE format — tidy_to_custom","text":"","code":"# # Create a tidy data frame with two samples, five concentrations, three replicates, and five time points samples <- c(\"Sample 1\", \"Sample 2\") concentrations <- c(0.1, 0.5, 1, 2, 5) time_points <- c(1, 2, 3, 4, 5) n_replicates <- 3  df <- expand.grid(    Description = c(\"Sample 1\", \"Sample 2\"),    Concentration = c(0.1, 0.5, 1, 2, 5),    Time = c(1, 2, 3, 4, 5),    Replicate = 1:3)  df$Value <- abs(rnorm(nrow(df)))"},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two dataframes like a zip-fastener — zipFastener","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"Combine rows columns two dataframes alternating manner","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"","code":"zipFastener(df1, df2, along = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"df1 first dataframe. df2 second dataframe dimensions df1. along 1 alternate rows 2 alternate columns.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"dataframe combined rows (columns) df1 df2.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"Mark Heckmann","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"","code":"# data frames equal dimensions df1 <- plyr::rdply(3, rep('o',4))[ ,-1] df2 <- plyr::rdply(3, rep('X',4))[ ,-1]  zipFastener(df1, df2) #>   V1 V1.1 V2 V2.1 V3 V3.1 V4 V4.1 #> 1  o    X  o    X  o    X  o    X #> 2  o    X  o    X  o    X  o    X #> 3  o    X  o    X  o    X  o    X zipFastener(df1, df2, 2) #>   V1 V1.1 V2 V2.1 V3 V3.1 V4 V4.1 #> 1  o    X  o    X  o    X  o    X #> 2  o    X  o    X  o    X  o    X #> 3  o    X  o    X  o    X  o    X zipFastener(df1, df2, 1) #>   V1 V2 V3 V4 #> 1  o  o  o  o #> 4  X  X  X  X #> 2  o  o  o  o #> 5  X  X  X  X #> 3  o  o  o  o #> 6  X  X  X  X  # data frames unequal in no. of rows df1 <- plyr::rdply(10, rep('o',4))[ ,-1] zipFastener(df1, df2, 1) #>    V1 V2 V3 V4 #> 1   o  o  o  o #> 11  X  X  X  X #> 2   o  o  o  o #> 12  X  X  X  X #> 3   o  o  o  o #> 13  X  X  X  X #> 4   o  o  o  o #> 5   o  o  o  o #> 6   o  o  o  o #> 7   o  o  o  o #> 8   o  o  o  o #> 9   o  o  o  o #> 10  o  o  o  o zipFastener(df2, df1, 1) #>    V1 V2 V3 V4 #> 1   X  X  X  X #> 4   o  o  o  o #> 2   X  X  X  X #> 5   o  o  o  o #> 3   X  X  X  X #> 6   o  o  o  o #> 7   o  o  o  o #> 8   o  o  o  o #> 9   o  o  o  o #> 10  o  o  o  o #> 11  o  o  o  o #> 12  o  o  o  o #> 13  o  o  o  o  # data frames unequal in no. of columns df2 <- plyr::rdply(10, rep('X',3))[ ,-1] zipFastener(df1, df2) #>    V1 V1.1 V2 V2.1 V3 V3.1 V4 #> 1   o    X  o    X  o    X  o #> 2   o    X  o    X  o    X  o #> 3   o    X  o    X  o    X  o #> 4   o    X  o    X  o    X  o #> 5   o    X  o    X  o    X  o #> 6   o    X  o    X  o    X  o #> 7   o    X  o    X  o    X  o #> 8   o    X  o    X  o    X  o #> 9   o    X  o    X  o    X  o #> 10  o    X  o    X  o    X  o zipFastener(df2, df1, 2) #>    V1 V1.1 V2 V2.1 V3 V3.1 V4 #> 1   X    o  X    o  X    o  o #> 2   X    o  X    o  X    o  o #> 3   X    o  X    o  X    o  o #> 4   X    o  X    o  X    o  o #> 5   X    o  X    o  X    o  o #> 6   X    o  X    o  X    o  o #> 7   X    o  X    o  X    o  o #> 8   X    o  X    o  X    o  o #> 9   X    o  X    o  X    o  o #> 10  X    o  X    o  X    o  o"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"enhancements-1-0-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"QurvE 1.0.1","text":"Report template .Rmd files now copied tempdir() rendering avoid bugs restrictive write permissions. shiny app: Don’t show “Select Read fluorescence normalization” Fluorescence [Ignore].","code":""},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"QurvE 1.0.1","text":"Issue #4: shiny app, checkbox ‘sort concentration’ show loading old RData file. Fixed bug Gen5/Gen6 parser one read type present.","code":""},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"qurve-10","dir":"Changelog","previous_headings":"","what":"QurvE 1.0","title":"QurvE 1.0","text":"CRAN release: 2023-01-12 Added NEWS.md file track changes package.","code":""}]
