[{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"navigation-bar","dir":"Articles","previous_headings":"","what":"Navigation Bar","title":"QurvE App User Manual v.1.0","text":"QurvE navigation bar.  Data: Load experimental data. Use either one several available parsers common cultivation devices provide data custom format. Computation: Run computational workflows entire growth fluorescence datasets perform curve fitting dose-response analyses. menu becomes available successful data parsing. Validation: Confirm accuracy fits sample re-run individual fits adjusted parameters. Results: View tabular summaries computational results, including calculated growth fluorescence curve parameters results dose-response analyses. Visualization: Compare samples conditions visualize computational results using series plots. Report: Create PDF HTML report summarizing results growth fluorescence curve analysis workflow. Data Export: Save raw data, computational results, fitting options .RData object storage distribution. Data Import: Load previously exported dataset .RData format.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading Data","title":"QurvE App User Manual v.1.0","text":"QurvE allows loading data different formats, growth experiments fluorescence measurements. Data can loaded using custom QurvE data layout, loading raw data various measuring equipment importing previously analyzed datasets.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data-formatted-in-the-custom-qurve-layout","dir":"Articles","previous_headings":"Loading Data","what":"Loading data formatted in the custom QurvE layout","title":"QurvE App User Manual v.1.0","text":"load data using custom QurvE layout, select [Data] > [Custom] window choose file .xls/.xlsx (selecting appropriate work sheets) .csv/.tsv/.txt format (define correct decimal separator , .csv, field separator target file). custom QurvE layout includes data relative metadata necessary QurvE perform analysis. custom layout can used load growth fluorescence data. Data second fluorescence channel can used normalize primary fluorescence values addition normalization growth values. data must formatted displayed Figure @ref(fig:custom-layout): first row contains ‘Time’, ‘Blank’, sample identifiers (IDs). ID needs identical replicates samples analyzed together within dose-response analysis. ‘Time’ column must positioned first position, ‘Blank’ samples follow arbitrary order. second row contains replicate numbers identical conditions. technical replicates used addition biological replicates, indicate technical replicates identical replicate numbers. Samples identical IDs, replicate numbers, concentration values (applicable) combined average values time point. Leave row empty replicate information available. third row designated contain concentration values perform dose-response analysis, different concentrations compound used experiment. Samples included dose-response analysis identical sample identifiers (first row). Leave row empty concentration information available relevant. Starting fourth row, table must include data ‘Time’, ‘Blank’ different samples. Several experiments can combined single custom dataset. Different experiments differing time values experiment-specific blanks distinguished individual ‘Time’ column left dataset. Blank values (experiment-specific) combined average subtracted remaining values option [Subtract blank] selected. metadata second third row optional perform analysis; metadata available, leave rows empty. data can processed (options indicated order applied data): converting time values, applying calibration equation measurements. subtracting blank values sample measurement, normalizing fluorescence data second fluorescence growth dataset, available. data processing functions optional.  QurvE custom data layout.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-data-from-raw-experiment-files","dir":"Articles","previous_headings":"Loading Data","what":"Loading data from raw experiment files","title":"QurvE App User Manual v.1.0","text":"QurvE supports loading directly raw data produced variety proprietary software different growth fluorescence measuring equipment, plate readers micro-bioreactors1. can done [Data] > [Parse Raw Data] window. loading file (1), selecting correct raw data format choosing one available equipments/software (2) assigning extracted read channels growth/fluorescence data (3), user provide mapping information metadata tabular format (.xls/.xlsx/.csv/.tsv/.txt file) (4). mapping file formatted shown Figure @ref(fig:mapping-layout): first column contains well numbers plate must match sample identifiers raw data file. second column contains ID (.e., organism, condition, etc.) sample. ID needs identical replicates samples analyzed together within dose-response analysis. third column contains replicate numbers identical conditions. technical replicates used addition biological replicates, indicate technical replicates replicate number. Samples identical IDs, replicate numbers, concentration values (applicable) combined average values time point. Leave row empty replicate information available. fourth column designated contain concentration values perform dose-response analysis, different concentrations compound interest used experiment. Leave row empty additional concentration information available. values ‘Blank’ samples combined averages subtracted remaining values option [Subtract blank] chosen. data can processed (options indicated order applied data): converting time values, applying calibration equation measurements. subtracting blank values sample measurement, normalizing fluorescence data second fluorescence growth dataset, available. data processing functions optional.  [Parse Raw Data] window enables loading raw data exported plate reader/bioreactor software. right panel illustrates layout additional mapping file metadata must supplemented analyze establish relationships conditions replicates.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"loading-previously-processed-data","dir":"Articles","previous_headings":"Loading Data","what":"Loading previously processed data","title":"QurvE App User Manual v.1.0","text":"QurvE supports exporting processed data reloading analysis inspection. Previously saved growth fluorescence data .RData format can loaded Data Import window (Figure @ref(fig:import-data)).  figure illustrates [Data Import] window, enables user load previously exported QurvE data files.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"processing-and-analyzing-data-in-qurve","dir":"Articles","previous_headings":"","what":"Processing and analyzing data in QurvE","title":"QurvE App User Manual v.1.0","text":"raw data loaded, QurvE can used process data fitting curves, calculating averages standard deviations replicates, well fitting data different models obtain growth parameters doubling times, yields, etc., dose-response parameters. Moreover, software allows user intuitively create publication-grade plots.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"run-computations","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Run computations","title":"QurvE App User Manual v.1.0","text":"raw data successfully parsed, [Computation] window unlock, enabling user process either Growth Fluorescence data (Figure @ref(fig:computation)). data can processed using different curve fitting methods, can selected panel left. default fitting options Linear regression fit Non-parametric fit (smooth spline). ticking Parametric fit (available Fluorescence analysis), parametric growth models models fit data. ticking Log-transform time time values transformed Ln(1 + time). Biphasic growth selected, QurvE tries identify second growth phase performing linear regressions non-parametric fits extracts corresponding parameters (e.g., growth rate, lag time second growth phase). Dose-response (EC50) analyses can performed either performing smooth spline fit (response spline fit) response vs. concentration data extracting EC50 concentration midpoint largest smallest response value, applying 20 (parametric) dose-response models choose best model based Akaike information criterion (AIC). computed parameter (e.g., growth rates obtained via linear regression, maximum fluorescence obtained via non-parametric fits…) can chosen response parameter quantify adverse beneficial effects substance. options Log-transform concentration Log-transform response available response spline fits. instances, Ln(x + 1) applied respective values. Additional information methods (global method-specific) fitting options available clicking [?] signs.  [Computation] window enables user define parameters data processing fitting. Growth data fluorescence data must processed separately.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"visualization-and-validation-of-curve-fitting","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Visualization and validation of curve fitting","title":"QurvE App User Manual v.1.0","text":"[Validation] window enables user verify correct fitting growth/fluorescence curves (see Figure @ref(fig:linear) example).  Example fitted growth curve [Validation] window. right panel, figure visualizes performed fit. case, red dots dashed line represent linear regression model used calculate maximum growth rate lag time.  Different tabs enable user visualize fit obtained different fitting methods (Linear Fits, Nonparametric fits, etc.). left pane independent samples can selected visualization. contains options modify figure, can exported .png .pdf formats. right pane, [Re-run modified parameters] button enables user modify fitting parameters rerun analysis selected sample obtain new fit updated parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"tabular-overview-of-results","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Tabular overview of results","title":"QurvE App User Manual v.1.0","text":"[Results] window (see Figure @ref(fig:results)) enables user obtain overview fitted parameters applied method. ticking [Group average] box user can visualize average ± standard deviation parameters replicates. deselected, parameters every single sample shown. table can exported .csv format clicking [Download table] button.  [Results] window gives tabular overview computed parameters applied fit method well results dose-response analyses.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"visualization-of-results","dir":"Articles","previous_headings":"Processing and analyzing data in QurvE","what":"Visualization of results","title":"QurvE App User Manual v.1.0","text":"data processed, [Visualization] window enables user visualize data using different plot formats: Group Plots: Plot growth data time multiple conditions plot. [Data type] drop menu allows user define type data (raw data, smoothing splines, normalized fluorescence) visualized curve chart. user can easily select cursor samples/groups plot [Conditions] input. Alternatively, ticking [(De-)select samples based string], user can select exclude samples typing strings include name sample included/excluded. [Plot group averages] box used visualize either averages replicates (± standard deviations) individual samples independently. Moreover, concentration metadata provided loading data, user can (de-)select samples using additional parameters. left pane contains also various options modify figure, can exported .png .pdf formats. Parameter Plots: Plot calculated curve parameters (growth rates, lag times, yields, etc.) different samples bar plot. [Parameter] drop menu allows user select parameter plotted. Samples conditions can (de-)selected via methods described Group Plots. Plot group averages box can used visualize either averages (95% confidence intervals) groups individual samples independently. Plot Grid: Plot several curves separate panels, coloring background based chosen parameter heatmap-like fashion. [Data type] drop menu allows user define type data visualized curve chart. [Parameter] drop menu allows user select parameter panel backgrounds colored. Samples conditions can (de-)selected via methods described Group Plots. concentration metadata provided loading data, panels can arranged matrix one concentration per row ticking [Sort concentration]. Dose-Response Analysis: Plot results dose-response analyses chosen response parameter y-axis concentration values x-axis. drawn line indicates fit applied data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/shiny_app_manual.html","id":"export-data-from-qurve","dir":"Articles","previous_headings":"","what":"Export data from QurvE","title":"QurvE App User Manual v.1.0","text":"QurvE enables user export data results different ways: Download Plot: figures plotted within QurvE can exported .png .pdf formats. Please note size exported plots differs figure diplayed within app dependent size QurvE window. size, aspect ratio resolution exported plot can adjusted dedicated [Width], [Height], [DPI] fields Report: [Report] window enables user export computational results figures performed fit single report file .pdf .html format. Data Export: [Data Export] window enables user export processed raw data well computation results fitting options single data container .RData format. Please note modifications figures included exported .RData file, make sure export figures separately. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"general introduction package, see vignette Quantitiative Growth Curve Evaluation Package QurvE. vignette show use QurvE analyze datasets fluorescence measurements taken time, well extract important results. Fluorescent reporter proteins widely used study mechanisms gene regulation develop biosensors allow detection chemical compounds provide insights intracellular environment. workflow analyzing fluorescence data works analogously analyzing growth data following scheme read data execute workflow. package allows users select either time growth data (e.g. simultaneous measurement cell density fluorescence intensity plate reader experiments) independent variable. Additionally, biosensors can characterized via dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"fluorescence-profiling-methods","dir":"Articles","previous_headings":"","what":"Fluorescence profiling methods","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"QurvE offers curve evaluation methods fluorescence data growth data, exception fitting growth models. calculation algorithms linear regression nonparametric fits (smoothing splines) well default parameters empirically adjusted account differences curve shapes commonly seen fluorescence data.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"dose-response-analysis-methods","dir":"Articles","previous_headings":"","what":"Dose-response analysis methods","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Dose response analysis useful method evaluating performance biosensor. Biosensors typically designed respond specific chemical compounds, strength response often depends concentration target compound. Dose-response analysis can used determine concentration target compound elicits half-maximal response biosensor (variants), half-maximal effective concentration (EC50). allows evaluation sensitivity specificity biosensor can used optimize design particular application. addition evaluating performance biosensors, dose-response analysis can also used study mechanisms gene regulation biological systems. measuring response biological system different concentrations chemical compound, researchers can gain insights genes pathways involved response, can identify potential targets drug discovery. QurvE provides two methods perform dose-response analyses fluorescence data: Perform smooth spline fit response vs. concentration data extract EC50 concentration midpoint largest smallest response value. Apply biosensor response model response vs. concentration data (Meyer et al., 2019).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"run-a-complete-fluorescence-analysis-workflow","dir":"Articles","previous_headings":"","what":"Run a complete fluorescence analysis workflow","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Load package: Next, load experimental data. example, dataset used preliminary characterization different versions SEVA (Standard European Vector Architecture) plasmid pSEVA634, described (Nikel et al., 2022). data contains growth fluorescence measurements converted custom QurvE data format located different work sheets XLSX file:","code":"library(QurvE)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"load-data","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Load data","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"two functions read_data() parse_data() come arguments give user control loading fluorescence data. growth data, arguments data.fl (file path), csvsep.fl (separator symbol CSV file), dec.fl (decimal separator), sheet.fl (Excel file worksheet number “name”) provide details data stored. calib.fl allows defining equation transform fluorescence values. Similarly, functions accept arguments data.fl2, csvsep.fl2, dec.fl2, sheet.fl2, calib.fl2 load data second fluorescence channel. second fluorescence currently used normalize first fluorescence values, applied …ADD CITATION… Normalization fluorescence, , can controlled via fl.normtype performed either dividing growth values (fl.normtype = 'growth') fluorescence 2 fl.normtype = 'fl2'. can inspect structure input object class grodata:","code":"input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\",     package = \"QurvE\"), sheet.growth = 1, data.fl = system.file(\"lac_promoters.xlsx\",     package = \"QurvE\"), sheet.fl = 2, fl.normtype = \"growth\")  # normalize fluorescence to growth data summary(input) #>                   Length Class      Mode    #> time              1785   -none-     numeric #> growth              88   data.frame list    #> fluorescence        88   data.frame list    #> norm.fluorescence   88   data.frame list    #> expdesign            4   data.frame list"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"plot-raw-data","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Plot raw data","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Raw data plot. Conditions can selected deselected using names = c('grp1', 'grp2') argument exclude.nm = c('grp3', 'grp4') argument, respectively. Similarly, concentrations can (de-selected) via conc exclude.conc arguments. plot individual samples instead grouping replicates, add mean = FALSE. See ?plot.grodata options.","code":"plot(input, data.type = \"fl\",      exclude.conc = c(0.5, 0.1),      log.y = FALSE,      legend.position = \"bottom\",      basesize = 10,      legend.ncol = 3,      lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"run-workflow","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Run Workflow","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"option export.res set TRUE, tab-delimited .txt files summarizing computation results created automatically, well flFitRes object (object class flFitRes) .RData file. object (.RData file) contains raw data, fitting options, computational results. Figure @ref(fig:flFitRes-container) shows structure generated flFitRes object. RStudio, View(flFitRes) allows interactive inspection data container. want create report summarizing computational results including graphical representation every fit, provide desired output format(s) report = 'pdf', report = 'html', report = c('pdf', 'html'). advantage report HTML format every figure can exported (editable) PDF file. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication. Arguments commonly modified: Please consult ?fl.workflow arguments customize workflow. Internal structure flFitResobject generated growth.workflow().","code":"flFitRes <- fl.workflow(grodata = input,      fit.opt = c(\"s\", \"l\"),     x_type = \"time\",      norm_fl = TRUE,      ec50 = TRUE,      dr.parameter = \"dY.spline\",     suppress.messages = TRUE,      export.res = FALSE, # Prevent creating TXT table and RData files with results     parallelize = FALSE) # Use only one available CPU core"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"tabular-results","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Tabular results","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"flFitRes object contains two tables summarizing computational results: - flFitRes$flFit$flable lists calculated curve parameters every sample fit - flFitRes$drFit$drTable contains results dose-response analysis Additionally, dedicated functions table_group_fluorescence_linear() table_group_fluorescence_spline() allow generation grouped results tables two fit types averages standard deviations. column headers resulting data frames formatted HTML visualization shiny DT::datatable(). summary results individual fit can obtained applying generic function summary() fit object within flFitRes.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"visualize-results","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow","what":"Visualize results","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Several generic plot() allow plotting results merely accessing list items within flFitRes object structure (Figure @ref(fig:flFitRes-container)).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"inspect-individual-fits","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Inspect individual fits","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"important verify accuracy fits applied attempting interpret results (workflow run interactive = TRUE. especially important analyzing fluorescence data, curve shapes level noise can vary significantly depending specific experiment equipment used cultivation. Linear fit plots validate applied fits. details function, run ?plot.gcFitLinear. Spline fit plots validate applied fits. details function, run ?plot.gcFitLinear. Normalization fluorescence reads typically introduces additional noise. default smoothing parameter smooth.fl suitable produce good-quality representations curves via nonparametric fits, linear fits either failed produced regression windows small. order obtain linear regression results accurately represent linear-increase section curves, decrease R2 threshold manually increase size sliding window (default calculated automatically sample). new settings need applied samples, re-run entire workflow adjusted parameters: Linear fit plots validate linear regressions re-running workflow adjusted parameters.","code":"plot(flFitRes$flFit$flFittedLinear[[1]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[3]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[6]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedSpline[[1]], basesize = 15) plot(flFitRes$flFit$flFittedSpline[[3]], basesize = 15) plot(flFitRes$flFit$flFittedSpline[[6]], basesize = 15) flFitRes <- fl.workflow(grodata = input,                           fit.opt = c(\"s\", \"l\"),                           x_type = \"time\",                           norm_fl = TRUE,                           lin.R2 = 0.95, # Decreased R2 threshold                           lin.h = 20, # Manually defined sliding window size                           ec50 = TRUE,                           dr.parameter = \"dY.spline\",                           suppress.messages = TRUE,                           export.res = FALSE,                           parallelize = FALSE) plot(flFitRes$flFit$flFittedLinear[[1]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[3]], cex.lab = 1.2, cex.axis = 1.2) plot(flFitRes$flFit$flFittedLinear[[6]], cex.lab = 1.2, cex.axis = 1.2)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"grouped-spline-fits","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Grouped spline fits","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"Applying plot() flFitRes object produces figure spline fits performed well first derivative (slope) time. generic function calls plot.flFitRes() data.type = 'spline'. Combined plot spline fits performed. addition options available data.type = 'raw', arguments can defined control appearance secondary panel showing slope time. See ?plot.flFitRes options. arranging individual samples grid, can create visual representation similar heat map illustrates values chosen parameter. can helpful way gain insights understand trends within data.: Plot grid spline fits performed one concentration per row. See ?plot.grid available options.","code":"plot(flFitRes,      data.type = \"spline\",      deriv = TRUE,      legend.position = \"bottom\",      legend.ncol = 3,      n.ybreaks = 10,      basesize=10,      lwd = 0.7) plot.grid(flFitRes,           param = \"max_slope.spline\",           pal = \"Mint\",           log.y = FALSE,           basesize = 12)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"compare-growth-parameters","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Compare growth parameters","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"function plot.parameter() works also flFitRes objects compare computed curve parameters: Parameter plots. mean = TRUE, results replicates combined shown mean ± 95% confidence interval. functions combining different growth curves, arguments name, exclude.nm, conc exclude.conc allow (de)selection specific samples conditions. Since applied growth models log-transformed data, calling ‘dY.orig.model’ ‘.orig.model’ instead ‘dY.model’ ‘.model’ provides respective values original scale. linear spline fits, done automatically. details function, run ?plot.parameter.","code":"# Parameters obtained from linear regression plot.parameter(flFitRes, param = \"max_slope.linfit\", basesize = 10,     legend.position = \"bottom\") plot.parameter(flFitRes, param = \"dY.linfit\", basesize = 10,     legend.position = \"bottom\")  # Parameters obtained from nonparametric fits plot.parameter(flFitRes, param = \"max_slope.spline\", basesize = 10,     legend.position = \"bottom\") plot.parameter(flFitRes, param = \"dY.spline\", basesize = 10,     legend.position = \"bottom\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_fluorescence.html","id":"dose-response-analysis","dir":"Articles","previous_headings":"Run a complete fluorescence analysis workflow > Visualize results","what":"Dose-response analysis","title":"Quantitiative Fluorescence Curve Evaluation with Package `QurvE`","text":"results dose-response analysis can visualized calling plot() drFit object stored within flFitRes. action calls plot.drFit() turn runs plot.drFitSpline() plot.drFitModel() (depending choice workflow) every condition dose-response analysis performed. Alternatively, can call plot() list elements grofit$drFit$drFittedModels grofit$drFit$drFittedSplines, respectively. Dose response analysis - model fits. details function, run ?plot.drFit.","code":"plot(flFitRes$drFit, cex.point = 1, cex.lab = 1.1, cex.axis = 1)"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"virtually disciplines biology dealing living organisms, classical microbiology applied biotechnology, routine characterize growth species study. QurvE provides suite analysis tools make growth profiling quick, efficient, reproducible. addition, allows characterization fluorescence data , e.g., biosensor characterization plate reader experiments (discussed vignette Quantitiative Fluorescence Curve Evaluation Package QurvE). computational steps obtain -depth characterization combined user-friendly workflow functions range plotting functions allow visualization fits comparison organism performances. physiological parameter calculated (e.g., growth rate µ, doubling time tD, lag time \\(\\lambda\\), growth measurement increase \\(\\Delta\\)Y, equivalent fluorescence parameters) can used perform dose-response analysis determine half-maximal effective concentration (EC50). package build foundation two R packages Kahm et al. (2010) Petzoldt (2022). QurvE designed usable minimal prior knowledge R programming language programming general. need familiar idea running commands console writing basic scripts. R beginners, great starting point, good resources suggest using RStudio application. provides environment writing running R code. consideration R novices, QurvE establishes framework complete, detailed growth curve analysis can performed two simple steps: Read data custom format parse data plate reader experiment. Run workflow, including fitting growth curves, dose-response analysis, rendering report summarizes results. computational results workflow stored data container (list) can visualized passing generic function plot(list_object). QurvE extends user’s control fits defining thresholds quality criteria, allows direct parsing data plate reader result files, calculates parameters additional growth phase (bi-phasic growth).","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"release-version","dir":"Articles","previous_headings":"Installation","what":"Release version","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"recent release version can found CRAN:","code":"install.packages(\"QurvE\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"development-version","dir":"Articles","previous_headings":"Installation","what":"Development version","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Install current version package devtools:","code":"install.packages(\"devtools\") library(devtools) install_github(\"NicWir/QurvE\")"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny app","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE features graphical user interface (GUI) developed Shiny app, designed user-friendly intuitive. can start app running: See QurvE User Manual details use front-end application.","code":"QurvE::run_app()"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"growth-profiling-methods","dir":"Articles","previous_headings":"","what":"Growth profiling methods","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Three methods available characterize growth curves: Fit parametric growth models (log-transformed) growth data Determine maximum growth rates (µmax) log-linear part growth curve using heuristic approach proposed “growth rates made easy”-method Hall et al. (2014). , QurvE uses code package Petzoldt (2022), adds user-defined thresholds () R2 values linear fits, (ii) relative standard deviations (RSD) estimates slopes, (iii) minimum fraction total growth value increase (\\(\\Delta\\)Y) regression window cover considered analysis. thresholds ensure robust reproducible identification linear range best describes growth curve. Additionally, parameters secondary growth phase can extracted bi-linear growth curves.1 algorithm works follows: Fit linear regressions [Theil-Sen estimator (Sen, 1968; Theil, 1992)] subsets h consecutive, log-transformed data points (sliding window size h). , example, h=5, fit linear regression points 1 \\(\\dots\\) 5, 2 \\(\\dots\\) 6, 3 \\(\\dots\\) 7 forth. Find subset highest slope \\(\\mu_{max}\\). R2 RSD values regression meet defined thresholds data points within regression window account least defined fraction total growth measurement increase? , evaluate regression second highest slope, forth. Include also data points adjacent subsets slope least \\(defined \\space quota \\times \\mu_{max}\\), e.g., regression windows least 95% maximum slope. Fit new linear model extended data window identified step iii. biphasic = TRUE (see section @ref(run-workflow)), following steps performed define second growth phase: Perform smooth spline fit data smoothing factor 0.5. Calculate second derivative spline fit perform smooth spline fit derivative smoothing factor 0.4. Determine local maxima minima second derivative. Find local minimum following \\(\\mu_{max}\\) repeat heuristic linear method later time values. Find local maximum \\(\\mu_{max}\\) repeat heuristic linear method earlier time values. Choose greater two independently determined slopes \\(\\mu_{max}2\\). Perform smooth spline fit (log-transformed) growth data extract µmax maximum value first derivative1. biphasic = TRUE (see section @ref(run-workflow)), following steps performed define second growth phase: Determine local minima within first derivative smooth spline fit. Remove ‘peak’ containing highest value first derivative (.e., \\(\\mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(\\mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(\\mu_{max}\\). Choose greater two independently determined slopes \\(\\mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"dose-response-analysis-methods","dir":"Articles","previous_headings":"","what":"Dose-response analysis methods","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"purpose dose-response analysis define sensitivity given organism effects compound potency substance, respectively. effects can either beneficial (e.g., nutrient compound) detrimental (e.g., antibiotic). sensitivity reflected half-maximal effective concentration (EC50), .e., concentration (dose) half-maximal response (e.g., \\(\\mu_{max}\\) \\(\\Delta\\)Y) observed. QurvE provides two methods determine EC50: Perform smooth spline fit response vs. concentration data extract EC50 concentration midpoint largest smallest response value. Apply 20 (parametric) dose-response models response vs. concentration data choose best model based Akaike information criterion (AIC). done using excellent package drc (Ritz et al., 2016).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"data-formats","dir":"Articles","previous_headings":"","what":"Data formats","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE accepts files formats .xls, .xlsx, .csv, .tsv, .txt (tab separated). data files structured shown Figure @ref(fig:data-layout). Alternatively, data parsers available allow direct import raw data different culture instruments. list currently supported devices, please run ?parse_data. Please note: recommend always converting .xls .xlsx files alternate format first speed parsing process. Reading Excel files may require orders magnitude longer processing time.","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"custom-format","dir":"Articles","previous_headings":"Data formats","what":"Custom format","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"ensure compatibility type measurement data type (e.g., optical density, cell count, measured dimensions), QurvE uses custom data layout. first column contains time values ‘Time’ top cell, cells #2 #3 ignored. remaining columns contain measurement values following sample identifiers top three rows: Sample name; usually combination organism condition, ‘blank’. Replicate number; replicates identified identical names concentration values. one type replicate (biological technical) performed, enter numerical values . biological technical replicates biological replicates performed, technical replicates replicate number. technical replicates combined average value. (optional) Concentration values added compound; information used perform dose-response analysis. Several experiments (e.g., runs different plate readers) can combined single file analyzed simultaneously. Therefore, different experiments marked presence separate time columns. Different lengths values time columns permitted.  read data custom format, run: data.growth argument takes path file name R dataframe object containing experimental data custom format. csvsep specifies separator symbol (required .csv files; default: ';'). dec decimal separator (required .csv, .tsv, .txt files; default: '.'). Excel file format used, sheet.growth specifies number name (quotes) sheet containing data. subtract.blank = TRUE, columns name ‘blank’ combined row-wise average, mean values subtracted measurements remaining samples. calib.growth argument, formula can provided form ‘y = function(x)’ (e.g., calib.growth = 'y = x * 2 + 0.5') transform growth measurement values.","code":"grodata <- read_data(data.growth = 'path_to_data_file',                    csvsep = ';', # or ','                    dec = '.', # or ','                    sheet.growth = 1, # number (or \"name\") of the EXCEL file sheet containing data                    subtract.blank = TRUE,                    calib.growth = NULL)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"data-parser","dir":"Articles","previous_headings":"Data formats","what":"Data parser","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"data generated culture devices (e.g., plate readers) different manufacturers come different formats. data used directly, must first “parsed” plate reader QurvE standard format. scenario, sample information must provided separate table maps samples respective identifiers.mapping table must following layout (Figure @ref(fig:mapping-layout)): Data parser mapping layout parse data, run: data.file argument takes path file containing experimental data exported culture device, map.file path file mapping information. software, can specify device (software) used generate data. csvsep.data csvsep.map specify separator symbol data mapping file, respectively (required .csv files; default: ';'). dec.data dec.map decimal separator used data mapping file, respectively (required .csv, .tsv, .txt files; default: '.'). Excel file format used one data mapping file, sheet.data /sheet.map specify number name (quotes) sheet containing data mapping information, respectively. Excel file contains data mapping information different worksheets, file path needs specified data.fileand map.file. subtract.blank = TRUE, samples name ‘blank’ combined row-wise average, mean values subtracted measurements remaining samples. argument convert.time accepts function ‘y = function(x)’ transform time values (e.g., convert.time = 'y = x/3600' convert seconds hours). one read type identified provided data file, user prompted specify measurements belong growth, fluorescence, fluorescence2, respectively.","code":"grodata <- parse_data(data.file = 'path_to_data_file',                     map.file = 'path_to_mapping_file',                     software = 'used_software_or_device',                     csvsep.data = ';', # or ','                     dec.data = '.', # or ','                     csvsep.map = ';', # or ','                     dec.map = '.', # or ','                     sheet.data = 1, # number (or \"name\") of the EXCEL file sheet containing data                     sheet.map = 1, # number (or \"name\") of the EXCEL file sheet containing                                    # mapping information                     subtract.blank = TRUE,                     calib.growth = NULL,                     convert.time = NULL)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"run-a-complete-growth-analysis-workflow","dir":"Articles","previous_headings":"","what":"Run a complete growth analysis workflow","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"QurvE reduces computational steps required create complete growth profiling two steps, read data run workflow. loading package: load experimental data publication Wirth & Nikel (2021) Pseudomonas putida KT2440 engineered strain tested sensitivity towards product 2-fluoromuconic acid:","code":"library(QurvE)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"load-data","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Load data","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"created object grodata can inspected View(grodata). list class grodata containing: time matrix 66 rows, corresponding one sample dataset, 161 columns, .e., time values sample. growth data frame 66 rows 161+3 columns. three additional columns contain sample identifiers condition, replicate, concentration. fluorescence1 (: NA) fluorescence2 (: NA) norm.fluorescence1 (: NA) norm.fluorescence2 (: NA) expdesign, data frame containing label, condition, replicate, concentration sample: can plot raw data. Applying generic plot() function grodata objects calls function plot.grodata().: Raw data plot. Conditions can selected deselected using names = c('grp1', 'grp2') argument exclude.nm = c('grp3', 'grp4') argument, respectively. Similarly, concentrations can (de-selected) via conc exclude.conc arguments. plot individual samples instead grouping replicates, add mean = FALSE. See ?plot.grodata options.","code":"grodata <- read_data(data.growth = system.file(\"2-FMA_toxicity.csv\",     package = \"QurvE\"), csvsep = \";\") head(grodata$expdesign) #>             label condition replicate concentration #> 1 KT2440 | 1 | 90    KT2440         1            90 #> 2 KT2440 | 1 | 70    KT2440         1            70 #> 3 KT2440 | 1 | 50    KT2440         1            50 #> 4 KT2440 | 1 | 25    KT2440         1            25 #> 5 KT2440 | 1 | 20    KT2440         1            20 #> 6 KT2440 | 1 | 15    KT2440         1            15 plot(grodata, data.type = \"growth\", log.y = FALSE,      x.lim = c(NA, 32), legend.position = \"right\",      exclude.conc = c(50, 70, 90),      basesize = 10, legend.ncol = 1, lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"run-workflow","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Run Workflow","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"perform complete growth profiling samples input dataset, call growth.workflow() function grodata object. supress.messages = TRUE, avoid printing information every sample’s fit sample console. default, selected response parameter perform dose-response analysis ‘mu.linfit’. choose different parameter, provide argument dr.parameter = 'choice'. list appropriate parameters provided within function documentation (?growth.workflow). option export.res set TRUE, tab-delimited .txt files summarizing computation results created, well grofit object (object class grofit) .RData file. object (.RData file) contains raw data, fitting options, computational results. Figure @ref(fig:grofit-container) shows structure generated grofit object. RStudio, View(grofit) allows interactive inspection data container. want create report summarizing computational results including graphical representation every fit, provide desired output format(s) report = 'pdf', report = 'html', report = c('pdf', 'html'). advantage report HTML format every figure can exported (editable) PDF file. spirit good scientific practice (data transparency), encourage anyone using QurvE attach .RData file generated reports publication. Arguments commonly modified: Please consult ?growth.workflow arguments customize workflow. Internal structure grofitobject generated growth.workflow().","code":"grofit <- growth.workflow(grodata = grodata, fit.opt = \"a\", ec50 = TRUE,     suppress.messages = TRUE,      export.res = FALSE, # Prevent creating TXT table and RData files with results     parallelize = FALSE) # Use only one available CPU core"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"tabular-results","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Tabular results","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"grofit object contains two tables summarizing computational results: - grofit$gcFit$gcTable lists calculated physiological parameters every sample fit - grofit$drFit$drTable contains results dose-response analysis TestId AddId concentration reliability_tag used.model log.x log.y.lin log.y.spline 1 KT2440 1 90 TRUE  FALSE TRUE TRUE 2 KT2440 1 70 TRUE  FALSE TRUE TRUE 3 KT2440 1 50 TRUE  FALSE TRUE TRUE log.y.model nboot.gc mu.linfit tD.linfit lambda.linfit dY.linfit 1 TRUE 0 0  0 2 TRUE 0 0  0 3 TRUE 0 0  0 Additionally, dedicated functions table_group_growth_linear(), table_group_growth_model(), table_group_growth_spline() allow generation grouped results tables three fit types averages standard deviations. column headers resulting data frames formatted HTML visualization shiny DT::datatable(). summary results individual fit can obtained applying generic function summary() fit object within grofit.","code":"# show the first three rows and first 14 columns of gcTable gcTable <- grofit$gcFit$gcTable gcTable[1:3, 1:14] # Show drTable. The function as.data.frame() ensures that it is shown in table format. drTable <- as.data.frame(grofit$drFit$drTable)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"visualize-results","dir":"Articles","previous_headings":"Run a complete growth analysis workflow","what":"Visualize results","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Several generic plot() methods written allow easy plotting results merely accessing list items within grofit object structure (Figure @ref(fig:grofit-container)).","code":""},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"grouped-spline-fits","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Grouped spline fits","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"Applying plot() grofit object produces figure spline fits performed well first derivative (slope) time. generic function calls plot.grofit() data.type = 'spline' thus, options available described Figure @ref(fig:raw-data-plot). Combined plot spline fits performed. addition options available data.type = 'raw', arguments can defined control appearance secondary panel showing slope time. See ?plot.grofit options.","code":"plot(grofit,      data.type = \"spline\",      log.y = TRUE,      deriv = TRUE,      conc = c(0,5,10,15,20),      legend.position = \"right\",      legend.ncol = 1,      x.lim = c(NA, 32),      y.lim = c(0.01,NA),      n.ybreaks = 10,      basesize=10,      lwd = 0.7)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"compare-growth-parameters","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Compare growth parameters","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"convenient way compare performance different organisms different conditions plot calculated growth parameters means function plot.parameter(). Parameter plots. mean = TRUE, results replicates combined shown mean ± 95% confidence interval. functions combining different growth curves, arguments name, exclude.nm, conc exclude.conc allow (de)selection specific samples conditions. Since applied growth models log-transformed data, calling ‘dY.orig.model’ ‘.orig.model’ instead ‘dY.model’ ‘.model’ provides respective values original scale. linear spline fits, done automatically. details function, run ?plot.parameter. parameter plot ´mu.linfit´ (growth rates determined linear regression), can see outlier strain KT2440 concentration 0. can plot individual fits condition find due fit quality: Linear fit plots identify sample outliers. details function, run ?plot.gcFitLinear. Apparently, algorithm find maximum slope growth curve standard threshold lin.R2 = 0.97 find appropriate fit within first stage growth due insufficient linearity. can manually re-run fit sample adjusted parameters. Thereby, lower R2 threshold increase size sliding window cover larger fraction growth curve. , update respective entries gcTable object summarizes fitting results (plot.parameter() accesses extract relevant data). generic function summary(), applied fit object single sample within grofit, provides required parameters update table. Lastly, also re-run dose-response analysis since ‘mu.linfit’ used response parameter (default), including erroneous value. Note: process manually updating grofitelements adjusted fits can avoided re-running growth.workflow adjusted global parameters running workflow interactive mode (interactive = TRUE). interactive mode, individual fit printed user can decide re-run single fit adjusted parameters. can validate quality updated fit: Updated linear fit outlier sample ‘KT2440 | 2 | 0’. looks better! Parameter plot updated fit.","code":"# Parameters obtained from linear regression plot.parameter(grofit, param = \"mu.linfit\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.linfit\", basesize = 10, legend.position = \"bottom\")  # Parameters obtained from nonparametric fits plot.parameter(grofit, param = \"mu.spline\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.spline\", basesize = 10, legend.position = \"bottom\")  # Parameters obtained from model fits plot.parameter(grofit, param = \"mu.model\", basesize = 10, legend.position = \"bottom\") plot.parameter(grofit, param = \"dY.orig.model\", basesize = 10,     legend.position = \"bottom\") plot(grofit$gcFit$gcFittedLinear$`KT2440 | 1 | 0`, cex.lab = 1.2,     cex.axis = 1.2) plot(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`, cex.lab = 1.2,     cex.axis = 1.2) # Replace the existing linear fit entry for sample `KT2440 | 2 | 0` # with a new fit grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0` <-   growth.gcFitLinear(time = grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`$raw.time,                      data = grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`$raw.data,                      control = growth.control(lin.R2 = 0.95, lin.h = 10))  # extract row index of sample `KT2440 | 2 | 0` ndx.row <- grep(\"KT2440 \\\\| 2 \\\\| 0\", grofit$expdesign$label)  # get column indices of linear fit parameters (\".linfit\") ndx.col <- grep(\"\\\\.linfit\", colnames(grofit$gcFit$gcTable) )  # Replace previous growth parameters stored in gcTable grofit$gcFit$gcTable[ndx.row, ndx.col] <-   summary(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`)  # Replace existing dose-response analysis with new fit grofit$drFit <- growth.drFit(   gcTable = grofit$gcFit$gcTable,   control = grofit$control) # we can copy the control object from the original workflow. plot(grofit$gcFit$gcFittedLinear$`KT2440 | 2 | 0`, cex.lab = 1.2) # Parameters obtained from linear regression plot.parameter(grofit, param = \"mu.linfit\", basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"plot-grids","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Plot grids","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"arranging individual samples grid, can create visual representation similar heat map illustrates values chosen parameter. can helpful way gain insights understand trends within data.: Plot grid spline fits performed . See ?plot.grid available options.","code":"plot.grid(grofit,            param = \"mu.linfit\",            pal = \"Mint\",            log.y = FALSE,           sort_by_conc = FALSE,           basesize = 9)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"dose-response-analysis","dir":"Articles","previous_headings":"Run a complete growth analysis workflow > Visualize results","what":"Dose-response analysis","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"results dose-response analysis can visualized calling plot() drFit object stored within grofit. action calls plot.drFit() turn runs plot.drFitSpline() plot.drFitModel() (depending choice dr.method workflow) every condition dose-response analysis performed. Alternatively, can call plot() list elements grofit$drFit$drFittedModels grofit$drFit$drFittedSplines, respectively. Dose response analysis - model fits. details function, run ?plot.drFit.","code":"plot(grofit$drFit, cex.point = 1, basesize = 12)"},{"path":"https://nicwir.github.io/QurvE/articles/vignette_growth.html","id":"bootstrapping","dir":"Articles","previous_headings":"","what":"Bootstrapping","title":"Quantitiative Growth Curve Evaluation with Package `QurvE`","text":"growth experiments performed larger scale manual growth measurements, technical deviations can result outliers. outliers can lead distortion curve fits, especially fewer data points available usual plate reading experiments. instance, bootstrapping can provide realistic estimation growth parameters. Bootstrapping statistical procedure resamples single dataset create many simulated samples. done randomly drawing data points dataset replacement original number data points reached. analysis (: growth fitting) performed individually bootstrapped replicate. variation resulting estimated parameters reasonable approximation variance parameters. include bootstrapping QurvE workflow, define argument nboot.gc. Similarly, can include bootstrapping dose-response analysis done dr.method = 'spline' defining argument nboot.dr. plot results growth fit bootstrapping, call plot() gcBootSpline object: Nonparametric growth fit bootstrapping. details function, run ?plot.gcBootSpline. applying plot() drBootSpline object, can plot dose-response bootstrap results: Dose-response analysis bootstrapping. details function, run ?plot.drBootSpline.","code":"grofit_bt <- growth.workflow(grodata = grodata,                              fit.opt = \"s\", # perform only nonparametric growth fitting                              nboot.gc = 50,                              ec50 = T,                              dr.method = \"spline\",                              dr.parameter = \"mu.spline\",                              nboot.dr = 50,                              smooth.dr = 0.25,                              suppress.messages = TRUE,                              export.res = F,                              parallelize = FALSE) plot(grofit_bt$gcFit$gcBootSpline[[7]], # Double braces serve as an alternative to                                         # access list items and allow their access by number      combine = TRUE, # combine both growth curves and parameter plots in the same window      lwd = 0.7) plot(grofit_bt$drFit$drBootSpline[[1]],      combine = TRUE, # combine both dose-response curves and parameter plots in the same window      lwd = 0.7)"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas T. Wirth. Author, maintainer, copyright holder. Jonathan Funk. Author.            Co-developer shiny app. Matthias Kahm. Contributor.            Author 'grofit' package, whose general data structure adopted QurvE. Maik Kschischo. Contributor.            Author 'grofit' package, whose general data structure adopted QurvE. Thomas Petzoldt. Contributor.            Creator package 'growthrates', whose function calculating linear regressions served template QurvE. Andrew Stein. Contributor.            Creator 'xgxr' package QurvE adopted code plot axis ticks log10 scale. Michael W. Kearney. Contributor.            Creator 'tfse' package QurvE adopted match_arg function. Santiago . Hurtado. Contributor.            Creator 'RobustLinearReg' package QurvE adopted Theil Sehn Regression method. Mark Heckmann. Contributor.            Creator 'zipFastener' function; source: https://ryouready.wordpress.com/2009/03/27/r-zip-fastener--two-data-frames-combining-rows--columns--two-dataframes---alternating-manner/ Nicholas Hamilton. Contributor.            Creator 'colFmt' function. Evan Friedland. Contributor.            Creator 'inflect' function. Heather Turner. Contributor.            Creator 'base_breaks' function. Georgi N. Boshnakov. Contributor.            Creator 'gbRd' package functions used display function help pages within shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wirth N, Funk J (2023). QurvE: Robust User-Friendly Analysis Growth Fluorescence Curves. https://github.com/NicWir/QurvE, https://nicwir.github.io/QurvE/.","code":"@Manual{,   title = {QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves},   author = {Nicolas T. Wirth and Jonathan Funk},   year = {2023},   note = {https://github.com/NicWir/QurvE, https://nicwir.github.io/QurvE/}, }"},{"path":"https://nicwir.github.io/QurvE/index.html","id":"web-application","dir":"","previous_headings":"","what":"Web application","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"Visit QurvE online application","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"deployed-application","dir":"","previous_headings":"","what":"Deployed application","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"Download Windows setup User manual QurvE application","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"r-package","dir":"","previous_headings":"","what":"R package","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"R package CRAN User manual growth curve analysis User manual fluorescence curve analysis shiny application can launched within R via QurvE::run_app().","code":""},{"path":"https://nicwir.github.io/QurvE/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Robust and User-Friendly Analysis of Growth and Fluorescence Curves","text":"QurvE comes form R package can used create custom workflows application-specific downstream analyses published Comprehensive R Archive Network (CRAN) GitHub. Alternatively, intuitive graphical user interface (GUI) implemented shiny application non-programmers available. app can installed locally Windows computers.  Figure: QurvE enables robust, high-throughput analysis growth fluorescence data.() functionalities within QurvE accessible via intuitive graphical user interface created shiny, can installed locally Windows PCs. (b) type biological growth data can analyzed. commonly used cultivation devices, growing list data parser functions allows conversion exported experimental data QurvE-compatible format. single computation workflow, three different types algorithms performed every sample dataset: (c) Five parametric models fit data find equation best describes growth curve. (d) Relevant (log-) linear phases extracted sample perform robust linear regression. (e) representation data points cubic smoothing splines allows extraction growth rates time applies curve shape. (f) Relevant parameters (growth rates, biomass yields, rate fluorescence increase, etc.) can used combination concentration data analyze dose-response relationships. done applying either dose-response models smoothing splines. (g) Dedicated plot functions facilitate fit validation, interpretation results, , due availability numerous customization options, generation suitable publication. (h) computed parameters can exported table files inspected interactively within app. () chosen fitting options well numerical graphical results can compiled reports PDF HTML format promote data transparency good scientific practice. spirit, raw data results can exported single data container form .RData file give researchers access data analysis methods used.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/QurvE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","title":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","text":"High-throughput analysis growth curves fluorescence data using three methods: linear regression, growth model fitting, smooth spline fit. Analysis dose-response relationships via smoothing splines dose-response models. Complete data analysis workflows can executed single step via user-friendly wrapper functions. results workflows summarized detailed reports well intuitively navigable 'R' data containers. 'shiny' application provides access features without requiring programming knowledge.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/QurvE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"QurvE: Robust and User-Friendly Analysis of Growth and Fluorescence Curves — QurvE-package","text":"Maintainer: Nicolas T. Wirth mail.nicowirth@gmail.com (ORCID) [copyright holder] Authors: Jonathan Funk funk.jonathan21@gmail.com (Co-developer shiny app.) contributors: Matthias Kahm (Author 'grofit' package, whose general data structure adopted QurvE.) [contributor] Maik Kschischo (Author 'grofit' package, whose general data structure adopted QurvE.) [contributor] Thomas Petzoldt thomas.petzoldt@tu-dresden.de (ORCID) (Creator package 'growthrates', whose function calculating linear regressions served template QurvE.) [contributor] Andrew Stein andy.stein@gmail.com (Creator 'xgxr' package QurvE adopted code plot axis ticks log10 scale.) [contributor] Michael W. Kearney kearneymw@missouri.edu (Creator 'tfse' package QurvE adopted match_arg function.) [contributor] Santiago . Hurtado santih@carina.fcaglp.unlp.edu.ar (Creator 'RobustLinearReg' package QurvE adopted Theil Sehn Regression method.) [contributor] Mark Heckmann (Creator 'zipFastener' function; source: https://ryouready.wordpress.com/2009/03/27/r-zip-fastener--two-data-frames-combining-rows--columns--two-dataframes---alternating-manner/) [contributor] Nicholas Hamilton (Creator 'colFmt' function.) [contributor] Evan Friedland (Creator 'inflect' function.) [contributor] Heather Turner (Creator 'base_breaks' function.) [contributor] Georgi N. Boshnakov georgi.boshnakov@manchester.ac.uk (Creator 'gbRd' package functions used display function help pages within shiny app.) [contributor]","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"Calculates values biosensor response model given time points response parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"","code":"biosensor.eq(x, y.min, y.max, K, n)"},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"x vector concentration values y.min minimum fluorescence value y.max maximum fluorescence value K Sensitivity parameter n Cooperativity parameter","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"vector fluorescence values","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/biosensor.eq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function used to fit a biosensor response model with nlsLM — biosensor.eq","text":"","code":"n <- seq(1:10) conc <- rev(10*(1/2)^n) fit <- biosensor.eq(conc, 300, 82000, 0.85, 2)"},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":null,"dir":"Reference","previous_headings":"","what":"Export an R object as .RData file — export_RData","title":"Export an R object as .RData file — export_RData","text":"Export R object .RData file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export an R object as .RData file — export_RData","text":"","code":"export_RData(object, out.dir = tempdir(), out.nm = class(object))"},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export an R object as .RData file — export_RData","text":"object R object. .dir path output directory. Default: working directory .nm output filename (without '.RData' ending). Default: class object followed '.RData'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export an R object as .RData file — export_RData","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_RData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export an R object as .RData file — export_RData","text":"","code":"if(interactive()){ df <- data.frame('A' = seq(1:10), 'B' = rev(seq(1:10)))  export_RData(df) }"},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a tabular object as tab-separated .txt file — export_Table","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"Export tabular object tab-separated .txt file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"","code":"export_Table(table, out.dir = tempdir(), out.nm = deparse(substitute(table)))"},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"table tabular R object (dataframe, matrix, array) .dir path output directory. Default: working directory .nm output filename (without '.txt' ending). Default: name table followed '.txt'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/export_Table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a tabular object as tab-separated .txt file — export_Table","text":"","code":"if(interactive()){ df <- data.frame('A' = seq(1:10), 'B' = rev(seq(1:10)))  export_Table(df) }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a fl.control object. — fl.control","title":"Create a fl.control object. — fl.control","text":"fl.control object required perform various computations fluorescence data stored within grodata objects (created read_data parse_data). fl.control object created automatically part fl.workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a fl.control object. — fl.control","text":"","code":"fl.control(   fit.opt = c(\"l\", \"s\"),   x_type = c(\"growth\", \"time\"),   norm_fl = TRUE,   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.lin = FALSE,   log.x.spline = FALSE,   log.y.lin = FALSE,   log.y.spline = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.05,   lin.dY = 0.05,   dr.parameter = \"max_slope.spline\",   dr.method = c(\"model\", \"spline\"),   dr.have.atleast = 5,   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   biphasic = FALSE,   interactive = FALSE,   nboot.fl = 0,   smooth.fl = 0.75,   growth.thresh = 1.5,   suppress.messages = FALSE,   neg.nan.act = FALSE,   clean.bootstrap = TRUE )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a fl.control object. — fl.control","text":"fit.opt (Character vector strings) Indicates whether program perform linear regression ('l') /spline fit ('s'). Default:  fit.opt = c('l', 's'). x_type (Character) data type shall used independent variable? Options 'growth' 'time'. norm_fl (Logical) use normalized (growth) fluorescence data fits. effect x_type = 'time' t0 (Numeric) Minimum time value considered linear spline fits (x_type = 'time'). tmax (Numeric) Maximum time value considered linear spline fits (x_type = 'time').. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits (x_type = 'growth'). max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits (x_type = 'growth'). log.x.lin (Logical) Indicates whether ln(x+1) applied independent variable linear fits. Default: FALSE. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied fluorescence data linear fits. Default: FALSE log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE lin.h (Numeric) Manually define size sliding window used flFitLinear. NULL, h calculated samples based number measurements fluorescence increase phase plot. lin.R2 (Numeric) R2 threshold flFitLinear. lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope flFitLinear. lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: 'max_slope.spline', represents maximum slope spline fit Typical options include: 'max_slope.linfit', 'dY.linfit', 'max_slope.spline', 'dY.spline'. dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data ('spline') fit biosensor response model 'model' (proposed Meyer et al., 2019). dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? interactive (Logical) Controls whether fit sample method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.fl (Numeric) Number bootstrap samples used nonparametric curve fitting flBootSpline. Use nboot.fl = 0 disable bootstrap. Default: 0 smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. suppress.messages (Logical) Indicates whether messages (information current fluorescence curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. neg.nan.act (Logical) Indicates whether program stop negative fluorescence values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a fl.control object. — fl.control","text":"Generates list arguments described entries.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a fl.control object. — fl.control","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a fl.control object. — fl.control","text":"","code":"# default option control_default <- fl.control() # user defined control_manual <- fl.control(fit.opt = c('s'),                              smooth.fl = 0.6,                              x_type = 'time',                              t0 = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"Fit biosensor model (Meyer et al., 2019) response vs. concentration data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"","code":"fl.drFit(   flTable,   control = fl.control(dr.method = \"model\", dr.parameter = \"max_slope.spline\") )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"flTable dataframe containing data dose-response model estimation. table class flTable can obtained running flFit dr.method = 'model' argument fl.control object. control fl.control object created fl.control, defining relevant fitting options. dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data ('spline') fit biosensor response model 'model' (proposed Meyer et al., 2019). dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: 'max_slope.spline', represents maximum slope spline fit Typical options include: 'max_slope.linfit', 'dY.linfit', 'max_slope.spline', 'dY.spline'.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"object class drFit. raw.data Data passed function flTable. drTable Dataframe containing condition identifiers, fit options, results dose-response analysis. drFittedModels List drFitModel objects generated call fl.drFitModel distinct experiment. control Object class fl.control created call fl.control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a biosensor model (Meyer et al., 2019) to response vs. concentration data — fl.drFit","text":"","code":"# \\donttest{ # Load example dataset input <- read_data(data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run fluorescence curve analysis workflow fitres <- flFit(fl_data = input$fluorescence,                 time = input$time,                 parallelize = FALSE,                 control = fl.control(x_type = 'time', norm_fl = FALSE,                                      suppress.messages = TRUE))  # Perform dose-response analysis drFit <- fl.drFit(flTable = fitres$flTable,                   control = fl.control(dr.method = 'model',                                        dr.parameter = 'max_slope.linfit')) #>  #> === Dose-Response Estimation via Model Fit ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 3  #> --> Valid datasets per test:  #>       TestID         Number #>       pSEVA634rκ∙GFP 7      #>       pSEVA634r∙GFP  7      #>       pSEVA634∙GFP   7      #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> pSEVA634rκ∙GFP #> sensitivity: 0.0103 | yEC50: 105 | fold change: 4.72 | leakiness: 36.7 #>  #>  #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> pSEVA634r∙GFP #> sensitivity: 0.0531 | yEC50: 75 | fold change: Inf | leakiness: 0 #>  #>  #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> pSEVA634∙GFP #> sensitivity: 0.0463 | yEC50: 190 | fold change: 11.62 | leakiness: 30.2 #>  #>   # Inspect results summary(drFit) #>             Test log.x log.y     yEC50    y.min    y.max        fc          K #> 1 pSEVA634rκ∙GFP FALSE FALSE 104.83198 36.65873 173.0052  4.719346 0.01034672 #> 2  pSEVA634r∙GFP FALSE FALSE  75.10917  0.00000 150.2183       Inf 0.05312423 #> 3   pSEVA634∙GFP FALSE FALSE 190.27540 30.16190 350.3889 11.616935 0.04626965 #>           n yEC50.orig     K.orig             test #> 1 12.072904  104.83198 0.01034672 max_slope.linfit #> 2  3.383541   75.10917 0.05312423 max_slope.linfit #> 3  1.684636  190.27540 0.04626965 max_slope.linfit plot(drFit)    # }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"fl.drFitModel fits biosensor model proposed Meyer et al. (2019) provided response (e.g., max_slope.spline vs. concentration data determine leakiness, sensitivity, induction fold-change, cooperativity.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"","code":"fl.drFitModel(conc, test, drID = \"undefined\", control = fl.control())"},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"drFitFLModel object. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition fit.conc Fitted concentration values. fit.test Fitted response values. model nls object generated nlsLM function. parameters List parameters estimated dose response curve fit. yEC50: Response value related EC50. y.min: Minimum fluorescence ('leakiness', lowest concentration 0). y.max: Maximum fluorescence. fc: Fold change (y.max divided y.min). K: Concentration half-maximal response ('sensitivity'). n: Cooperativity. yEC50.orig: Response value EC50 original scale, transformation applied. K.orig: K original scale, transformation applied. test.nm: Test identifier extracted test. fitFlag (Logical) Indicates whether spline fitted successfully data. reliable (Logical) Indicates whether performed fit reliable (set manually). control Object class fl.control created call fl.control. Use plot.drFitModel visualize model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"Meyer, .J., Segall-Shapiro, T.H., Glassey, E. et al. Escherichia coli “Marionette” strains 12 highly optimized small-molecule sensors. Nat Chem Biol 15, 196–204 (2019). DOI: 10.1038/s41589-018-0168-3","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a biosensor model fit on response vs. concentration data of a single sample. — fl.drFitModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = 'test', control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.496 | yEC50: 3044 | fold change: 52.86 | leakiness: 113 #>  #>   print(summary(TestRun)) #>     yEC50    y.min    y.max       fc         K       n yEC50.orig    K.orig #> 1 3044.12 113.0329 5975.208 52.86255 0.4956057 2.01992    3044.12 0.4956057 #>   test #> 1   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"fl.report requires flFitRes object creates report PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"","code":"fl.report(   flFitRes,   out.dir = tempdir(),   out.nm = NULL,   ec50 = FALSE,   format = c(\"pdf\", \"html\"),   export = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"flFitRes grofit object created fl.workflow. .dir (Character) path name folder report files created.  NULL, folder named combination 'Report.fluorescence_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'FluorescenceReport_' current date time. ec50 (Logical) Display results dose-response analysis (TRUE) (FALSE). format (Character) Define file format report, PDF ('pdf') /HTML ('html'). Default: (c('pdf', 'html')) export (Logical) Shall plots generated report exported individual PDF PNG files TRUE FALSE? parallelize (Logical) Create plots using one available processor cores (TRUE) single core (FALSE). ... arguments passed create report. Currently required: mean.grp: Define groups combine common plots report based sample identifiers. Partial matches sample/group names accepted. Can '', vector strings, list string vectors. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc: Define concentrations combine common plots  report. Can numeric vector, list numeric vectors.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PDF and HTML report with results from a fluorescence analysis workflow — fl.report","text":"","code":"# load example dataset # \\donttest{ input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = 's',                    x_type = 'time', norm_fl = TRUE,                    dr.parameter = 'max_slope.spline',                    suppress.messages = TRUE,                    parallelize = FALSE)  fl.report(res, out.dir = tempdir(), parallelize = FALSE) #> Error in fl.report(res, out.dir = tempdir(), parallelize = FALSE): TinyTex was not found on your system. To render PDF reports, please execute tinytex::install_tinytex(). # }"},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"fl.workflow runs fl.control create fl.control object performs computational fitting operations based user input. Finally, desired, final report created PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"","code":"fl.workflow(   grodata = NULL,   time = NULL,   growth = NULL,   fl_data = NULL,   ec50 = TRUE,   mean.grp = NA,   mean.conc = NA,   fit.opt = c(\"l\", \"s\"),   x_type = c(\"growth\", \"time\"),   norm_fl = TRUE,   t0 = 0,   tmax = NA,   min.growth = 0,   max.growth = NA,   log.x.lin = FALSE,   log.x.spline = FALSE,   log.y.lin = FALSE,   log.y.spline = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.07,   lin.dY = 0.05,   biphasic = FALSE,   interactive = FALSE,   dr.parameter = \"max_slope.spline\",   dr.method = c(\"model\", \"spline\"),   dr.have.atleast = 5,   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   nboot.fl = 0,   smooth.fl = 0.75,   growth.thresh = 1.5,   suppress.messages = FALSE,   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   report = NULL,   out.dir = NULL,   out.nm = NULL,   export.fig = FALSE,   export.res = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"grodata grodata object created read_data parse_data, containing fluorescence data data independent variable (.e., time growth). time (optional) matrix containing time values sample (fl_data dataframe provided separate argument). growth (optional) dataframe containing growth data (fl_data matrix provided separate argument). fl_data (optional) dataframe containing fluorescence data (time matrix growth dataframe provided separate argument). ec50 (Logical) Perform dose-response analysis (TRUE) (FALSE). mean.grp (\"\", string vector, list string vectors) Define groups combine common plots final report based sample identifiers (report == TRUE). Partial matches sample/group names accepted. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option \"\" produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc (numeric vector, list numeric vectors) Define concentrations combine common plots final report (report == TRUE). fit.opt (Character character vector) Indicates whether program perform linear regression (\"l\"), model fit (\"m\"), spline fit (\"s\"), (\"\"). Combinations can freely chosen providing character vector, e.g. fit.opt = c(\"l\", \"s\") Default:  fit.opt = c(\"l\", \"s\"). x_type (Character) data type shall used independent variable? Options 'growth' 'time'. norm_fl (Logical) use normalized (growth) fluorescence data fits. effect x_type = 'time' t0 (Numeric) Minimum time value considered linear spline fits (x_type = 'time'). tmax (Numeric) Maximum time value considered linear spline fits (x_type = 'time').. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits (x_type = 'growth'). max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits (x_type = 'growth'). log.x.lin (Logical) Indicates whether ln(x+1) applied independent variable linear fits. Default: FALSE. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied fluorescence data linear fits. Default: FALSE log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE lin.h (Numeric) Manually define size sliding window used flFitLinear. NULL, h calculated samples based number measurements fluorescence increase phase plot. lin.R2 (Numeric) R2 threshold flFitLinear. lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope flFitLinear. lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? interactive (Logical) Controls whether fit sample method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See fl.drFit details. Default: \"max_slope.spline\", represents maximum slope spline fit Typical options include: \"max_slope.linfit\", \"dY.linfit\", \"max_slope.spline\", \"dY.spline\". dr.method (Character) Perform either smooth spline fit response parameter vs. concentration data (\"spline\") fit biosensor response model (proposed Meyer et al., 2019). dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. nboot.fl (Numeric) Number bootstrap samples used nonparametric curve fitting flBootSpline. Use nboot.fl = 0 disable bootstrap. Default: 0 smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. suppress.messages (Logical) Indicates whether messages (information current fluorescence curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. neg.nan.act (Logical) Indicates whether program stop negative fluorescence values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. report (Character NULL) Create PDF ('pdf') /HTML ('html') report running computations. Define NULL report created. Default: (c('pdf', 'html')) .dir Character NULL Define name folder result files (tables reports) stored. NULL, folder named combination \"FluorescenceResults_\" current date time. .nm Character NULL Define name report files. NULL, files named combination \"FluorescenceReport_\" current date time. export.fig (Logical) Export figures created report separate PNG PDF files (TRUE) (FALSE). effective report = TRUE. export.res (Logical) Create tab-separated TXT files containing calculated parameters dose-response analysis results well .RData file resulting flFitRes object. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"flFitRes object contains computation results, compatible various plotting functions QurvE package fl.report. time Raw time matrix passed function time (grofit object provided. Else, extracted grofit). data Raw data dataframe passed function grodata. flFit flFit object created call flFit fluorescence data. drFit drFit drFitfl object created call growth.drFit fl.drFit fluorescence data (based dr.method argument control; see fl.control). expdesign Experimental design table inherited grodata created identifier columns (columns 1-3) data. control Object class fl.control created call fl.control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/fl.workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a complete fluorescence curve analysis and dose-reponse analysis workflow. — fl.workflow","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot(res, data.type = \"raw\", legend.ncol = 3, basesize = 15) #> Warning: Derivatives cannot be calculated for 'raw' or 'norm.fl' data. Only the fluorescence values will be shown."},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"flBootSpline: Function to generate a bootstrap — flBootSpline","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"fl.gcBootSpline resamples fluorescence-'x' value pairs dataset replacement performs spline fit bootstrap sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"","code":"flBootSpline(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   control = fl.control() )"},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"time Vector independent variable: time (x_type = 'time' fl.control object. growth Vector independent variable: growth (x_type = 'growth' fl.control object. fl_data Vector dependent variable: fluorescence. ID (Character) name analyzed sample. control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"gcBootSpline object containing distribution fluorescence parameters flFitSpline object bootstrap sample. Use plot.gcBootSpline visualize bootstrapping splines well distribution physiological parameters. raw.x Raw time values provided function time. raw.fl Raw growth data provided function data. ID (Character) Identifies tested sample. boot.x Table time values per column, resulting spline fit bootstrap. boot.fl Table growth values per column, resulting spline fit bootstrap. boot.flSpline List flFitSpline object, created flFitSpline resample bootstrap. lambda Vector estimated lambda (lag time) values bootstrap entry. max_slope Vector estimated max_slope (maximum slope) values bootstrap entry. Vector estimated (maximum fluorescence) values bootstrap entry. integral Vector estimated integral values bootstrap entry. bootFlag (Logical) Indicates success bootstrapping operation. control Object class fl.control containing list options passed function control.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"flBootSpline: Function to generate a bootstrap — flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time',                        nboot.fl = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"flFit performs computational fluorescence fitting operations based user input.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"","code":"flFit(   fl_data,   time = NULL,   growth = NULL,   control = fl.control(),   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"fl_data Either... grodata object created read_data parse_data, list containing 'time' matrix (x_type == \"time\") 'growth' dataframe (x_type == \"growth\") 'fluorescence' dataframes, dataframe containing (normalized) fluorescence values (time matrix growth dataframe provided separate argument). time (optional) matrix containing time values sample. growth (optional) dataframe containing growth values sample sample identifiers first three columns. control fl.control object created fl.control, defining relevant fitting options. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"flFit object contains fluorescence fitting results, compatible various plotting functions QurvE package. raw.x Raw x matrix passed function time (x_type = 'time') growth (x_type = 'growth'). raw.fl Raw growth dataframe passed function data. flTable Table fluorescence parameters related statistics fluorescence curve evaluation performed function. table, also returned generic summary.flFit method applied flFit object, used input fl.drFit. flFittedLinear List flFitLinear objects, generated call flFitLinear. Note: access object list via double brace: flFittedLinear[[#n]]. flFittedSplines List flFitSpline objects, generated call flFitSpline. Note: access object via double brace: flFittedSplines[[#n]]. flBootSplines List flBootSpline objects, generated call flBootSpline. Note: access object via double brace: flFittedSplines[[#n]]. control Object class fl.control containing list options passed function control.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a fluorescence curve analysis on all samples in the provided dataset. — flFit","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = \"s\",              x_type = \"time\", norm_fl = TRUE,              dr.parameter = \"max_slope.spline\",              dr.method = \"model\",              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              control = control,              parallelize = FALSE)  summary(res) #>            TestId AddId concentration reliability_tag log.x.spline log.y.spline #> 1    pSEVA634∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 2   pSEVA634r∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 3  pSEVA634rκ∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 4    pSEVA634∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 5   pSEVA634r∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 6  pSEVA634rκ∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 7    pSEVA634∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 8   pSEVA634r∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 9  pSEVA634rκ∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 10   pSEVA634∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 11  pSEVA634r∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 12 pSEVA634rκ∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 13   pSEVA634∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 14  pSEVA634r∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 15 pSEVA634rκ∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 16   pSEVA634∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 17  pSEVA634r∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 18 pSEVA634rκ∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 19   pSEVA634∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 20  pSEVA634r∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 21 pSEVA634rκ∙GFP  <NA>             1            TRUE        FALSE        FALSE #>    log.x.lin log.y.lin nboot.fl max_slope.linfit lambda.linfit dY.linfit #> 1      FALSE     FALSE        0                0          <NA>      <NA> #> 2      FALSE     FALSE        0                0          <NA>      <NA> #> 3      FALSE     FALSE        0                0          <NA>      <NA> #> 4      FALSE     FALSE        0                0          <NA>      <NA> #> 5      FALSE     FALSE        0                0          <NA>      <NA> #> 6      FALSE     FALSE        0                0          <NA>      <NA> #> 7      FALSE     FALSE        0                0          <NA>      <NA> #> 8      FALSE     FALSE        0                0          <NA>      <NA> #> 9      FALSE     FALSE        0                0          <NA>      <NA> #> 10     FALSE     FALSE        0                0          <NA>      <NA> #> 11     FALSE     FALSE        0                0          <NA>      <NA> #> 12     FALSE     FALSE        0                0          <NA>      <NA> #> 13     FALSE     FALSE        0                0          <NA>      <NA> #> 14     FALSE     FALSE        0                0          <NA>      <NA> #> 15     FALSE     FALSE        0                0          <NA>      <NA> #> 16     FALSE     FALSE        0                0          <NA>      <NA> #> 17     FALSE     FALSE        0                0          <NA>      <NA> #> 18     FALSE     FALSE        0                0          <NA>      <NA> #> 19     FALSE     FALSE        0                0          <NA>      <NA> #> 20     FALSE     FALSE        0                0          <NA>      <NA> #> 21     FALSE     FALSE        0                0          <NA>      <NA> #>    A.linfit x.mu.start.linfit x.mu.end.linfit r2mu.linfit reliable_fit.linfit #> 1      <NA>              <NA>            <NA>        <NA>               FALSE #> 2      <NA>              <NA>            <NA>        <NA>               FALSE #> 3      <NA>              <NA>            <NA>        <NA>               FALSE #> 4      <NA>              <NA>            <NA>        <NA>               FALSE #> 5      <NA>              <NA>            <NA>        <NA>               FALSE #> 6      <NA>              <NA>            <NA>        <NA>               FALSE #> 7      <NA>              <NA>            <NA>        <NA>               FALSE #> 8      <NA>              <NA>            <NA>        <NA>               FALSE #> 9      <NA>              <NA>            <NA>        <NA>               FALSE #> 10     <NA>              <NA>            <NA>        <NA>               FALSE #> 11     <NA>              <NA>            <NA>        <NA>               FALSE #> 12     <NA>              <NA>            <NA>        <NA>               FALSE #> 13     <NA>              <NA>            <NA>        <NA>               FALSE #> 14     <NA>              <NA>            <NA>        <NA>               FALSE #> 15     <NA>              <NA>            <NA>        <NA>               FALSE #> 16     <NA>              <NA>            <NA>        <NA>               FALSE #> 17     <NA>              <NA>            <NA>        <NA>               FALSE #> 18     <NA>              <NA>            <NA>        <NA>               FALSE #> 19     <NA>              <NA>            <NA>        <NA>               FALSE #> 20     <NA>              <NA>            <NA>        <NA>               FALSE #> 21     <NA>              <NA>            <NA>        <NA>               FALSE #>    max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1               <NA>               <NA>             <NA>         <NA> #> 2               <NA>               <NA>             <NA>         <NA> #> 3               <NA>               <NA>             <NA>         <NA> #> 4               <NA>               <NA>             <NA>         <NA> #> 5               <NA>               <NA>             <NA>         <NA> #> 6               <NA>               <NA>             <NA>         <NA> #> 7               <NA>               <NA>             <NA>         <NA> #> 8               <NA>               <NA>             <NA>         <NA> #> 9               <NA>               <NA>             <NA>         <NA> #> 10              <NA>               <NA>             <NA>         <NA> #> 11              <NA>               <NA>             <NA>         <NA> #> 12              <NA>               <NA>             <NA>         <NA> #> 13              <NA>               <NA>             <NA>         <NA> #> 14              <NA>               <NA>             <NA>         <NA> #> 15              <NA>               <NA>             <NA>         <NA> #> 16              <NA>               <NA>             <NA>         <NA> #> 17              <NA>               <NA>             <NA>         <NA> #> 18              <NA>               <NA>             <NA>         <NA> #> 19              <NA>               <NA>             <NA>         <NA> #> 20              <NA>               <NA>             <NA>         <NA> #> 21              <NA>               <NA>             <NA>         <NA> #>    reliable_fit2.linfit max_slope.spline x.max.spline     lambda.spline #> 1                 FALSE 92.2668917228958         20.5  15.5467166096303 #> 2                 FALSE 30.7727385498335           20  31.2872267087632 #> 3                 FALSE 64.1757831646139           16  20.8131240327297 #> 4                 FALSE 242.557704041646         23.5  14.9826287460236 #> 5                 FALSE 64.6529094536623           19  21.6712998092259 #> 6                 FALSE  205.57971913027           18  12.5662904914234 #> 7                 FALSE 509.394721871896         21.5  6.95952698278297 #> 8                 FALSE 204.031623957343         17.5  13.4360564669418 #> 9                 FALSE 290.961299939386           13  4.67379381987587 #> 10                FALSE 670.985334314907            6 0.373248436531114 #> 11                FALSE 327.194544214622           17  9.86802427129628 #> 12                FALSE 335.243584785665         17.5  3.65080407904781 #> 13                FALSE 728.625260083635          6.5  0.55381657857781 #> 14                FALSE  346.26811325449         16.5  9.75821807365777 #> 15                FALSE 320.246598452125         17.5  3.21350390586794 #> 16                FALSE 774.053986420781          5.5 0.246732777852532 #> 17                FALSE 337.909403917518         16.5  8.08916482172027 #> 18                FALSE 351.643501664605           18   4.8448445225091 #> 19                FALSE 779.134078966908            6 0.462268482214881 #> 20                FALSE 353.185039298378         16.5  9.57178508598632 #> 21                FALSE 338.826806405153           18  5.01597033523575 #>    max_slope2.spline x.max2.spline lambda2.spline        y0.spline #> 1               <NA>          <NA>           <NA>  1291.4242870252 #> 2               <NA>          <NA>           <NA> 1188.27831547782 #> 3               <NA>          <NA>           <NA> 1565.59217809736 #> 4               <NA>          <NA>           <NA> 1519.80363776351 #> 5               <NA>          <NA>           <NA>  1255.7213080438 #> 6               <NA>          <NA>           <NA> 1624.15289883901 #> 7               <NA>          <NA>           <NA> 1132.18524639308 #> 8               <NA>          <NA>           <NA> 1405.71652864703 #> 9               <NA>          <NA>           <NA> 1468.52438340082 #> 10              <NA>          <NA>           <NA> 1209.47395589044 #> 11              <NA>          <NA>           <NA> 1187.83879461913 #> 12              <NA>          <NA>           <NA> 1467.93981010311 #> 13              <NA>          <NA>           <NA> 891.795404947046 #> 14              <NA>          <NA>           <NA> 1282.77700477438 #> 15              <NA>          <NA>           <NA> 1542.64869773804 #> 16              <NA>          <NA>           <NA> 1132.44043950228 #> 17              <NA>          <NA>           <NA> 862.662992687728 #> 18              <NA>          <NA>           <NA> 1602.42470098365 #> 19              <NA>          <NA>           <NA> 1017.04362101536 #> 20              <NA>          <NA>           <NA>  1323.6959493112 #> 21              <NA>          <NA>           <NA> 1707.52183129309 #>            A.spline        dY.spline  integral.spline reliable_fit.spline #> 1  3427.12552423136 2135.70123720616 82881.4064741573                TRUE #> 2  1470.99207749984 282.713762022016 43222.9360971387                TRUE #> 3  2196.18856426073 630.596386163375 67033.6678589487                TRUE #> 4   7592.8006375136 6072.99699975009 151370.675832013                TRUE #> 5  2384.30375521353 1128.58244716973 58249.0814015739                TRUE #> 6  4820.28715109277 3196.13425225376 132414.081549266                TRUE #> 7  17121.2144379567 15989.0291915636 367233.851934484                TRUE #> 8  5206.54317686809 3800.82664822106 120525.231431367                TRUE #> 9   7768.1886699261 6299.66428652528 223919.428584981                TRUE #> 10  20079.009500852 18869.5355449615 490254.828661571                TRUE #> 11 6840.37784263307 5652.53904801394 169914.301957325                TRUE #> 12 9191.86346478597 7723.92365468286 269744.222628615                TRUE #> 13 20481.0977680944 19589.3023631473 497122.375105376                TRUE #> 14 7000.84532046274 5718.06831568836 179100.135589319                TRUE #> 15 9006.21056404742 7463.56186630938 267724.576457374                TRUE #> 16 20704.0909872883  19571.650547786 520199.730690859                TRUE #> 17 6952.68659445913  6090.0236017714 178120.140852738                TRUE #> 18 9322.62835009371 7720.20364911006 273698.194402021                TRUE #> 19 19774.7021395644  18757.658518549 508722.732093214                TRUE #> 20 7189.59680355257 5865.90085424137 182547.707805717                TRUE #> 21 9258.53106887535 7551.00923758226 271383.083788706                TRUE #>    reliable_fit2.spline smooth.spline max_slope.bt lambda.bt A.bt dY.bt #> 1                 FALSE          0.75           NA        NA   NA    NA #> 2                 FALSE          0.75           NA        NA   NA    NA #> 3                 FALSE          0.75           NA        NA   NA    NA #> 4                 FALSE          0.75           NA        NA   NA    NA #> 5                 FALSE          0.75           NA        NA   NA    NA #> 6                 FALSE          0.75           NA        NA   NA    NA #> 7                 FALSE          0.75           NA        NA   NA    NA #> 8                 FALSE          0.75           NA        NA   NA    NA #> 9                 FALSE          0.75           NA        NA   NA    NA #> 10                FALSE          0.75           NA        NA   NA    NA #> 11                FALSE          0.75           NA        NA   NA    NA #> 12                FALSE          0.75           NA        NA   NA    NA #> 13                FALSE          0.75           NA        NA   NA    NA #> 14                FALSE          0.75           NA        NA   NA    NA #> 15                FALSE          0.75           NA        NA   NA    NA #> 16                FALSE          0.75           NA        NA   NA    NA #> 17                FALSE          0.75           NA        NA   NA    NA #> 18                FALSE          0.75           NA        NA   NA    NA #> 19                FALSE          0.75           NA        NA   NA    NA #> 20                FALSE          0.75           NA        NA   NA    NA #> 21                FALSE          0.75           NA        NA   NA    NA #>    integral.bt stdmax_slope.bt stdlambda.bt stdA.bt stddY.bt stdintegral.bt #> 1           NA              NA           NA      NA       NA             NA #> 2           NA              NA           NA      NA       NA             NA #> 3           NA              NA           NA      NA       NA             NA #> 4           NA              NA           NA      NA       NA             NA #> 5           NA              NA           NA      NA       NA             NA #> 6           NA              NA           NA      NA       NA             NA #> 7           NA              NA           NA      NA       NA             NA #> 8           NA              NA           NA      NA       NA             NA #> 9           NA              NA           NA      NA       NA             NA #> 10          NA              NA           NA      NA       NA             NA #> 11          NA              NA           NA      NA       NA             NA #> 12          NA              NA           NA      NA       NA             NA #> 13          NA              NA           NA      NA       NA             NA #> 14          NA              NA           NA      NA       NA             NA #> 15          NA              NA           NA      NA       NA             NA #> 16          NA              NA           NA      NA       NA             NA #> 17          NA              NA           NA      NA       NA             NA #> 18          NA              NA           NA      NA       NA             NA #> 19          NA              NA           NA      NA       NA             NA #> 20          NA              NA           NA      NA       NA             NA #> 21          NA              NA           NA      NA       NA             NA #>    reliable_fit.bt ci90.mu.bt.lo ci90.mu.bt.up ci90.lambda.bt.lo #> 1               NA            NA            NA                NA #> 2               NA            NA            NA                NA #> 3               NA            NA            NA                NA #> 4               NA            NA            NA                NA #> 5               NA            NA            NA                NA #> 6               NA            NA            NA                NA #> 7               NA            NA            NA                NA #> 8               NA            NA            NA                NA #> 9               NA            NA            NA                NA #> 10              NA            NA            NA                NA #> 11              NA            NA            NA                NA #> 12              NA            NA            NA                NA #> 13              NA            NA            NA                NA #> 14              NA            NA            NA                NA #> 15              NA            NA            NA                NA #> 16              NA            NA            NA                NA #> 17              NA            NA            NA                NA #> 18              NA            NA            NA                NA #> 19              NA            NA            NA                NA #> 20              NA            NA            NA                NA #> 21              NA            NA            NA                NA #>    ci90.lambda.bt.up ci90.A.bt.lo ci90.A.bt.up ci90.integral.bt.lo #> 1                 NA           NA           NA                  NA #> 2                 NA           NA           NA                  NA #> 3                 NA           NA           NA                  NA #> 4                 NA           NA           NA                  NA #> 5                 NA           NA           NA                  NA #> 6                 NA           NA           NA                  NA #> 7                 NA           NA           NA                  NA #> 8                 NA           NA           NA                  NA #> 9                 NA           NA           NA                  NA #> 10                NA           NA           NA                  NA #> 11                NA           NA           NA                  NA #> 12                NA           NA           NA                  NA #> 13                NA           NA           NA                  NA #> 14                NA           NA           NA                  NA #> 15                NA           NA           NA                  NA #> 16                NA           NA           NA                  NA #> 17                NA           NA           NA                  NA #> 18                NA           NA           NA                  NA #> 19                NA           NA           NA                  NA #> 20                NA           NA           NA                  NA #> 21                NA           NA           NA                  NA #>    ci90.integral.bt.up ci95.mu.bt.lo ci95.mu.bt.up ci95.lambda.bt.lo #> 1                   NA            NA            NA                NA #> 2                   NA            NA            NA                NA #> 3                   NA            NA            NA                NA #> 4                   NA            NA            NA                NA #> 5                   NA            NA            NA                NA #> 6                   NA            NA            NA                NA #> 7                   NA            NA            NA                NA #> 8                   NA            NA            NA                NA #> 9                   NA            NA            NA                NA #> 10                  NA            NA            NA                NA #> 11                  NA            NA            NA                NA #> 12                  NA            NA            NA                NA #> 13                  NA            NA            NA                NA #> 14                  NA            NA            NA                NA #> 15                  NA            NA            NA                NA #> 16                  NA            NA            NA                NA #> 17                  NA            NA            NA                NA #> 18                  NA            NA            NA                NA #> 19                  NA            NA            NA                NA #> 20                  NA            NA            NA                NA #> 21                  NA            NA            NA                NA #>    ci95.lambda.bt.up ci95.A.bt.lo ci95.A.bt.up ci95.integral.bt.lo #> 1                 NA           NA           NA                  NA #> 2                 NA           NA           NA                  NA #> 3                 NA           NA           NA                  NA #> 4                 NA           NA           NA                  NA #> 5                 NA           NA           NA                  NA #> 6                 NA           NA           NA                  NA #> 7                 NA           NA           NA                  NA #> 8                 NA           NA           NA                  NA #> 9                 NA           NA           NA                  NA #> 10                NA           NA           NA                  NA #> 11                NA           NA           NA                  NA #> 12                NA           NA           NA                  NA #> 13                NA           NA           NA                  NA #> 14                NA           NA           NA                  NA #> 15                NA           NA           NA                  NA #> 16                NA           NA           NA                  NA #> 17                NA           NA           NA                  NA #> 18                NA           NA           NA                  NA #> 19                NA           NA           NA                  NA #> 20                NA           NA           NA                  NA #> 21                NA           NA           NA                  NA #>    ci95.integral.bt.up #> 1                   NA #> 2                   NA #> 3                   NA #> 4                   NA #> 5                   NA #> 6                   NA #> 7                   NA #> 8                   NA #> 9                   NA #> 10                  NA #> 11                  NA #> 12                  NA #> 13                  NA #> 14                  NA #> 15                  NA #> 16                  NA #> 17                  NA #> 18                  NA #> 19                  NA #> 20                  NA #> 21                  NA"},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Data fit via a heuristic linear method — flFitLinear","title":"Data fit via a heuristic linear method — flFitLinear","text":"Determine maximum slopes using heuristic approach similar ``growth rates made easy''-method Hall et al. (2013).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data fit via a heuristic linear method — flFitLinear","text":"","code":"flFitLinear(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   quota = 0.95,   control = fl.control(x_type = c(\"growth\", \"time\"), log.x.lin = FALSE, log.y.lin =     FALSE, t0 = 0, min.growth = NA, lin.h = NULL, lin.R2 = 0.98, lin.RSD = 0.05, lin.dY =     0.05, biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data fit via a heuristic linear method — flFitLinear","text":"time Vector independent time variable (x_type = \"time\" control object). growth Vector independent time growth (x_type = \"growth\" control object). fl_data Vector dependent fluorescence variable. ID (Character) name analyzed sample. quota (Numeric, 0 1) Define fraction max_slope slope regression windows adjacent window highest slope included overall linear fit. control fl.control object created fl.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data fit via a heuristic linear method — flFitLinear","text":"gcFitLinear object parameters fit. lag time estimated intersection fit horizontal line \\(y=y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize linear fit. raw.x Filtered x values used spline fit. raw.fl Filtered fluorescence values used spline fit. filt.x Filtered x values. filt.fl Filtered fluorescence values. ID (Character) Identifies tested sample. FUN Linear function used plotting tangent mumax. fit lm object; result final call lm perform linear regression. par List determined fluorescence parameters. y0: Minimum fluorescence value considered heuristic linear method. dY: Difference maximum fluorescence minimum fluorescence : Maximum fluorescence y0_lm: Intersection linear fit abscissa. max_slope: Maximum slope linear fit. tD: Doubling time. slope.se: Standard error maximum slope. lag: Lag X. x.max_start: X value first data point within window used linear regression. x.max_end: X value last data point within window used linear regression. x.turn: biphasic: X inflection point separates two phases. max.slope2: biphasic: Slope second phase. tD2: Doubling time second phase. y0_lm2: biphasic: Intersection linear fit second phase abscissa. lag2: biphasic: Lag time determined second phase.. x.max2_start: biphasic: X value first data point within window used linear regression second phase. x.max2_end: biphasic: X value last data point within window used linear regression second phase. ndx Index data points used linear regression. ndx2 Index data points used linear regression second phase. control Object class grofit.control containing list options passed function control. rsquared R2 linear regression. rsquared2 R2 linear regression second phase. fitFlag (Logical) Indicates whether linear regression successfully performed data. fitFlag2 (Logical) Indicates whether second phase identified. reliable (Logical) Indicates whether performed fit reliable (set manually).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data fit via a heuristic linear method — flFitLinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, DOI: 10.1093/molbev/mst187 Petzoldt T (2022). growthrates: Estimate Growth Rates Experimental Data. R package version 0.8.3, https://CRAN.R-project.org/package=growthrates.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data fit via a heuristic linear method — flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"l\", x_type = \"time\",                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on fluorescence data — flFitSpline","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"flFitSpline performs smooth spline fit dataset determines greatest slope global maximum first derivative spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"","code":"flFitSpline(   time = NULL,   growth = NULL,   fl_data,   ID = \"undefined\",   control = fl.control(biphasic = FALSE, x_type = c(\"growth\", \"time\"), log.x.spline =     FALSE, log.y.spline = FALSE, smooth.fl = 0.75, t0 = 0, min.growth = NA) )"},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"time Vector independent variable: time (x_type = 'time' fl.control object. growth Vector independent variable: growth (x_type = 'growth' fl.control object. fl_data Vector dependent variable: fluorescence. ID (Character) name analyzed sample. control fl.control object created fl.control, defining relevant fitting options. biphasic (Logical) Shall flFitLinear flFitSpline try extract fluorescence parameters two different phases (observed , e.g., regulator-promoter systems varying response different growth stages) (TRUE) (FALSE)? x_type (Character) data type shall used independent variable? Options 'growth' 'time'. log.x.spline (Logical) Indicates whether ln(x+1) applied independent variable spline fits. Default: FALSE. log.y.spline (Logical) Indicates whether ln(y/y0) applied fluorescence data spline fits. Default: FALSE smooth.fl (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating slopes) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 t0 (Numeric) Minimum time value considered linear spline fits. min.growth (Numeric) Indicate whether values certain threshold considered linear regressions spline fits.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"flFitSpline object. lag time estimated intersection tangent maximum slope horizontal line \\(y = y_0\\), y0 first value dependent variable. Use plot.flFitSpline visualize spline fit derivative time. x.Raw x values provided function time growth. fl.Raw fluorescence data provided function fl_data. raw.x Filtered x values used spline fit. raw.fl Filtered fluorescence values used spline fit. ID (Character) Identifies tested sample. fit.x Fitted x values. fit.fl Fitted fluorescence values. parameters List determined parameters. : Maximum fluorescence. dY: Difference maximum fluorescence minimum fluorescence. max_slope: Maximum slope fluorescence-vs.-x data (.e., maximum first derivative spline). x.max: Time maximum slope. lambda: Lag time. b.tangent: Intersection tangent maximum slope abscissa. max_slope2: biphasic course fluorescence: Maximum slope fluorescence-vs.-x data second phase. lambda2: biphasic course fluorescence: Lag time determined second phase. x.max2: biphasic course fluorescence: Time maximum slope second phase. b.tangent2: biphasic course fluorescence: Intersection tangent maximum slope second phase abscissa. integral: Area curve spline fit. spline smooth.spline object generated smooth.spline function. spline.deriv1 list time ('x') growth ('y') values describing first derivative spline fit. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether spline fit successfully performed data. fitFlag2 (Logical) Indicates whether second phase identified. control Object class fl.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"biphasic = TRUE, following steps performed define second phase: Determine local minima within first derivative smooth spline fit. Remove 'peak' containing highest value first derivative (.e., \\(mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(mu_{max}\\). Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on fluorescence data — flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time'))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grofit.control object. — growth.control","title":"Create a grofit.control object. — growth.control","text":"grofit.control object required perform various computations growth data stored within grodata objects (created read_data parse_data). grofit.control object created automatically part growth.workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grofit.control object. — growth.control","text":"","code":"growth.control(   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   suppress.messages = FALSE,   fit.opt = c(\"a\"),   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.gc = FALSE,   log.y.lin = TRUE,   log.y.spline = TRUE,   log.y.model = TRUE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.1,   lin.dY = 0.05,   biphasic = FALSE,   interactive = FALSE,   nboot.gc = 0,   smooth.gc = 0.55,   model.type = c(\"logistic\", \"richards\", \"gompertz\", \"gompertz.exp\", \"huang\", \"baranyi\"),   dr.method = c(\"model\", \"spline\"),   dr.model = c(\"gammadr\", \"multi2\", \"LL.2\", \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\",     \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\", \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\",     \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),   dr.have.atleast = 6,   dr.parameter = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu.spline\",     \"lambda.spline\", \"dY.spline\", \"A.spline\", \"mu.model\", \"lambda.model\",     \"dY.orig.model\", \"A.orig.model\"),   smooth.dr = NULL,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   growth.thresh = 1.5 )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grofit.control object. — growth.control","text":"neg.nan.act (Logical) Indicates whether program stop negative growth values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. suppress.messages (Logical) Indicates whether messages (information current growth curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed processing high throughput data. Note: warnings still displayed. Default: FALSE. fit.opt (Character character vector) Indicates whether program perform linear regression ('l'), model fit ('m'), spline fit ('s'), (''). Combinations can freely chosen providing character vector, e.g. fit.opt = c('l', 's') Default:  fit.opt = c('l', 's'). t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Maximum time value considered linear spline fits. min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE log.y.spline (Logical) Indicates whether ln(y/y0) applied growth data spline fits. Default: TRUE log.y.model (Logical) Indicates whether ln(y/y0) applied growth data model fits. Default: TRUE lin.h (Numeric) Manually define size sliding window used growth.gcFitLinear NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). biphasic (Logical) Shall growth.gcFitLinear growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)? interactive (Logical) Controls whether fit growth curve method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.gc (Numeric) Number bootstrap samples used nonparametric growth curve fitting growth.gcBootSpline. Use nboot.gc = 0 disable bootstrap. Default: 0 smooth.gc (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating growth rates) produce error smooth.spline lead overfitting. usage fixed value recommended reproducible results across samples. See smooth.spline details. Default: 0.55 model.type (Character) Vector providing names parametric models fitted data. Default: c('logistic', 'richards', 'gompertz', 'gompertz.exp', 'huang', 'baranyi'). dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grofit.control object. — growth.control","text":"Generates list arguments described entries.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a grofit.control object. — growth.control","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a grofit.control object. — growth.control","text":"","code":"# default option control_default <- growth.control() # user defined control_manual <- growth.control(fit.opt = c('s', 'm'),                                  smooth.gc = 0.5,                                  model.type = c('huang', 'baranyi'))"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"growth.drBootSpline resamples values dataset replacement performs spline fit bootstrap sample determine EC50.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"","code":"growth.drBootSpline(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"object class drBootSpline containing distribution growth parameters drFitSpline object bootstrap sample. Use plot.drBootSpline visualize bootstrapping splines well distribution EC50. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition. boot.conc Table concentration values per column, resulting spline fit bootstrap. boot.test Table response values per column, resulting spline fit bootstrap. boot.drSpline List containing drFitSpline objects generated call growth.drFitSpline. ec50.boot Vector estimated EC50 values bootstrap entry. ec50y.boot Vector estimated response EC50 values bootstrap entry. BootFlag (Logical) Indicates success bootstrapping operation. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on response vs. concentration data of a single sample — growth.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = 'test',                control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8,                                         nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.892826829668354 StDev :  0.0930932155501442  #> 90% CI:  0.889764062876754 90% CI:  0.895889596459954 #> 95% CI:  0.889177575618789 95% CI:  0.89647608371792 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.4420230867279  #> 90% CI:  1.43455518157725 90% CI:  1.44951389939273 #> 95% CI:  1.43312776460629 95% CI:  1.45095092944165 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.8928268    0.09309322        0.5375381      0.1004648 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.7396885           1.045965          0.7103641            1.07529 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.442023                1.095283                1.846144 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                1.034732                1.930841 plot(TestRun, combine = TRUE)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"growth.drFit serves determine dose-response curves every condition dataset. response parameter can chosen every physiological parameter gcTable table obtained via growth.gcFit. growth.drFit calls functions growth.drFitSpline growth.drBootSpline, growth.drFitModel generate table estimates EC50 respecting statistics.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"","code":"growth.drFit(   gcTable,   control = growth.control(dr.method = \"model\", dr.model = c(\"gammadr\", \"multi2\", \"LL.2\",     \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\", \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\",     \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\", \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),     dr.have.atleast = 6, dr.parameter = \"mu.linear\", nboot.dr = 0, smooth.dr = NULL,     log.x.dr = FALSE, log.y.dr = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"gcTable dataframe containing data dose-response curve estimation. table class gcTable can obtained running growth.gcFit. control grofit.control object created growth.control, defining relevant fitting options. dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"object class drFit. raw.data Data passed function gcTable. drTable Dataframe containing condition identifiers, fit options, results dose-response analysis. drBootSplines List drBootSpline objects generated call growth.drBootSpline distinct experiment. drFittedSplines List drFitSpline objects generated call growth.drFitSpline distinct experiment. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a dose-response analysis on response vs. concentration data — growth.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,              control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1587163     0.002175903  0.1542841  0.1631484 #> 2 Test2 FALSE FALSE       0     0.1155900     0.001409944  0.1127180  0.1184619 #>       yEC50      test model #> 1 0.3310645 mu.spline  W1.3 #> 2 0.2358859 mu.spline  W1.3 plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"Fit various models response vs. concentration data single sample determine EC50.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"","code":"growth.drFitModel(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"drFitModel object.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit various models to response vs. concentration data of a single sample to determine the EC50. — growth.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = 'test')  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper    yEC50      test #> e:1:50      4.022046      0.09953078   3.812054   4.232038 0.470574 mu.linfit #>        model #> e:1:50  W1.3 plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"growth.drFitSpline performs smooth spline fit determines EC50 concentration half-maximum value response parameter spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"","code":"growth.drFitSpline(conc, test, drID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"conc Vector concentration values. test Vector response parameter values length conc. drID (Character) name analyzed condition control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"drFitSpline object. raw.conc Raw data provided function conc. raw.test Raw data response parameter provided function test. drID (Character) Identifies tested condition fit.conc Fitted concentration values. fit.test Fitted response values. spline smooth.spline object generated smooth.spline function. spline.low x y values lowess spline fit raw data. Used call smooth.spline. parameters List parameters estimated dose response curve fit. EC50: Concentration half-maximal response. yEC50: Response value related EC50. EC50.orig: EC50 value original scale, transformation applied. yEC50.orig: Response value EC50 original scale, transformation applied. fitFlag (Logical) Indicates whether spline fitted successfully data. reliable (Logical) Indicates whether performed fit reliable (set manually). control Object class grofit.control containing list options passed function control. Use plot.drFitSpline visualize spline fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"spline fit smooth.spline, higher weights assigned data points concentration value 0, well x-y pairs response parameter value 0 pairs concentration values zero-response parameter values.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07 Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on response vs. concentration data of a single sample to determine the EC50. — growth.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = 'test',               control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.61779921307918 yEC50 0.482066682038006 #> --> Original scale  #> xEC50 4.04198176974139 yEC50 0.482066682038006 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.617799 0.4820667  4.041982  0.4820667   NA  plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"growth.gcBootSpline resamples growth-time value pairs dataset replacement performs spline fit bootstrap sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"","code":"growth.gcBootSpline(time, data, gcID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"time Vector independent variable (usually: time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"gcBootSpline object containing distribution growth parameters gcFitSpline object bootstrap sample. Use plot.gcBootSpline visualize bootstrapping splines well distribution physiological parameters. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. gcID (Character) Identifies tested sample. boot.time Table time values per column, resulting spline fit bootstrap. boot.data Table growth values per column, resulting spline fit bootstrap. boot.gcSpline List gcFitSpline object, created growth.gcFitSpline resample bootstrap. lambda Vector estimated lambda (lag time) values bootstrap entry. mu Vector estimated mu (maximum growth rate) values bootstrap entry. Vector estimated (maximum growth) values bootstrap entry. integral Vector estimated integral values bootstrap entry. bootFlag (Logical) Indicates success bootstrapping operation. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a bootstrap on growth vs. time data followed by spline fits for each resample — growth.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = 'TestFit',               control = growth.control(fit.opt = 's', nboot.gc = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"growth.gcFit performs computational growth fitting operations based user input.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"","code":"growth.gcFit(time, data, control = growth.control(), parallelize = TRUE, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"time (optional) matrix containing time values sample. data Either... grodata object created read_data parse_data, list containing 'time' matrix well 'growth' , appropriate, 'fluorescence' dataframes, dataframe containing growth values (time matrix provided separate argument). control grofit.control object created growth.control, defining relevant fitting options. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"gcFit object contains growth fitting results, compatible various plotting functions QurvE package. raw.time Raw time matrix passed function time. raw.data Raw growth dataframe passed function data. gcTable Table growth parameters related statistics growth curve evaluation performed function. table, also returned generic summary.gcFit method applied gcFit object, used input growth.drFit. gcFittedLinear List gcFitLinear objects, generated call growth.gcFitLinear. Note: access object list via double brace: gcFittedLinear[[#n]]. gcFittedModels List gcFitModel objects, generated call growth.gcFitModel. Note: access object list via double brace: gcFittedModels[[#n]]. gcFittedSplines List gcFitSpline objects, generated call growth.gcFitSpline. Note: access object via double brace: gcFittedSplines[[#n]]. gcBootSplines List gcBootSpline objects, generated call growth.gcBootSpline. Note: access object via double brace: gcFittedSplines[[#n]]. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a growth curve analysis on all samples in the provided dataset. — growth.gcFit","text":"","code":"# Create random growth data set   rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')   rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')    rnd.data <- list()   rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time)   rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow   res <- growth.gcFit(time = rnd.data$time,                       data = rnd.data$data,                       parallelize = FALSE,                       control = growth.control(suppress.messages = TRUE,                                                fit.opt = 's'))"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"Determine maximum growth rates log-linear part growth curve using heuristic approach similar ``growth rates made easy''-method Hall et al. (2013).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"","code":"growth.gcFitLinear(   time,   data,   gcID = \"undefined\",   quota = 0.95,   control = growth.control(t0 = 0, tmax = NA, log.x.gc = FALSE, log.y.lin = TRUE,     min.growth = NA, max.growth = NA, lin.h = NULL, lin.R2 = 0.97, lin.RSD = 0.1, lin.dY     = 0.05, biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"time Vector independent variable (usually: time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. quota (Numeric, 0 1) Define fraction \\(mu_{max}\\) slope regression windows adjacent window highest slope included overall linear fit. control grofit.control object created growth.control, defining relevant fitting options. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions. t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Minimum time value considered linear spline fits. lin.h (Numeric) Manually define size sliding window . NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Enter minimum percentage growth increase linear regression cover. biphasic (Logical) Shall growth.gcFitLinear try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"gcFitLinear object parameters fit. lag time estimated intersection fit horizontal line \\(y=y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize linear fit. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. filt.time Filtered time values used heuristic linear method. filt.data Filtered growth values. log.data Log-transformed, filtered growth values used heuristic linear method. gcID (Character) Identifies tested sample. FUN Linear function used plotting tangent mumax. fit lm object; result final call lm perform linear regression. par List determined growth parameters. y0: Minimum growth value considered heuristic linear method. dY: Difference maximum growth minimum growth. : Maximum growth. y0_lm: Intersection linear fit abscissa. mumax: Maximum growth rate (.e., slope linear fit). tD: Doubling time. mu.se: Standard error maximum growth rate. lag: Lag time. tmax_start: Time value first data point within window used linear regression. tmax_end: Time value last data point within window used linear regression. t_turn: biphasic growth: Time inflection point separates two growth phases. mumax2: biphasic growth: Growth rate second growth phase. tD2: Doubling time second growth phase. y0_lm2: biphasic growth: Intersection linear fit second growth phase abscissa. lag2: biphasic growth: Lag time determined second growth phase.. tmax2_start: biphasic growth: Time value first data point within window used linear regression second growth phase. tmax2_end: biphasic growth: Time value last data point within window used linear regression second growth phase. ndx Index data points used linear regression. ndx2 Index data points used linear regression second growth phase. control Object class grofit.control containing list options passed function control. rsquared R2 linear regression. rsquared2 R2 linear regression second growth phase. fitFlag (Logical) Indicates whether linear regression successfully performed data. fitFlag2 (Logical) Indicates whether second growth phase identified. reliable (Logical) Indicates whether performed fit reliable (set manually).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"algorithm works follows: Fit linear regressions (Theil-Sen estimator) subsets h consecutive, log-transformed data points (sliding window size h). example \\(h=5\\), fit linear regression points 1 ... 5, 2 ... 6, 3 ... 7 . Find subset highest slope \\(mu_{max}\\). R2 relative standard deviation (RSD) values regression meet lin.R2 lin.RSD defined thresholds data points within regression window account fraction least lin.dY total growth increase? , evaluate subset second highest slope, . Include also data points adjacent subsets slope least \\(quota \\cdot mu{max}\\), e.g., regression windows least 95% maximum slope. Fit new linear model extended data window identified step 3. biphasic = TRUE, following steps performed define second growth phase: Perform smooth spline fit data smoothing factor 0.5. Calculate second derivative spline fit perform smooth spline fit derivative smoothing factor 0.4. Determine local maxima minima second derivative. Find local minimum following \\(mu_{max}\\) repeat heuristic linear method later time values. Find local maximum \\(mu_{max}\\) repeat heuristic linear method earlier time values. Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, DOI: 10.1093/molbev/mst187 Petzoldt T (2022). growthrates: Estimate Growth Rates Experimental Data. R package version 0.8.3, https://CRAN.R-project.org/package=growthrates. Theil, H.(1992). rank-invariant method linear polynomial regression analysis. : Henri Theil’s contributions economics econometrics. Springer, pp. 345–381. DOI: 10.1007/978-94-011-2546-8_20","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an exponential growth model with a heuristic linear method — growth.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"l\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit nonlinear growth models to growth data — growth.gcFitModel","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"growth.gcFitModel determines parametric growth model best describes data.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"","code":"growth.gcFitModel(time, data, gcID = \"undefined\", control = growth.control())"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"time Vector independent variable (usually time). data Vector dependent variable (usually growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"gcFitModel object contains physiological parameters information best fit. Use plot.gcFitModel visualize parametric fit growth equation. raw.time Raw time values provided function time. raw.data Raw growth data provided function data. gcID (Character) Identifies tested sample. fit.time Fitted time values. fit.data Fitted growth values. parameters List determined growth parameters. : Maximum growth. dY: Difference maximum growth minimum growth fitted model. mu: Maximum growth rate (.e., maximum first derivative spline). lambda: Lag time. b.tangent: Intersection tangent maximum growth rate abscissa. fitpar: models: list additional parameters used equations describing growth curve. integral: Area curve parametric fit. model (Character) model obtained fit lowest AIC, determined AIC. nls nls object chosen model generated nls function. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether parametric model successfully fitted data. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit nonlinear growth models to growth data — growth.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'm')) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  plot(TestFit, basesize = 18, eq.size = 1.5) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a smooth spline fit on growth data — growth.gcFitSpline","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"growth.gcFitSpline performs smooth spline fit dataset determines highest growth rate global maximum first derivative spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"","code":"growth.gcFitSpline(   time,   data,   gcID = \"undefined\",   control = growth.control(biphasic = FALSE) )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"time Vector independent variable (usually time). data Vector dependent variable (usually: growth values). gcID (Character) name analyzed sample. control grofit.control object created growth.control, defining relevant fitting options. biphasic (Logical) Shall growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"gcFitSpline object. lag time estimated intersection tangent maximum slope horizontal line \\(y = y_0\\), y0 first value dependent variable. Use plot.gcFitSpline visualize spline fit derivative time. time.Raw time values provided function time. data.Raw growth data provided function data. raw.time Filtered time values used spline fit. raw.data Filtered growth values used spline fit. gcID (Character) Identifies tested sample. fit.time Fitted time values. fit.data Fitted growth values. parameters List determined growth parameters. : Maximum growth. dY: Difference maximum growth minimum growth. mu: Maximum growth rate (.e., maximum first derivative spline). tD: Doubling time. t.max: Time maximum growth rate. lambda: Lag time. b.tangent: Intersection tangent maximum growth rate abscissa. mu2: biphasic growth: Growth rate second growth phase. tD2: Doubling time second growth phase. lambda2: biphasic growth: Lag time determined second growth phase. t.max2: biphasic growth: Time maximum growth rate second growth phase. b.tangent2: biphasic growth: Intersection tangent maximum growth rate second growth phase abscissa. integral: Area curve spline fit. spline smooth.spline object generated smooth.spline function. spline.deriv1 list time ('x') growth ('y') values describing first derivative spline fit. reliable (Logical) Indicates whether performed fit reliable (set manually). fitFlag (Logical) Indicates whether spline fit successfully performed data. fitFlag2 (Logical) Indicates whether second growth phase identified. control Object class grofit.control containing list options passed function control.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"biphasic = TRUE, following steps performed define second growth phase: Determine local minima within first derivative smooth spline fit. Remove 'peak' containing highest value first derivative (.e., \\(mu_{max}\\)) flanked two local minima. Repeat smooth spline fit identification maximum slope later time values local minimum \\(mu_{max}\\). Repeat smooth spline fit identification maximum slope earlier time values local minimum \\(mu_{max}\\). Choose greater two independently determined slopes \\(mu_{max}2\\).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a smooth spline fit on growth data — growth.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform spline fit TestFit <- growth.gcFitSpline(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 's'))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"growth.report requires grofit object creates report PDF HTML format summarizes results.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"","code":"growth.report(   grofit,   out.dir = tempdir(),   out.nm = NULL,   ec50 = FALSE,   format = c(\"pdf\", \"html\"),   export = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"grofit grofit object created growth.workflow. .dir (Character) path name folder report files created.  NULL, folder named combination 'Report.growth_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'GrowthReport_' current date time. ec50 (Logical) Display results dose-response analysis (TRUE) (FALSE). format (Character) Define file format report, PDF ('pdf') /HTML ('html'). Default: (c('pdf', 'html')) export (Logical) Shall plots generated report exported individual PDF PNG files TRUE FALSE? parallelize (Logical) Create plots using one available processor cores (TRUE) single core (FALSE). ... arguments passed create report. Currently supported: mean.grp: Define groups combine common plots report based sample identifiers. Partial matches sample/group names accepted. Can '', string vector, list string vectors. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc: Define concentrations combine common plots  report. Can numeric vector, list numeric vectors.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"NULL","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PDF and HTML report with results from a growth curve analysis workflow — growth.report","text":"","code":"# \\donttest{ # Create random growth data set   rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')     # Run growth curve analysis workflow   res <- growth.workflow(time = rnd.data$time,                          data = rnd.data$data,                          fit.opt = 's',                          ec50 = FALSE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE)    growth.report(res, out.dir = tempdir(), parallelize = FALSE) #> Error in growth.report(res, out.dir = tempdir(), parallelize = FALSE): TinyTex was not found on your system. To render PDF reports, please execute tinytex::install_tinytex(). # }"},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"growth.workflow runs growth.control create grofit.control object performs computational fitting operations based user input. Finally, desired, final report created PDF HTML format summarizes results obtained.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"","code":"growth.workflow(   grodata = NULL,   time = NULL,   data = NULL,   ec50 = TRUE,   mean.grp = NA,   mean.conc = NA,   neg.nan.act = FALSE,   clean.bootstrap = TRUE,   suppress.messages = FALSE,   fit.opt = c(\"a\"),   t0 = 0,   tmax = NA,   min.growth = NA,   max.growth = NA,   log.x.gc = FALSE,   log.y.lin = TRUE,   log.y.spline = TRUE,   log.y.model = TRUE,   biphasic = FALSE,   lin.h = NULL,   lin.R2 = 0.97,   lin.RSD = 0.1,   lin.dY = 0.05,   interactive = FALSE,   nboot.gc = 0,   smooth.gc = 0.55,   model.type = c(\"logistic\", \"richards\", \"gompertz\", \"gompertz.exp\", \"huang\", \"baranyi\"),   dr.method = c(\"model\", \"spline\"),   dr.model = c(\"gammadr\", \"multi2\", \"LL.2\", \"LL.3\", \"LL.4\", \"LL.5\", \"W1.2\", \"W1.3\",     \"W1.4\", \"W2.2\", \"W2.3\", \"W2.4\", \"LL.3u\", \"LL2.2\", \"LL2.3\", \"LL2.3u\", \"LL2.4\",     \"LL2.5\", \"AR.2\", \"AR.3\", \"MM.2\"),   growth.thresh = 1.5,   dr.have.atleast = 6,   dr.parameter = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu.spline\",     \"lambda.spline\", \"dY.spline\", \"A.spline\", \"mu.model\", \"lambda.model\",     \"dY.orig.model\", \"A.orig.model\"),   smooth.dr = 0.1,   log.x.dr = FALSE,   log.y.dr = FALSE,   nboot.dr = 0,   report = NULL,   out.dir = NULL,   out.nm = NULL,   export.fig = FALSE,   export.res = FALSE,   parallelize = TRUE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"grodata grodata object created read_data parse_data, list containing 'time' matrix well 'growth' dataframe. time (optional) matrix containing time values sample. data (optional) dataframe containing growth data (time matrix provided separate argument). ec50 (Logical) Perform dose-response analysis (TRUE) (FALSE). mean.grp ('', string vector, list string vectors) Define groups combine common plots final report based sample identifiers (report == TRUE). Partial matches sample/group names accepted. Note: maximum number sample groups (unique condition/concentration indicators) 50. 50 groups, option '' produce error ! Insufficient values manual scale. [Number] needed 50 provided. mean.conc (numeric vector, list numeric vectors) Define concentrations combine common plots final report (report == TRUE). neg.nan.act (Logical) Indicates whether program stop negative growth values NA values appear (TRUE). Otherwise, program removes values silently (FALSE). Improper values may caused incorrect data input errors. Default: FALSE. clean.bootstrap (Logical) Determines negative values occur bootstrap removed (TRUE) kept (FALSE). Note: Infinite values always removed. Default: TRUE. suppress.messages (Logical) Indicates whether grofit messages (information current growth curve, EC50 values etc.) displayed (FALSE) (TRUE). option meant speed high-throughput processing data. Note: warnings still displayed. Default: FALSE. fit.opt (Character character vector) Indicates whether program perform linear regression ('l'), model fit ('m'), spline fit ('s'), (''). Combinations can freely chosen providing character vector, e.g. fit.opt = c('l', 's') Default:  fit.opt = c('l', 's'). t0 (Numeric) Minimum time value considered linear spline fits. tmax (Numeric) Maximum time value considered linear spline fits. min.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. max.growth (Numeric) Indicate whether growth values certain threshold considered linear regressions spline fits. log.x.gc (Logical) Indicates whether ln(x+1) applied time data linear spline fits. Default: FALSE. log.y.lin (Logical) Indicates whether ln(y/y0) applied growth data linear fits. Default: TRUE log.y.spline (Logical) Indicates whether ln(y/y0) applied growth data spline fits. Default: TRUE log.y.model (Logical) Indicates whether ln(y/y0) applied growth data model fits. Default: TRUE biphasic (Logical) Shall growth.gcFitLinear growth.gcFitSpline try extract growth parameters two different growth phases (observed , e.g., diauxic shifts) (TRUE) (FALSE)? lin.h (Numeric) Manually define size sliding window used growth.gcFitLinear NULL, h calculated samples based number measurements growth phase plot. lin.R2 (Numeric) R2 threshold growth.gcFitLinear lin.RSD (Numeric) Relative standard deviation (RSD) threshold calculated slope growth.gcFitLinear lin.dY (Numeric) Threshold minimum fraction growth increase linear regression window cover. Default: 0.05 (5%). interactive (Logical) Controls whether fit growth curve method controlled manually user. TRUE, fit visualized Plots pane user can adjust fitting parameters confirm reliability fit per sample. Default: TRUE. nboot.gc (Numeric) Number bootstrap samples used nonparametric growth curve fitting growth.gcBootSpline. Use nboot.gc = 0 disable bootstrap. Default: 0 smooth.gc (Numeric) Parameter describing smoothness spline fit; usually (necessary) within (0;1]. smooth.gc=NULL causes program query optimal value via cross validation techniques. Especially datasets data points option NULL might cause small smoothing parameter. can result tight fit susceptible measurement errors (thus overestimating growth rates) produce error smooth.spline lead overestimation. usage fixed value recommended reproducible results across samples. See ?smooth.spline details. Default: 0.55 model.type (Character) Vector providing names parametric models fitted data. Default: c('logistic', 'richards', 'gompertz', 'gompertz.exp', 'huang', 'baranyi'). dr.method (Character) Define method used perform dose-responde analysis: smooth spline fit ('spline') model fitting ('model'). dr.model (Character) Provide list models R package 'drc' include dose-response analysis (dr.method = 'model'). one model provided, best-fitting model chosen based Akaike Information Criterion. growth.thresh (Numeric) Define threshold growth. growth value sample greater growth.thresh (default: 1.5) times start growth, computations performed. Else, message returned. dr..atleast (Numeric) Minimum number different values response parameter one estimating dose response curve. Note: fit procedures require least six unique values. Default: 6. dr.parameter (Character numeric) response parameter output table used creating dose response curve. See growth.drFit details. Default: 'mu.linfit', represents maximum slope linear regression. Typical options include: 'mu.linfit', 'lambda.linfit', 'dY.linfit', 'mu.spline', 'dY.spline', 'mu.model', '.model'. smooth.dr (Numeric) Smoothing parameter used spline fit smooth.spline dose response curve estimation. Usually (necessesary) (0; 1]. See documentation smooth.spline details. Default: NULL. log.x.dr (Logical) Indicates whether ln(x+1) applied concentration data dose response curves. Default: FALSE. log.y.dr (Logical) Indicates whether ln(y+1) applied response data dose response curves. Default: FALSE. nboot.dr (Numeric) Defines number bootstrap samples EC50 estimation. Use nboot.dr = 0 disable bootstrapping. Default: 0. report (Character NULL) Create PDF ('pdf') /HTML ('html') report running computations. Define NULL report created. Default: (c('pdf', 'html')) .dir Character NULL Define name folder result files stored. NULL, folder named combination 'GrowthResults_' current date time. .nm Character NULL Define name report files. NULL, files named combination 'GrowthReport_' current date time. export.fig (Logical) Export figures created report separate PNG PDF files (TRUE) (FALSE). effective report = TRUE. export.res (Logical) Create tab-separated TXT files containing calculated growth parameters dose-response analysis results well .RData file resulting grofit object. parallelize Run linear fits bootstrapping operations parallel using one available processor cores ... arguments passed shiny app.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"grofit object contains computation results, compatible various plotting functions QurvE package growth.report. time Raw time matrix passed function time (grofit object provided). data Raw growth dataframe passed function data (grofit object provided). gcFit gcFit object created call growth.gcFit. drFit drFit object created call growth.drFit. expdesign Experimental design table inherited grodata created identifier columns (columns 1-3) data. control Object class grofit.control created call growth.control.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/growth.workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a complete growth curve analysis and dose-reponse analysis workflow. — growth.workflow","text":"","code":"# Create random growth data set   rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')   rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')    rnd.data <- list()   rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time)   rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)    # Run growth curve analysis workflow   res <- growth.workflow(time = rnd.data$time,                          data = rnd.data$data,                          fit.opt = 's',                          ec50 = FALSE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE)  # Load custom dataset   input <- read_data(data.growth = system.file('2-FMA_toxicity.csv', package = 'QurvE')) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.    res <- growth.workflow(grodata = input,                          fit.opt = 's',                          ec50 = TRUE,                          export.res = FALSE,                          suppress.messages = TRUE,                          parallelize = FALSE) #> The chosen 'dr.parameter' is not compatible with the selected fitting options ('fit.opt'). Dose-response analysis will not be performed.    plot(res)"},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":null,"dir":"Reference","previous_headings":"","what":"Find indices of maxima an minima in a data series — inflect","title":"Find indices of maxima an minima in a data series — inflect","text":"Find indices maxima minima data series","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find indices of maxima an minima in a data series — inflect","text":"","code":"inflect(x, threshold = 1)"},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find indices of maxima an minima in a data series — inflect","text":"x vector values minima maxima threshold Threshold consider minima maxima","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find indices of maxima an minima in a data series — inflect","text":"list 1. vector minima 2. vector maxima.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find indices of maxima an minima in a data series — inflect","text":"Evan Friedland","code":""},{"path":"https://nicwir.github.io/QurvE/reference/inflect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find indices of maxima an minima in a data series — inflect","text":"","code":"# Pick a desired threshold to plot up to n <- 3 # Generate Data randomwalk <- 100 + cumsum(rnorm(50, 0.2, 1)) # climbs upwards most of the time bottoms <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$minima) tops <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$maxima) # Color functions cf.1 <- grDevices::colorRampPalette(c('pink','red')) cf.2 <- grDevices::colorRampPalette(c('cyan','blue')) plot(randomwalk, type = 'l', main = 'Minima & Maxima\\nVariable Thresholds') for(i in 1:n){   points(bottoms[[i]], randomwalk[bottoms[[i]]], pch = 16, col = cf.1(n)[i], cex = i/1.5) } for(i in 1:n){   points(tops[[i]], randomwalk[tops[[i]]], pch = 16, col = cf.2(n)[i], cex = i/1.5) } legend('topleft', legend = c('Minima',1:n,'Maxima',1:n),        pch = rep(c(NA, rep(16,n)), 2), col = c(1, cf.1(n),1, cf.2(n)),        pt.cex =  c(rep(c(1, c(1:n) / 1.5), 2)), cex = .75, ncol = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for handling linear fits. — lm_parms","title":"Helper functions for handling linear fits. — lm_parms","text":"lm_window performs linear regression Theil-Sen estimator subset data.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for handling linear fits. — lm_parms","text":"","code":"lm_parms(m)  lm_window(x, y, i0, h = 5)"},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for handling linear fits. — lm_parms","text":"m linear model (lm) object x vector independent variable (e.g. time). y vector dependent variable (concentration organisms). i0 index first value used window. h window (number data).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for handling linear fits. — lm_parms","text":"linear model object class lm (lm_window) resp. vector parameters fit (lm_parms).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helper functions for handling linear fits. — lm_parms","text":"Hall, B. G., H. Acar M. Barlow 2013. Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-238 doi:10.1093/molbev/mst197","code":""},{"path":"https://nicwir.github.io/QurvE/reference/lm_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for handling linear fits. — lm_parms","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- as.numeric(rnd.dataset$data[1,-(1:3)]) # Remove identifier columns data.log <- log(data/data[1])  # Perform linear fit on 8th window of size 8 linreg <- lm_window(time, data.log, 8, h=8)  summary(linreg) #>  #> Call: #> theil_sen_regression(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.004435 -0.002098  0.000000  0.008900  0.019854  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.19155    0.01848  -10.36 4.72e-05 *** #> x            0.10804    0.00688   15.70 4.23e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01115 on 6 degrees of freedom #> Multiple R-squared:  0.9762,\tAdjusted R-squared:  0.9723  #> F-statistic: 246.6 on 1 and 6 DF,  p-value: 4.226e-06 #>   lm_parms(linreg) #>            a            b         b.se           r2        b.rsd  #> -0.191554462  0.108034800  0.006879737  0.976246529  0.063680748"},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"Function estimate area curve given x y(x) values","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"","code":"low.integrate(x, y)"},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"x Numeric vector x values. y Numeric vector y values length x.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"Numeric value: Area smoothed spline.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"function uses R internal function smooth.spline.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/low.integrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to estimate the area under a curve given as x and y(x) values — low.integrate","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- as.numeric(rnd.dataset$data[1,-(1:3)]) # Remove identifier columns  plot(time, data)   print(low.integrate(time, data)) #> [1] 94.21786"},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated with the ","title":"Extract relevant data from a raw data export file generated with the ","text":"Extract relevant data raw data export file generated \"Gen5\" \"Gen6\" software.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated with the ","text":"","code":"parse_Gen5Gen6(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated with the ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated with the ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_Gen5Gen6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated with the ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\") ) parsed <- parse_Gen5Gen6(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"parse_data takes raw export file plate reader experiment (similar device), extracts relevant information parses format required run growth.workflow. one read type found user prompted assign correct reads growth fluorescence.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"","code":"parse_data(   data.file = NULL,   map.file = NULL,   software = c(\"Gen5\", \"Gen6\", \"Biolector\", \"Chi.Bio\", \"GrowthProfiler\", \"Tecan\",     \"VictorNivo\", \"VictorX3\"),   convert.time = NULL,   sheet.data = 1,   sheet.map = 1,   csvsep.data = \";\",   dec.data = \".\",   csvsep.map = \";\",   dec.map = \".\",   subtract.blank = TRUE,   calib.growth = NULL,   calib.fl = NULL,   calib.fl2 = NULL,   fl.normtype = c(\"growth\", \"fl2\") )"},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"data.file (Character) table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing raw plate reader (similar device) data. map.file (Character) table file column format extension '.xlsx', '.xls', '.csv', '.tsv', '.txt'  'well', 'ID', 'replicate', 'concentration' first row. Used assign sample information wells plate. software (Character) name software/device used export plate reader data. convert.time (NULL string) Convert time values formula provided form 'y = function(x)'. example: convert.time = 'y = 24 * x' sheet.data, sheet.map (Numeric Character) Number name sheets XLS XLSX files containing experimental data mapping information, respectively (optional). csvsep.data, csvsep.map (Character) separator used CSV data files (ignored file types).  Default: \";\" dec.data, dec.map (Character) decimal separator used CSV, TSV TXT files measurements mapping information, respectively. subtract.blank (Logical) Shall blank values subtracted values within experiment (TRUE, default) (FALSE). calib.growth, calib.fl, calib.fl2 (Character NULL) Provide equation form 'y = function(x)' (example: 'y = x^2 * 0.3 - 0.5') convert growth fluorescence values. can used , e.g., convert plate reader absorbance values OD600 fluorescence intensity molecule concentrations. Caution!: utilizing calibration, carefully consider whether blanks subtracted determine calibration selecting input subtract.blank = TRUE. fl.normtype (Character string) Normalize fluorescence values either diving 'growth' fluorescence2 values ('fl2').","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"grodata object suitable run growth.workflow. See read_data structure.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"Metadata provided map.file needs following layout:","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse raw plate reader data and convert it to a format compatible with QurvE — parse_data","text":"","code":"if(interactive()){ grodata <- parse_data(data.file = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\"),                       sheet.data = 1,                       map.file = system.file(\"fluorescence_test_Gen5.xlsx\", package = \"QurvE\"),                       sheet.map = \"mapping\",                       software = \"Gen5\",                       convert.time = \"y = x * 24\", # convert days to hours                       calib.growth = \"y = x * 3.058\") # convert absorbance to OD values }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"Extract relevant data raw data export file generated software Perkin Elmer's \"Victor Nivo\" plate readers.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"parse_victornivo(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victornivo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"nivo_output.csv\", package = \"QurvE\"), csvsep = \",\" ) parsed <- parse_victornivo(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"Extract relevant data raw data export file generated software Perkin Elmer's \"Victor X3\" plate readers.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"parse_victorx3(input)"},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"input dataframe created reading table file read_file","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"list length two containing growth /fluorescence dataframes first second element, respectively. first column dataframes represents time vector.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/parse_victorx3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract relevant data from a raw data export file generated from the software of Perkin Elmer's ","text":"","code":"if(interactive()){ input <- read_file(filename = system.file(\"victorx3_output.txt\", package = \"QurvE\") ) parsed <- parse_victorx3(input) }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"Generic plot function gcBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"","code":"# S3 method for drBootSpline plot(   x,   pch = 19,   colData = 1,   colSpline = \"black\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"x drBootSpline object created growth.drBootSpline stored within grofit drFit object created growth.workflow growth.drFit, respectively. pch (Numeric) Shape raw data symbols. colData (Numeric Character) Color used plot raw data. colSpline (Numeric Character) Color used plot splines. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether dose-response curves parameter plots shall shown within window. ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"plot dose-response spline fits bootstrapping operation.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcBootSpline objects. — plot.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = \"test\",         control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8, nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.89728236368463 StDev :  0.0813553263346248  #> 90% CI:  0.89460577344822 90% CI:  0.899958953921039 #> 95% CI:  0.894093234892312 95% CI:  0.900471492476947 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.45292787895575  #> 90% CI:  1.44637117486382 90% CI:  1.45950215616535 #> 95% CI:  1.44511763658543 95% CI:  1.46076306895433 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.8972824    0.08135533        0.5362901     0.09911019 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.7634529           1.031112          0.7378259           1.056739 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.452928                1.145672                1.804182 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                1.091384                1.876973 plot(TestRun, combine = TRUE)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFit objects. — plot.drFit","title":"Generic plot function for drFit objects. — plot.drFit","text":"codeplot.drFit calls codeplot.drFitSpline group used dose-response analysis","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFit objects. — plot.drFit","text":"","code":"# S3 method for drFit plot(   x,   combine = TRUE,   names = NULL,   exclude.nm = NULL,   pch = 16,   cex.point = 2,   basesize = 15,   colors = NULL,   lwd = 0.7,   ec50line = TRUE,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   log.y = FALSE,   log.x = FALSE,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFit objects. — plot.drFit","text":"x object class drFit, created growth.drFit. combine (Logical) Combine dose-response analysis results conditions single plot (TRUE) (FALSE). names (String vector strings) Define conditions combine single plot (combine = TRUE). Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. exclude.nm (String vector strings) Define conditions exclude plot (combine = TRUE). Partial matches sample/group names accepted. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. basesize (Numeric) Base font size. colors (Numeric character) Define colors different conditions. lwd (Numeric) Line width individual splines. ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis. x.title (Character) Optional: Provide title x-axis. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? log.x (Logical) Log-transform x-axis plot (TRUE) (FALSE)? plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFit objects. — plot.drFit","text":"One plot per condition tested dose-response analysis single plot showing conditions control = growth.control(dr.method = \"spline\") used growth.drFit combine = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFit objects. — plot.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = \"s\",                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,                  control = growth.control(dr.parameter = \"mu.spline\")) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1586696     0.003372735  0.1517816  0.1655577 #> 2 Test2 FALSE FALSE       0     0.1152434     0.001803581  0.1115696  0.1189172 #>       yEC50      test model #> 1 0.3291815 mu.spline  LL.5 #> 2 0.2364036 mu.spline  W1.3  plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"Generic plot function drFitFLModel objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"","code":"# S3 method for drFitFLModel plot(   x,   ec50line = TRUE,   broken = TRUE,   bp,   n.xbreaks,   n.ybreaks,   log = c(\"xy\"),   pch = 1,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"x Object class drFitFLModel, created fl.drFitModel. ec50line (Logical) Show pointed horizontal vertical lines EC50 value (TRUE) (FALSE). broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input.#' @param pch (Numeric) Size raw data circles. log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. pch (Numeric) Symbol used plot data points. colSpline (Numeric Character) Color used plot splines. colData (Numeric Character) Color used plot raw data. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lwd (Numeric) Line width. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"plot biosensor dose-response model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitFLModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitFLModel objects. — plot.drFitFLModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = \"test\", control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.493 | yEC50: 3003 | fold change: 110.67 | leakiness: 53.8 #>  #>   print(summary(TestRun)) #>      yEC50    y.min   y.max       fc         K        n yEC50.orig    K.orig #> 1 3002.851 53.78191 5951.92 110.6677 0.4932317 1.979455   3002.851 0.4932317 #>   test #> 1   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitModel objects. — plot.drFitModel","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"Generic plot function drFitModel objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"","code":"# S3 method for drFitModel plot(   x,   type = c(\"confidence\", \"all\", \"bars\", \"none\", \"obs\", \"average\"),   ec50line = TRUE,   add = FALSE,   broken = TRUE,   bp,   gridsize = 200,   log = \"x\",   n.xbreaks,   n.ybreaks,   x.lim,   y.lim,   pch = 1,   cex.point,   cex.axis = 1,   cex.lab = 1.3,   col = 1,   lwd = 2,   lty = 2,   xlab,   ylab,   legend = TRUE,   legendText,   legendPos,   cex.legend = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"x object class drFitModel, created growth.drFitModel. type (Character) Specify plot data. currently 5 options: \"average\" (averages fitted curve(s); default), \"none\" (fitted curve(s)), \"obs\" (data points), \"\" (data points fitted curve(s)), \"bars\" (averages fitted curve(s) model-based standard errors (see Details)), \"confidence\" (confidence bands fitted curve(s)). ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). add (Logical) TRUE add already existing plot. broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. gridsize (Numeric) Number points grid used plotting fitted curves. log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. pch (Numeric) Symbol used plot data points. cex.point (Numeric) Size raw data points. cex.axis (Numeric) Font size axis annotations. cex.lab (Numeric) Font size axis titles. col (Logical vector colors) TRUE default colours used. FALSE (default) colors used. lwd (Numeric) Line width. lty (Numeric) Specify line type. xlab (Character) optional label x axis. ylab (Character) optional label y axis. legend (Logical) TRUE legend displayed. legendText (Character) Specify legend text (position upper right corner legend box). legendPos (Numeric) Vector length 2 giving position legend. cex.legend numeric specifying legend text size. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"plot dose-response model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"Christian Ritz, Florent Baty, Jens C. Streibig, Daniel Gerhard (2015). Dose-Response Analysis Using R. PLoS ONE 10(12): e0146021. DOI: 10.1371/journal.pone.0146021","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitModel objects. — plot.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = \"test\")  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50      4.175913      0.07240997   4.023142   4.328685 0.4668562 mu.linfit #>        model #> e:1:50  W1.3 plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitSpline objects. — plot.drFitSpline","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"codeplot.drFitSpline generates spline fit plot response-parameter vs. concentration data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"","code":"# S3 method for drFitSpline plot(   x,   add = FALSE,   ec50line = TRUE,   log = \"\",   pch = 16,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"x object class drFitSpline, created growth.drFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.drBootSpline. ec50line (Logical) Show pointed horizontal vertical lines EC50 value (TRUE) (FALSE). log (\"x\", \"y\", \"xy\") Display x- y-axis logarithmic scale. pch (Numeric) Shape raw data symbols. colSpline (Numeric character) Spline line colour. colData (Numeric character) Contour color raw data circles. cex.point (Numeric) Size raw data symbols. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis. x.title (Character) Optional: Provide title x-axis. lwd (Numeric) Line width spline. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"plot nonparametric dose-response fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitSpline objects. — plot.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = \"test\",                      control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.65140335103632 yEC50 0.469918153562688 #> --> Original scale  #> xEC50 4.21429217741346 yEC50 0.469918153562688 #>  #>   print(summary(TestRun)) #>       EC50     yEC50 EC50.orig yEC50.orig test #> 1 1.651403 0.4699182  4.214292  0.4699182   NA plot(TestRun)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for drFitFL objects. — plot.drFitfl","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"codedrFitfl calls plot.drFitFLModel group used dose-response analysis dr.method = \"model\"","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"","code":"# S3 method for drFitfl plot(   x,   ec50line = TRUE,   log = c(\"xy\"),   pch = 1,   broken = TRUE,   bp,   n.xbreaks,   n.ybreaks,   colSpline = 1,   colData = 1,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   y.lim = NULL,   x.lim = NULL,   lwd = 2,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"x object class drFit, created growth.drFit. ec50line (Logical) Show pointed horizontal vertical lines EC50 values (TRUE) (FALSE). log (Character) String contains '\"x\"' x axis logarithmic, '\"y\"' y axis logarithmic '\"xy\"' '\"yx\"' axes logarithmic. default \"x\". empty string \"\" yields original axes. pch (Numeric) Shape raw data symbols. broken (Logical) TRUE x axis broken provided axis logarithmic (using functionality CRAN package 'plotrix'). bp (Numeric) Specifying break point dose zero (amount stretching dose axis zero order create visual illusion logarithmic scale including 0). default base-10 value corresponding rounded value minimum log10 values positive dose values. argument working logarithmic dose axes. n.xbreaks (Numeric) Number breaks x-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. n.ybreaks (Numeric) Number breaks y-axis (log-transformed). breaks generated using pretty. Thus, final number breaks can deviate user input. colSpline (Numeric character) Spline line colour. colData (Numeric character) Contour color raw data circles. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. lwd (Numeric) Line width individual splines. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"One plot per condition tested dose-response analysis (fl.drFit control = fl.control(dr.method = \"model\")).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.drFitfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for drFitFL objects. — plot.drFitfl","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = \"s\",              x_type = \"time\", norm_fl = TRUE,              dr.parameter = \"max_slope.spline\",              dr.method = \"model\",              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = control)  # Perform dose-response analysis with biosensor model drFitfl <- fl.drFit(flTable = res$flTable, control = control)  plot(drFitfl)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"plot.dr_parameter gathers parameters results dose-response analysis compares chosen parameter condition column plot. Error bars represent 95% confidence interval (shown > 2 replicates).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"","code":"# S3 method for dr_parameter plot(   x,   param = c(\"EC50\", \"EC50.Estimate\", \"y.max\", \"y.min\", \"fc\", \"K\", \"n\", \"yEC50\",     \"drboot.meanEC50\", \"drboot.meanEC50y\", \"EC50.orig\", \"yEC50.orig\"),   names = NULL,   exclude.nm = NULL,   basesize = 12,   reference.nm = NULL,   label.size = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"x grofit, drFit, drTable, flFitRes object obtained growth.workflow, growth.drFit, fl.drFit, fl.workflow. param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'y.max', 'y.min', 'fc', 'K', 'n' fluorescence dose-response analyses dr.type = 'model' control argument, 'EC50', 'yEC50', 'drboot.meanEC50', 'drboot.meanEC50y'. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. basesize (Numeric) Base font size. reference.nm (Character) Name reference condition, parameter values normalized. Partially matching strings tolerated long can uniquely identify condition. label.size (Numeric) Font size sample labels x-axis. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"column plot comparing selected parameter dose-response analysis tested conditions.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dr_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare calculated dose-response parameters between conditions. — plot.dr_parameter","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = \"s\",                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,             control = growth.control(dr.parameter = \"mu.spline\")) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      plot.dr_parameter(drFit, param = 'EC50')  # }"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare fluorescence and growth over time — plot.dual","title":"Compare fluorescence and growth over time — plot.dual","text":"plot.dual creates two-panel plot fluorescence growth values shown time, allowing identification , e.g., expression patterns different growth stages.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare fluorescence and growth over time — plot.dual","text":"","code":"# S3 method for dual plot(   x,   fluorescence = c(\"fl\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y.growth = FALSE,   log.y.fl = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim.growth = NULL,   y.lim.fl = NULL,   x.lim = NULL,   x.title = NULL,   y.title.growth = NULL,   y.title.fl = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare fluorescence and growth over time — plot.dual","text":"x flFit, flFitRes, grodata object created flFit, fl.workflow read_data fluorescence (Character) Indicate, type fluorescence data displayed. IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y.growth (Logical) Log-transform y-axis growth plot (TRUE) (FALSE)? log.y.fl (Logical) Log-transform y-axis fluorescence plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim.growth (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.fl (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence plot vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence growth plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.growth (Character) Optional: Provide title y-axis growth plot. y.title.fl (Character) Optional: Provide title y-axis fluorescence plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare fluorescence and growth over time — plot.dual","text":"two-panel plot, showing raw fluorescence (fluorescence = \"fl\") normalized fluorescence (fluorescence = \"norm.fl\") time top panel, growth time bottom panel.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare fluorescence and growth over time — plot.dual","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot.dual(res, legend.ncol = 3, basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flBootSpline objects. — plot.flBootSpline","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"Generic plot function flBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"","code":"# S3 method for flBootSpline plot(   x,   pch = 1,   colData = 1,   deriv = TRUE,   colSpline = \"dodgerblue3\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"x Object class flBootSpline, created flBootSpline. pch (Numeric) Size raw data circles. colData (Numeric Character) Color used plot raw data. deriv (Logical) Show derivatives (.e., slope) time secondary plot (TRUE) (FALSE). colSpline (Numeric Character) Color used plot splines. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether growth curves parameter plots shall shown within window. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"single plot spline fits bootstrapping operation statistical distribution parameters combine = TRUE separate plots fits parameter distributions (combine = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flBootSpline objects. — plot.flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"s\", x_type = \"time\",                        nboot.fl = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"plot.flFitLinear shows results linear regression visualizes raw data, data points included fit, tangent obtained linear regression, lag time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"","code":"# S3 method for flFitLinear plot(   x,   log = \"\",   which = c(\"fit\", \"diagnostics\", \"fit_diagnostics\"),   pch = 21,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   color = \"firebrick3\",   y.lim = NULL,   x.lim = NULL,   plot = TRUE,   export = FALSE,   height = ifelse(which == \"fit\", 7, 5),   width = ifelse(which == \"fit\", 9, 9),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"x flFittedLinear object created flFitLinear stored within flFitRes flFit object created fl.workflow flFit, respectively. log (\"x\" \"y\") Display x- y-axis logarithmic scale. (\"fit\" \"diagnostics\") Display either results linear fit raw data statistical evaluation linear regression. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Line width. color (Character string) Enter color either name (e.g., red, blue, coral3) via hexadecimal code (e.g., #AE4371, #CCFF00FF, #0066FFFF). full list colors available name can found http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"plot linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"l\", x_type = \"time\",                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine different groups of samples into a single plot — plot.flFitRes","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"Visualize fluorescence, normalized fluorescence, spline fits multiple sample groups single plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"","code":"# S3 method for flFitRes plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   deriv = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )  # S3 method for flFit plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   deriv = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"x flFitRes, flFit, grodata object created fl.workflow containing fluorescence data. data.type (Character) Indicate, type fluorescence data displayed. IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? deriv (Logical) Show derivatives time separate panel plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using axisTicks(). Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis fluorescence curve plot. x.title (Character) Optional: Provide title x-axis fluorescence curve derivative plots. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"plot curves (nonparametric fits, raw fluorescence measurements, raw normalized fluorescence time) flFitRes object created fl.workflow, replicates combined group averages (mean = TRUE) (mean = FALSE). plot curves (raw fluorescence measurements raw normalized fluorescence time) flFit object flFit, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitRes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine different groups of samples into a single plot — plot.flFitRes","text":"","code":"# \\donttest{ # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  plot(res, legend.ncol = 3, basesize = 15)  # }  # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = fl.control(fit.opt = \"s\", suppress.messages = TRUE,              x_type = \"time\", norm_fl = TRUE))  plot(res, legend.ncol = 3, basesize = 15)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for flFitSpline objects. — plot.flFitSpline","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"plot.flFitSpline generates spline fit plot single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"","code":"# S3 method for flFitSpline plot(   x,   add = FALSE,   raw = TRUE,   slope = TRUE,   deriv = TRUE,   spline = TRUE,   log.y = FALSE,   basesize = 16,   pch = 1,   colData = 1,   colSpline = \"dodgerblue3\",   cex.point = 2,   lwd = 0.7,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   n.ybreaks = 6,   y.title = NULL,   x.title = NULL,   y.title.deriv = NULL,   plot = TRUE,   export = FALSE,   width = 8,   height = ifelse(deriv == TRUE, 8, 6),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"x Object class flFitSpline, created flFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.flBootSpline. raw (Logical) Display raw growth circles (TRUE) (FALSE). slope (Logical) Show slope maximum slope (TRUE) (FALSE). deriv (Logical) Show derivative (.e., slope) time secondary plot (TRUE) (FALSE). spline (Logical) add = TRUE: add current spline existing plot (FALSE). log.y (Logical) Log-transform y-axis (TRUE) (FALSE). basesize (Numeric) Base font size. pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. colSpline (Numeric character) Spline line colour. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis fluorescence curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis fluorescence curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using axisTicks(). Thus, final number breaks can deviate user input. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). width (Numeric) Width exported image inches. height (Numeric) Height exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"plot nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for flFitSpline objects. — plot.flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = \"TestFit\",                        control = fl.control(fit.opt = \"s\", x_type = \"time\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"Generic plot function gcBootSpline objects.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"","code":"# S3 method for gcBootSpline plot(   x,   pch = 1,   colData = 1,   deriv = TRUE,   colSpline = \"dodgerblue3\",   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   plot = TRUE,   export = FALSE,   height = 7,   width = 9,   out.dir = NULL,   combine = FALSE,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"x object class gcBootSpline, created growth.gcBootSpline. pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. deriv (Logical) Show derivatives (.e., slope) time secondary plot (TRUE) (FALSE). colSpline (Numeric character) Spline line colour. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . combine (Logical) Indicate whether growth curves parameter plots shall shown within window. ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"single plot spline growth fits bootstrapping operation statistical distribution growth parameters combine = TRUE separate plots growth fits parameter distributions (combine = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcBootSpline objects. — plot.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = \"TestFit\",               control = growth.control(fit.opt = \"s\", nboot.gc = 50))  plot(TestFit, combine = TRUE, lwd = 0.5)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"plot.gcFitLinear shows results linear regression log-transformed data visualizes raw data, data points included fit, tangent obtained linear regression, lag time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"","code":"# S3 method for gcFitLinear plot(   x,   log = \"y\",   which = c(\"fit\", \"diagnostics\", \"fit_diagnostics\"),   pch = 21,   cex.point = 1,   cex.lab = 1.5,   cex.axis = 1.3,   lwd = 2,   color = \"firebrick3\",   y.lim = NULL,   x.lim = NULL,   plot = TRUE,   export = FALSE,   height = ifelse(which == \"fit\", 7, 5),   width = ifelse(which == \"fit\", 9, 9),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"x gcFittedLinear object created growth.gcFitLinear stored within grofit gcFit object created growth.workflow growth.gcFit, respectively. log (\"x\" \"y\") Display x- y-axis logarithmic scale. (\"fit\" \"diagnostics\") Display either results linear fit raw data statistical evaluation linear regression. pch (Numeric) Shape raw data symbols. cex.point (Numeric) Size raw data points. cex.lab (Numeric) Font size axis titles. cex.axis (Numeric) Font size axis annotations. lwd (Numeric) Line width. color (Character string) Enter color either name (e.g., red, blue, coral3) via hexadecimal code (e.g., #AE4371, #CCFF00FF, #0066FFFF). full list colors available name can found http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis vector form c(l, u). x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"plot linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFittedLinear objects. Plot the results of a linear regression on ln-transformed data — plot.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"l\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFitModel objects. — plot.gcFitModel","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"Plot results parametric model fit growth vs. time data","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"","code":"# S3 method for gcFitModel plot(   x,   raw = TRUE,   pch = 1,   colData = 1,   equation = TRUE,   eq.size = 1,   colModel = \"forestgreen\",   basesize = 16,   cex.point = 2,   lwd = 0.7,   x.lim = NULL,   y.lim = NULL,   n.ybreaks = 6,   plot = TRUE,   export = FALSE,   height = 6,   width = 8,   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"x gcFittedModel object created growth.gcFitModel stored within grofit gcFit object created growth.workflow growth.gcFit, respectively. raw (Logical) Show raw data within plot (TRUE) (FALSE). pch (Numeric) Symbol used plot data points. colData (Numeric Character) Color used plot raw data. equation (Logical) Show equation fitted model within plot (TRUE) (FALSE). eq.size (Numeric) Provide value scale size displayed equation. colModel (Numeric Character) Color used plot fitted model. basesize (Numeric) Base font size. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated ggplot2 plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"plot parametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFitModel objects. — plot.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"m\")) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  plot(TestFit, basesize = 18, eq.size = 1.5) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"codeplot.gcFitSpline generates spline fit plot single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"","code":"# S3 method for gcFitSpline plot(   x,   add = FALSE,   raw = TRUE,   slope = TRUE,   deriv = TRUE,   spline = TRUE,   log.y = TRUE,   pch = 1,   colData = 1,   colSpline = \"dodgerblue3\",   basesize = 16,   cex.point = 2,   lwd = 0.7,   y.lim = NULL,   x.lim = NULL,   y.lim.deriv = NULL,   n.ybreaks = 6,   y.title = NULL,   x.title = NULL,   y.title.deriv = NULL,   plot = TRUE,   export = FALSE,   width = 8,   height = ifelse(deriv == TRUE, 8, 6),   out.dir = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"x object class gcFitSpline, created growth.gcFitSpline. add (Logical) Shall fitted spline added existing plot? TRUE used internally plot.gcBootSpline. raw (Logical) Display raw growth circles (TRUE) (FALSE). slope (Logical) Show slope maximum growth rate (TRUE) (FALSE). deriv (Logical) Show derivative (.e., slope) time secondary plot (TRUE) (FALSE). spline (Logical) add = TRUE: add current spline existing plot (FALSE). log.y (Logical) Log-transform y-axis (TRUE) (FALSE). pch (Numeric) Symbol used plot data points. colData (Numeric character) Contour color raw data circles. colSpline (Numeric character) Spline line colour. basesize (Numeric) Base font size. cex.point (Numeric) Size raw data points. lwd (Numeric) Spline line width. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). width (Numeric) Width exported image inches. height (Numeric) Height exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . ... arguments refine generated base R plot (add = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"plot nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for gcFitSpline objects. — plot.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform spline fit TestFit <- growth.gcFitSpline(time, data, gcID = \"TestFit\",                  control = growth.control(fit.opt = \"s\"))  plot(TestFit)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a matrix of growth curve panels — plot.grid","title":"Plot a matrix of growth curve panels — plot.grid","text":"plot.grid takes grofit flFitRes object returns facet grid individual growth fluorescence plots","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a matrix of growth curve panels — plot.grid","text":"","code":"# S3 method for grid plot(   x,   data.type = c(\"spline\", \"raw\", \"norm.fl\"),   param = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu2.linfit\",     \"lambda2.linfit\", \"mu.model\", \"lambda.model\", \"A.model\", \"A.orig.model\", \"dY.model\",     \"dY.orig.model\", \"tD.linfit\", \"tD2.linfit\", \"tD.spline\", \"tD2.spline\", \"mu.spline\",     \"lambda.spline\", \"A.spline\", \"dY.spline\", \"integral.spline\", \"mu2.spline\",     \"lambda2.spline\", \"mu.bt\", \"lambda.bt\", \"A.bt\", \"integral.bt\", \"max_slope.linfit\",     \"max_slope.spline\"),   pal = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\", \"Cyan\",     \"Brown\", \"Mint\"),   invert.pal = FALSE,   IDs = NULL,   sort_by_ID = FALSE,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   mean = TRUE,   log.y = TRUE,   n.ybreaks = 6,   sort_by_conc = TRUE,   nrow = NULL,   basesize = 20,   y.lim = NULL,   x.lim = NULL,   legend.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 1.1,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a matrix of growth curve panels — plot.grid","text":"x grofit flFitRes object created growth.workflow codefl.workflow containing spline fits. data.type (Character) Plot either raw data (data.type = \"raw\") spline fit results param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'mu.linfit', 'lambda.linfit', 'dY.linfit', '.linfit', 'mu.model', 'lambda.model', '.model', 'mu.spline', 'lambda.spline', '.spline', 'dY.spline', 'integral.spline', 'mu.bt', 'lambda.bt', '.bt', 'integral.bt' pal (Character string) Choose one 'Green',   'Orange',  'Purple',  'Magenta', 'Grey', 'Blue', 'Grey', 'Red', 'Cyan', 'Brown', 'Mint' visualize value parameter chosen param sample condition. invert.pal (Logical) Shall colors chosen pal inverted (TRUE) FALSE? IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. order strings within vector defines order samples within grid. sort_by_ID (Logical) Shall samples/conditions ordered entered IDs (TRUE) alphabetically (FALSE)? names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)?#' n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. sort_by_conc (Logical) Shall samples/conditions sorted concentrations rows groups columns? nrow (Numeric) Defines number rows grid sort_by_conc FALSE. basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. legend.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds color scale applied param vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. lwd (Numeric) Line width individual plots. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a matrix of growth curve panels — plot.grid","text":"plot matrix growth curves (raw measurements nonparametric fits) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a matrix of growth curve panels — plot.grid","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        suppress.messages = TRUE,                        parallelize = FALSE)   plot.grid(res, param = \"mu.spline\")"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"plot.grodata calls plot.grofit plot.flFitRes based chosen data.type, respectively.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"","code":"# S3 method for grodata plot(   x,   data.type = c(\"growth\", \"fl\", \"norm.fl\"),   IDs = NULL,   names = NULL,   conc = NULL,   mean = TRUE,   exclude.nm = NULL,   exclude.conc = NULL,   log.y = FALSE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"x grodata object created read_data parse_data. data.type (Character) Plot either raw growth (data.type = \"growth\"), raw fluorescence (data.type = \"fl\"), fluorescence normalized growth (data.type = \"norm.fl\"). IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"plot growth curves (raw measurements) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for grodata objects. Plots raw growth, fluorescence, or normalized fluorescence data of multiple samples or conditions. — plot.grodata","text":"","code":"# Create random growth data sets rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  # Create dataframe with both data sets and a single time vector time <- as.data.frame(matrix(t(c(\"Time\",NA,NA, rnd.data1$time[1,])),nrow=1),              stringsAsFactors=FALSE) colnames(time) <- colnames(rnd.data1$data) data <- rbind(time, rnd.data1$data, rnd.data2$data)   # Create a grodata object grodata <- read_data(data.growth = data, data.format = \"row\") #> Sample data are stored in rows. If they are stored in column format, please run read_data() with data.format = 'col'.  plot(grodata, exclude.nm = \"Test1\", legend.ncol = 4)"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"plot.grofit extracts spline fits subset samples grofit object calculates averages standard deviations conditions replicates combines single plot.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"","code":"# S3 method for grofit plot(   x,   ...,   data.type = c(\"spline\", \"raw\"),   IDs = NULL,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   mean = TRUE,   log.y = TRUE,   deriv = TRUE,   n.ybreaks = 6,   colors = NULL,   color_groups = TRUE,   group_pals = c(\"Green\", \"Orange\", \"Purple\", \"Magenta\", \"Grey\", \"Blue\", \"Grey\", \"Red\",     \"Cyan\", \"Brown\", \"Mint\"),   basesize = 20,   y.lim = NULL,   x.lim = NULL,   y.title = NULL,   x.title = NULL,   y.lim.deriv = NULL,   y.title.deriv = NULL,   lwd = 1.1,   legend.position = \"bottom\",   legend.ncol = 2,   plot = TRUE,   export = FALSE,   height = NULL,   width = NULL,   out.dir = NULL,   out.nm = NULL )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"x grofit object created growth.workflow containing spline fits. ... (optional) Additional grofit objects created separate workflows joint plotting single graph. data.type (Character) Plot either raw data (data.type = \"raw\") spline fit results IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. mean (Logical) Display mean standard deviation groups replicates (TRUE) plot sample individually (FALSE)? log.y (Logical) Log-transform y-axis plot (TRUE) (FALSE)? deriv (Logical) Show derivatives time separate panel plot (TRUE) (FALSE)? n.ybreaks (Numeric) Number breaks y-axis. breaks generated using scales::pretty_breaks. Thus, final number breaks can deviate user input. colors (vector strings) Define color palette used draw plots. NULL, default palettes chosen based number groups/samples within plot. Note: number provided colors least match number groups/samples. color_groups (Logical) Shall samples within group different concentrations shown different shades color? group_pals (String vector) Define colors used display sample groups identical concentrations. number selected color palettes must least number displayed groups. order chosen palettes corresponds oder conditions legend. Available options: \"Green\", \"Oranges\", \"Purple\", \"Cyan\", \"Grey\", \"Red\", \"Blue\", \"Magenta\". basesize (Numeric) Base font size. y.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis growth curve plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. x.lim (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds x-axis growth curve derivative plots vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title (Character) Optional: Provide title y-axis growth curve plot. x.title (Character) Optional: Provide title x-axis growth curve derivative plots. y.lim.deriv (Numeric vector two elements) Optional: Provide lower (l) upper (u) bounds y-axis derivative plot vector form c(l, u). lower upper bound fixed, provide c(l, NA) c(NA, u), respectively. y.title.deriv (Character) Optional: Provide title y-axis derivative plot. lwd (Numeric) Line width individual plots. legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"plot growth curves (raw measurements nonparametric fits) dataset, replicates combined group averages (mean = TRUE) (mean = FALSE).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.grofit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic plot function for grofit objects. Combine different groups of samples into a single plot — plot.grofit","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        suppress.messages = TRUE,                        parallelize = FALSE)   plot(res, names = \"Test1\", legend.ncol = 4) # Show only samples for condition \"Test1\""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare growth parameters between samples or conditions — plot.parameter","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"plot.parameter gathers physiological parameters results growth fit analysis compares chosen parameter sample condition column plot. Error bars represent 95% confidence interval (shown > 2 replicates).","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"","code":"# S3 method for parameter plot(   x,   param = c(\"mu.linfit\", \"lambda.linfit\", \"dY.linfit\", \"A.linfit\", \"mu2.linfit\",     \"lambda2.linfit\", \"mu.model\", \"lambda.model\", \"A.model\", \"A.orig.model\", \"dY.model\",     \"dY.orig.model\", \"tD.linfit\", \"tD2.linfit\", \"tD.spline\", \"tD2.spline\", \"mu.spline\",     \"lambda.spline\", \"A.spline\", \"dY.spline\", \"integral.spline\", \"mu2.spline\",     \"lambda2.spline\", \"mu.bt\", \"lambda.bt\", \"A.bt\", \"integral.bt\", \"max_slope.linfit\",     \"max_slope.spline\"),   IDs = NULL,   names = NULL,   conc = NULL,   exclude.nm = NULL,   exclude.conc = NULL,   reference.nm = NULL,   reference.conc = NULL,   order_by_conc = FALSE,   colors = NULL,   basesize = 12,   label.size = NULL,   shape.size = 2.5,   legend.position = \"right\",   legend.ncol = 1,   plot = TRUE,   export = FALSE,   height = 7,   width = NULL,   out.dir = NULL,   out.nm = NULL,   ... )"},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"x grofit, gcFit, gcTable object obtained growth.workflow growth.gcFit. param (Character) parameter used compare different sample groups. name column containing numeric values gcTable (stored within grofit gcFit objects) can used input. Useful options : 'mu.linfit', 'lambda.linfit', 'dY.linfit', '.linfit', 'mu.model', 'lambda.model', '.model', 'mu.spline', 'lambda.spline', '.spline', 'dY.spline', 'integral.spline', 'mu.bt', 'lambda.bt', '.bt', 'integral.bt' IDs (String vector strings) Define samples groups (mean = TRUE) combine single plot based exact matches entries label condition columns grofit$expdesign. names (String vector strings) Define groups combine single plot. Partial matches sample/group names accepted. NULL, samples considered. Note: Ensure use unique substrings extract groups interest. name one condition included entirety within name conditions, extracted individually. conc (Numeric numeric vector) Define concentrations combine single plot. NULL, concentrations considered. Note: Ensure use unique concentration values extract groups interest. concentration value one condition included entirety within name conditions (e.g., dataset contains '1', '10', '100', code = 10 select '10 '100'), extracted individually. exclude.nm (String vector strings) Define groups exclude plot. Partial matches sample/group names accepted. exclude.conc (Numeric numeric vector) Define concentrations exclude plot. reference.nm (Character) Name reference condition, parameter values normalized. Partially matching strings tolerated long can uniquely identify condition. reference.conc (Numeric) Concentration reference condition, parameter values normalized. order_by_conc (Logical) Shall columns sorted order ascending concentrations (TRUE) sample groups FALSE? colors (vector strings) Define color palette used draw columns. NULL, default palettes chosen. Note: number provided colors least match number groups. basesize (Numeric) Base font size. label.size (Numeric) Font size sample labels x-axis. shape.size (Numeric) size symbols indicating replicate values. Default: 2.5 legend.position (Character) Position legend. One \"bottom\", \"top\", \"left\", \"right\". legend.ncol (Numeric) Number columns legend. plot (Logical) Show generated plot Plots pane (TRUE) (FALSE). FALSE, ggplot object returned. export (Logical) Export generated plot PDF PNG files (TRUE) (FALSE). height (Numeric) Height exported image inches. width (Numeric) Width exported image inches. .dir (Character) Name path folder exported files stored. NULL, \"Plots\" folder created current working directory store files . .nm (Character) name PDF PNG files export = TRUE. NULL, name automatically generated including chosen parameter. ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"column plot comparing selected growth parameter tested conditions.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/plot.parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare growth parameters between samples or conditions — plot.parameter","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\") rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = \"Test2\")  rnd.data <- list() rnd.data[[\"time\"]] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[[\"data\"]] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)   plot.parameter(res,                param = \"mu.spline\",                legend.ncol = 4,                legend.position = \"bottom\",                basesize = 15,                label.size = 11)"},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":null,"dir":"Reference","previous_headings":"","what":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"function calls baranyi function generate curves time zero t adds random noise x- y-axes. three growth parameters given input values slightly changed produce different growth curves. resulting datasets can used test growth.workflow function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"","code":"rdm.data(d, y0 = 0.05, tmax = 24, mu = 0.6, lambda = 5, A = 3, label = \"Test1\")"},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"d Numeric value, number data sets. d vector, first entry used. y0 Numeric value, start growth. t vector, first entry used. tmax Numeric value, number time points per data set. t vector, first entry used. mu Numeric value, maximum slope. mu vector, first entry used. lambda Numeric value, lag-phase. lambda vector, first entry used. Numeric value, maximum growth. vector, first entry used. label Character string, condition label  label vector, first entry used.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"list containing simulated data three tests (e.g., 'organisms'): time numeric matrix size dxt, row represent time points growth data simulated stored row data. data data.frame size dx(3+t), 1. column, character experiment identifier; 2. column: Replicate number; 3. column: concentration substrate compound experiment obtained; 4.-(3+t). column: growth data corresponding time points time.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"Matthias Kahm, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo (2010). grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21. DOI: 10.18637/jss.v033.i07","code":""},{"path":"https://nicwir.github.io/QurvE/reference/rdm.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The function calls the baranyi function to generate curves between time zero and t and adds some random noise to the x- and y-axes. The three growth parameters given as input values will be slightly changed to produce different growth curves. The resulting datasets can be used to test the growth.workflow function. — rdm.data","text":"","code":"# Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # \\donttest{ # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,              control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1622771     0.002470766  0.1572443  0.1673099 #> 2 Test2 FALSE FALSE       0     0.1187681     0.002527674  0.1136194  0.1239168 #>       yEC50      test model #> 1 0.3288721 mu.spline  W1.3 #> 2 0.2360017 mu.spline  W1.3 plot(drFit)   # }"},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read growth and fluorescence data in table format — read_data","title":"Read growth and fluorescence data in table format — read_data","text":"read_data reads table files R dataframe objects containing growth fluorescence data extracts datasets, sample group information, performs blank correction, applies data transformation (calibration), combines technical replicates.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read growth and fluorescence data in table format — read_data","text":"","code":"read_data(   data.growth = NA,   data.fl = NA,   data.fl2 = NA,   data.format = \"col\",   csvsep = \";\",   dec = \".\",   csvsep.fl = \";\",   dec.fl = \".\",   csvsep.fl2 = \";\",   dec.fl2 = \".\",   sheet.growth = 1,   sheet.fl = 1,   sheet.fl2 = 1,   fl.normtype = c(\"growth\", \"fl2\"),   subtract.blank = TRUE,   convert.time = NULL,   calib.growth = NULL,   calib.fl = NULL,   calib.fl2 = NULL )"},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read growth and fluorescence data in table format — read_data","text":"data.growth R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing growth data. first three table rows contain sample description replicate number (optional: followed letter indicate technical replicates) concentration value (optional) data.fl (optional) R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing fluorescence data. Table layout must mimic data.growth. data.fl2 (optional) R dataframe object table file extension '.xlsx', '.xls', '.csv', '.tsv', '.txt' containing measurements second fluorescence channel (used normalize fluorescence data). Table layout must mimic data.growth. data.format (Character) \"col\" samples columns, \"row\" samples rows. Default: \"col\" csvsep (Character) separator used CSV file storing growth data (ignored file types). Default: \";\" dec (Character) decimal separator used CSV, TSV TXT file storing growth data. Default: \".\" csvsep.fl, csvsep.fl2 (Character) separator used CSV file storing fluorescence data (ignored file types). Default: \";\" dec.fl, dec.fl2 (Character) decimal separator used CSV, TSV TXT file storing fluorescence data. Default: \".\" sheet.growth, sheet.fl, sheet.fl2 (Numeric Character) Number name sheet respective data type XLS XLSX files (optional). fl.normtype (Character string) Normalize fluorescence values either diving 'growth' fluorescence2 values ('fl2'). subtract.blank (Logical) Shall blank values subtracted values within experiment (TRUE, default) (FALSE). convert.time (NULL string) Convert time values formula provided form 'y = function(x)'. example: convert.time = 'y = 24 * x' calib.growth, calib.fl, calib.fl2 (Character NULL) Provide equation form 'y = function(x)' (example: 'y = x^2 * 0.3 - 0.5') convert growth fluorescence values. can used , e.g., convert plate reader absorbance values OD600 fluorescence intensity molecule concentrations. Caution!: utilizing calibration, carefully consider whether blanks subtracted determine calibration selecting input subtract.blank = TRUE.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read growth and fluorescence data in table format — read_data","text":"R list object class grodata containing time matrix, dataframes growth fluorescence data (applicable), experimental design table. grodata object can directly used run growth.workflow/fl.workflow , together growth.control/fl.control object, growth.gcFit/flFit. time Matrix raw time values extracted data.growth. growth Dataframe raw growth values sample identifiers extracted data.growth. fluorescence Dataframe raw fluorescence values sample identifiers extracted data.fl. NA, fluorescence data provided. norm.fluorescence fluorescence data divided growth values. NA, fluorescence data provided. expdesign Experimental design table created first three identifier rows/columns (see argument data.format) (data.growth.","code":""},{"path":[]},{"path":"https://nicwir.github.io/QurvE/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read growth and fluorescence data in table format — read_data","text":"","code":"# Load CSV file containing only growth data data_growth <- read_data(data.growth = system.file(\"2-FMA_toxicity.csv\",                          package = \"QurvE\"), csvsep = \";\" ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Load XLSX file containing both growth and fluorescence data data_growth_fl <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                             sheet.growth = \"OD\",                             data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                             sheet.fl = 2) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'."},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"read_file automatically detects format file provided filename calls appropriate function read table file.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"","code":"read_file(filename, csvsep = \";\", dec = \".\", sheet = 1)"},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"filename (Character) Name path table file read. Can type CSV, XLS, XLSX, TSV, TXT. csvsep (Character) separator used CSV file (ignored file types). dec (Character) decimal separator used CSV, TSV TXT files. sheet (Numeric Character) Number name sheet XLS XLSX files (optional). Default: \";\"","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"dataframe object headers first row.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call the appropriate function required to read a table file and return the table as a dataframe object. — read_file","text":"","code":"input <- read_file(filename = system.file(\"2-FMA_toxicity.csv\", package = \"QurvE\"), csvsep = \";\" )"},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny QurvE App — run_app","title":"Run Shiny QurvE App — run_app","text":"Run Shiny QurvE App","code":""},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny QurvE App — run_app","text":"","code":"run_app()"},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Shiny QurvE App — run_app","text":"Launches browser shiny app","code":""},{"path":"https://nicwir.github.io/QurvE/reference/run_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Shiny QurvE App — run_app","text":"","code":"if(interactive()){ # Run the app run_app() }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drBootSpline objects — summary.drBootSpline","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"Generic summary function drBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"","code":"# S3 method for drBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"object object class drBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"dataframe statistical parameters extracted dose-response bootstrapping analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drBootSpline objects — summary.drBootSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+stats::rnorm(19)/50, 0)  TestRun <- growth.drBootSpline(conc, response, drID = 'test',         control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8, nboot.dr = 50)) #> === Bootstrapping of dose response curve ========== #> --- EC 50 ----------------------------------------- #>  #> Mean  :  0.910259295355852 StDev :  0.0856574214156607  #> 90% CI:  0.907441166191277 90% CI:  0.913077424520427 #> 95% CI:  0.906901524436358 95% CI:  0.913617066275346 #>  #>  #> --- EC 50 in original scale ----------------------- #>  #> Mean  :  1.48496679020295  #> 90% CI:  1.47797369117482 90% CI:  1.49197962448259 #> 95% CI:  1.47663683384793 95% CI:  1.49332476365435 #>   print(summary(TestRun)) #>   drboot.meanEC50 drboot.sdEC50 drboot.meanEC50y drboot.sdEC50y #> 1       0.9102593    0.08565742        0.5262381     0.08963781 #>   drboot.ci90EC50.lo drboot.ci90EC50.up drboot.ci95EC50.lo drboot.ci95EC50.up #> 1          0.7693528           1.051166          0.7423707           1.078148 #>   drboot.meanEC50.orig drboot.ci90EC50.orig.lo drboot.ci90EC50.orig.up #> 1             1.484967                1.158369                1.860984 #>   drboot.ci95EC50.orig.lo drboot.ci95EC50.orig.up #> 1                 1.10091                1.939231"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFit objects — summary.drFit","title":"Generic summary function for drFit objects — summary.drFit","text":"Generic summary function drFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFit objects — summary.drFit","text":"","code":"# S3 method for drFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFit objects — summary.drFit","text":"object object class drFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFit objects — summary.drFit","text":"dataframe parameters samples extracted dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFit objects — summary.drFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE))  # Perform dose-response analysis drFit <- growth.drFit(gcTable = gcFit$gcTable,                  control = growth.control(dr.parameter = 'mu.spline')) #>  #> === EC 50 Estimation ============================== #> --------------------------------------------------- #> --> Checking data ... #> --> Number of distinct tests found: 2  #> --> Valid datasets per test:  #>       TestID Number #>       Test1  35     #>       Test2  35      # Inspect results summary(drFit) #>    Test log.x log.y Samples EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper #> 1 Test1 FALSE FALSE       0     0.1567671     0.003716130  0.1491777  0.1643564 #> 2 Test2 FALSE FALSE       0     0.1158143     0.001685548  0.1123810  0.1192477 #>       yEC50      test model #> 1 0.3326692 mu.spline  LL.5 #> 2 0.2360911 mu.spline  W1.3 # }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"Generic summary function drFitFLModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"","code":"# S3 method for drFitFLModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"object object class drFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"dataframe biosensor response parameters.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitFLModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitFLModel objects — summary.drFitFLModel","text":"","code":"# Create concentration values via a serial dilution conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10)  # Simulate response values via biosensor equation response <- biosensor.eq(conc, y.min = 110, y.max = 6000, K = 0.5, n = 2) +             0.01*6000*rnorm(10)  # Perform fit TestRun <- fl.drFitModel(conc, response, drID = 'test', control = fl.control()) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> sensitivity: 0.514 | yEC50: 3095 | fold change: 32.02 | leakiness: 187.4 #>  #>   print(summary(TestRun)) #>     yEC50    y.min    y.max       fc         K        n yEC50.orig    K.orig #> 1 3094.79 187.4236 6002.157 32.02455 0.5135227 2.054094    3094.79 0.5135227 #>   test #> 1   NA"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitModel objects — summary.drFitModel","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"Generic summary function drFitModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"","code":"# S3 method for drFitModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"object object class drFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"dataframe parameters extracted dose-response analysis single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitModel objects — summary.drFitModel","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitModel(conc, response, drID = 'test')  print(summary(TestRun)) #>        EC50.Estimate EC50.Std..Error EC50.Lower EC50.Upper     yEC50      test #> e:1:50       4.00036      0.06667257   3.859694   4.141027 0.4636142 mu.linfit #>        model #> e:1:50  W1.3"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitSpline objects — summary.drFitSpline","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"Generic summary function drFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"","code":"# S3 method for drFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"object object class drFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"dataframe parameters extracted dose-response analysis single sample.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitSpline objects — summary.drFitSpline","text":"","code":"conc <- c(0, rev(unlist(lapply(1:18, function(x) 10*(2/3)^x))),10) response <- c(1/(1+exp(-0.7*(4-conc[-20])))+rnorm(19)/50, 0)  TestRun <- growth.drFitSpline(conc, response, drID = 'test',               control = growth.control(log.x.dr = TRUE, smooth.dr = 0.8)) #>  #>  #> === Dose response curve estimation ================ #> --- EC 50 ----------------------------------------- #> --> test #> xEC50 1.57219359728021 yEC50 0.478215990213518 #> --> Original scale  #> xEC50 3.81720361712135 yEC50 0.478215990213518 #>  #>   print(summary(TestRun)) #>       EC50    yEC50 EC50.orig yEC50.orig test #> 1 1.572194 0.478216  3.817204   0.478216   NA"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for drFitfl objects — summary.drFitfl","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"Generic summary function drFitfl objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"","code":"# S3 method for drFitfl summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"object object class drFitfl ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"dataframe parameters samples extracted dose-response analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.drFitfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for drFitfl objects — summary.drFitfl","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Define fit controls control <- fl.control(fit.opt = 's',              x_type = 'time', norm_fl = TRUE,              dr.parameter = 'max_slope.spline',              dr.method = 'model',              suppress.messages = TRUE)  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = control)  # Perform dose-response analysis with biosensor model drFitfl <- fl.drFit(flTable = res$flTable, control = control)  summary(drFitfl) #>             Test log.x log.y    yEC50    y.min    y.max        fc          K #> 1 pSEVA634rκ∙GFP FALSE FALSE 205.9582 64.17578 347.7406  5.418564 0.01018009 #> 2  pSEVA634r∙GFP FALSE FALSE 190.4524 30.77274 350.1321 11.377997 0.04563550 #> 3   pSEVA634∙GFP FALSE FALSE 446.4529 92.26689 800.6390  8.677425 0.03285861 #>           n yEC50.orig     K.orig             test #> 1 0.9764884   205.9582 0.01018009 max_slope.spline #> 2 2.7156988   190.4524 0.04563550 max_slope.spline #> 3 1.1757148   446.4529 0.03285861 max_slope.spline"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flBootSpline objects — summary.flBootSpline","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"Generic summary function flBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"","code":"# S3 method for flBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"object object class flBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"dataframe statistical parameters extracted dose-response bootstrapping analysis.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flBootSpline objects — summary.flBootSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flBootSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time',                        nboot.fl = 50))  summary(TestFit) #>       max_slope.bt        lambda.bt             A.bt            dY.bt #> 1 242.185277530862 14.9910559590045 7555.26813916095 6032.51547792371 #>        integral.bt  stdmax_slope.bt      stdlambda.bt          stdA.bt #> 1 149175.940207654 2.48686555418691 0.323389677261759 72.9009689708706 #>          stddY.bt   stdintegral.bt reliable_fit.bt    ci90.mu.bt.lo #> 1 108.33605589559 3552.15831875699            TRUE 238.094383694225 #>    ci90.mu.bt.up ci90.lambda.bt.lo ci90.lambda.bt.up     ci90.A.bt.lo #> 1 246.2761713675  14.4590799399089  15.5230319781001 7435.34604520387 #>       ci90.A.bt.up ci90.integral.bt.lo ci90.integral.bt.up    ci95.mu.bt.lo #> 1 7675.19023311803    143332.639773299     155019.24064201 237.311021044656 #>      ci95.mu.bt.up ci95.lambda.bt.lo ci95.lambda.bt.up     ci95.A.bt.lo #> 1 247.059534017069  14.3572121915715  15.6248997264376 7412.38223997804 #>       ci95.A.bt.up ci95.integral.bt.lo ci95.integral.bt.up #> 1 7698.15403834385    142213.709902891    156138.170512418"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFit objects — summary.flFit","title":"Generic summary function for flFit objects — summary.flFit","text":"Generic summary function flFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFit objects — summary.flFit","text":"","code":"# S3 method for flFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFit objects — summary.flFit","text":"object object class flFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFit objects — summary.flFit","text":"dataframe parameters extracted fits workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFit objects — summary.flFit","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run curve fitting workflow res <- flFit(fl_data = input$norm.fluorescence,              time = input$time,              parallelize = FALSE,              control = fl.control(fit.opt = 's', suppress.messages = TRUE,              x_type = 'time', norm_fl = TRUE, nboot.fl = 20))  summary(res) #>            TestId AddId concentration reliability_tag log.x.spline log.y.spline #> 1    pSEVA634∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 2   pSEVA634r∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 3  pSEVA634rκ∙GFP  <NA>             0            TRUE        FALSE        FALSE #> 4    pSEVA634∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 5   pSEVA634r∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 6  pSEVA634rκ∙GFP  <NA>          0.01            TRUE        FALSE        FALSE #> 7    pSEVA634∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 8   pSEVA634r∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 9  pSEVA634rκ∙GFP  <NA>          0.05            TRUE        FALSE        FALSE #> 10   pSEVA634∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 11  pSEVA634r∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 12 pSEVA634rκ∙GFP  <NA>           0.1            TRUE        FALSE        FALSE #> 13   pSEVA634∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 14  pSEVA634r∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 15 pSEVA634rκ∙GFP  <NA>           0.2            TRUE        FALSE        FALSE #> 16   pSEVA634∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 17  pSEVA634r∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 18 pSEVA634rκ∙GFP  <NA>           0.5            TRUE        FALSE        FALSE #> 19   pSEVA634∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 20  pSEVA634r∙GFP  <NA>             1            TRUE        FALSE        FALSE #> 21 pSEVA634rκ∙GFP  <NA>             1            TRUE        FALSE        FALSE #>    log.x.lin log.y.lin nboot.fl max_slope.linfit lambda.linfit dY.linfit #> 1      FALSE     FALSE       20                0          <NA>      <NA> #> 2      FALSE     FALSE       20                0          <NA>      <NA> #> 3      FALSE     FALSE       20                0          <NA>      <NA> #> 4      FALSE     FALSE       20                0          <NA>      <NA> #> 5      FALSE     FALSE       20                0          <NA>      <NA> #> 6      FALSE     FALSE       20                0          <NA>      <NA> #> 7      FALSE     FALSE       20                0          <NA>      <NA> #> 8      FALSE     FALSE       20                0          <NA>      <NA> #> 9      FALSE     FALSE       20                0          <NA>      <NA> #> 10     FALSE     FALSE       20                0          <NA>      <NA> #> 11     FALSE     FALSE       20                0          <NA>      <NA> #> 12     FALSE     FALSE       20                0          <NA>      <NA> #> 13     FALSE     FALSE       20                0          <NA>      <NA> #> 14     FALSE     FALSE       20                0          <NA>      <NA> #> 15     FALSE     FALSE       20                0          <NA>      <NA> #> 16     FALSE     FALSE       20                0          <NA>      <NA> #> 17     FALSE     FALSE       20                0          <NA>      <NA> #> 18     FALSE     FALSE       20                0          <NA>      <NA> #> 19     FALSE     FALSE       20                0          <NA>      <NA> #> 20     FALSE     FALSE       20                0          <NA>      <NA> #> 21     FALSE     FALSE       20                0          <NA>      <NA> #>    A.linfit x.mu.start.linfit x.mu.end.linfit r2mu.linfit reliable_fit.linfit #> 1      <NA>              <NA>            <NA>        <NA>               FALSE #> 2      <NA>              <NA>            <NA>        <NA>               FALSE #> 3      <NA>              <NA>            <NA>        <NA>               FALSE #> 4      <NA>              <NA>            <NA>        <NA>               FALSE #> 5      <NA>              <NA>            <NA>        <NA>               FALSE #> 6      <NA>              <NA>            <NA>        <NA>               FALSE #> 7      <NA>              <NA>            <NA>        <NA>               FALSE #> 8      <NA>              <NA>            <NA>        <NA>               FALSE #> 9      <NA>              <NA>            <NA>        <NA>               FALSE #> 10     <NA>              <NA>            <NA>        <NA>               FALSE #> 11     <NA>              <NA>            <NA>        <NA>               FALSE #> 12     <NA>              <NA>            <NA>        <NA>               FALSE #> 13     <NA>              <NA>            <NA>        <NA>               FALSE #> 14     <NA>              <NA>            <NA>        <NA>               FALSE #> 15     <NA>              <NA>            <NA>        <NA>               FALSE #> 16     <NA>              <NA>            <NA>        <NA>               FALSE #> 17     <NA>              <NA>            <NA>        <NA>               FALSE #> 18     <NA>              <NA>            <NA>        <NA>               FALSE #> 19     <NA>              <NA>            <NA>        <NA>               FALSE #> 20     <NA>              <NA>            <NA>        <NA>               FALSE #> 21     <NA>              <NA>            <NA>        <NA>               FALSE #>    max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1               <NA>               <NA>             <NA>         <NA> #> 2               <NA>               <NA>             <NA>         <NA> #> 3               <NA>               <NA>             <NA>         <NA> #> 4               <NA>               <NA>             <NA>         <NA> #> 5               <NA>               <NA>             <NA>         <NA> #> 6               <NA>               <NA>             <NA>         <NA> #> 7               <NA>               <NA>             <NA>         <NA> #> 8               <NA>               <NA>             <NA>         <NA> #> 9               <NA>               <NA>             <NA>         <NA> #> 10              <NA>               <NA>             <NA>         <NA> #> 11              <NA>               <NA>             <NA>         <NA> #> 12              <NA>               <NA>             <NA>         <NA> #> 13              <NA>               <NA>             <NA>         <NA> #> 14              <NA>               <NA>             <NA>         <NA> #> 15              <NA>               <NA>             <NA>         <NA> #> 16              <NA>               <NA>             <NA>         <NA> #> 17              <NA>               <NA>             <NA>         <NA> #> 18              <NA>               <NA>             <NA>         <NA> #> 19              <NA>               <NA>             <NA>         <NA> #> 20              <NA>               <NA>             <NA>         <NA> #> 21              <NA>               <NA>             <NA>         <NA> #>    reliable_fit2.linfit max_slope.spline x.max.spline     lambda.spline #> 1                 FALSE 92.2668917228958         20.5  15.5467166096303 #> 2                 FALSE 30.7727385498335           20  31.2872267087632 #> 3                 FALSE 64.1757831646139           16  20.8131240327297 #> 4                 FALSE 242.557704041646         23.5  14.9826287460236 #> 5                 FALSE 64.6529094536623           19  21.6712998092259 #> 6                 FALSE  205.57971913027           18  12.5662904914234 #> 7                 FALSE 509.394721871896         21.5  6.95952698278297 #> 8                 FALSE 204.031623957343         17.5  13.4360564669418 #> 9                 FALSE 290.961299939386           13  4.67379381987587 #> 10                FALSE 670.985334314907            6 0.373248436531114 #> 11                FALSE 327.194544214622           17  9.86802427129628 #> 12                FALSE 335.243584785665         17.5  3.65080407904781 #> 13                FALSE 728.625260083635          6.5  0.55381657857781 #> 14                FALSE  346.26811325449         16.5  9.75821807365777 #> 15                FALSE 320.246598452125         17.5  3.21350390586794 #> 16                FALSE 774.053986420781          5.5 0.246732777852532 #> 17                FALSE 337.909403917518         16.5  8.08916482172027 #> 18                FALSE 351.643501664605           18   4.8448445225091 #> 19                FALSE 779.134078966908            6 0.462268482214881 #> 20                FALSE 353.185039298378         16.5  9.57178508598632 #> 21                FALSE 338.826806405153           18  5.01597033523575 #>    max_slope2.spline x.max2.spline lambda2.spline        y0.spline #> 1               <NA>          <NA>           <NA>  1291.4242870252 #> 2               <NA>          <NA>           <NA> 1188.27831547782 #> 3               <NA>          <NA>           <NA> 1565.59217809736 #> 4               <NA>          <NA>           <NA> 1519.80363776351 #> 5               <NA>          <NA>           <NA>  1255.7213080438 #> 6               <NA>          <NA>           <NA> 1624.15289883901 #> 7               <NA>          <NA>           <NA> 1132.18524639308 #> 8               <NA>          <NA>           <NA> 1405.71652864703 #> 9               <NA>          <NA>           <NA> 1468.52438340082 #> 10              <NA>          <NA>           <NA> 1209.47395589044 #> 11              <NA>          <NA>           <NA> 1187.83879461913 #> 12              <NA>          <NA>           <NA> 1467.93981010311 #> 13              <NA>          <NA>           <NA> 891.795404947046 #> 14              <NA>          <NA>           <NA> 1282.77700477438 #> 15              <NA>          <NA>           <NA> 1542.64869773804 #> 16              <NA>          <NA>           <NA> 1132.44043950228 #> 17              <NA>          <NA>           <NA> 862.662992687728 #> 18              <NA>          <NA>           <NA> 1602.42470098365 #> 19              <NA>          <NA>           <NA> 1017.04362101536 #> 20              <NA>          <NA>           <NA>  1323.6959493112 #> 21              <NA>          <NA>           <NA> 1707.52183129309 #>            A.spline        dY.spline  integral.spline reliable_fit.spline #> 1  3427.12552423136 2135.70123720616 82881.4064741573                TRUE #> 2  1470.99207749984 282.713762022016 43222.9360971387                TRUE #> 3  2196.18856426073 630.596386163375 67033.6678589487                TRUE #> 4   7592.8006375136 6072.99699975009 151370.675832013                TRUE #> 5  2384.30375521353 1128.58244716973 58249.0814015739                TRUE #> 6  4820.28715109277 3196.13425225376 132414.081549266                TRUE #> 7  17121.2144379567 15989.0291915636 367233.851934484                TRUE #> 8  5206.54317686809 3800.82664822106 120525.231431367                TRUE #> 9   7768.1886699261 6299.66428652528 223919.428584981                TRUE #> 10  20079.009500852 18869.5355449615 490254.828661571                TRUE #> 11 6840.37784263307 5652.53904801394 169914.301957325                TRUE #> 12 9191.86346478597 7723.92365468286 269744.222628615                TRUE #> 13 20481.0977680944 19589.3023631473 497122.375105376                TRUE #> 14 7000.84532046274 5718.06831568836 179100.135589319                TRUE #> 15 9006.21056404742 7463.56186630938 267724.576457374                TRUE #> 16 20704.0909872883  19571.650547786 520199.730690859                TRUE #> 17 6952.68659445913  6090.0236017714 178120.140852738                TRUE #> 18 9322.62835009371 7720.20364911006 273698.194402021                TRUE #> 19 19774.7021395644  18757.658518549 508722.732093214                TRUE #> 20 7189.59680355257 5865.90085424137 182547.707805717                TRUE #> 21 9258.53106887535 7551.00923758226 271383.083788706                TRUE #>    reliable_fit2.spline smooth.spline     max_slope.bt         lambda.bt #> 1                 FALSE          0.75 92.8810181165145  15.4900781185611 #> 2                 FALSE          0.75 33.0142900666779  30.7755149690121 #> 3                 FALSE          0.75 65.0428286334576  20.4055781836549 #> 4                 FALSE          0.75 242.424724758198  14.9848518077673 #> 5                 FALSE          0.75 65.0613107012946  21.4341847723798 #> 6                 FALSE          0.75 206.208572390969  12.5229169862106 #> 7                 FALSE          0.75 509.618138451409  7.18941936043906 #> 8                 FALSE          0.75 200.515629921205  13.4771670153594 #> 9                 FALSE          0.75 289.376854283208   4.5902656850418 #> 10                FALSE          0.75 670.381032411219 0.516773495289976 #> 11                FALSE          0.75 325.362639950699  9.83860085940953 #> 12                FALSE          0.75 332.874185416819    3.611630535765 #> 13                FALSE          0.75 722.243256812362 0.750306992669745 #> 14                FALSE          0.75 342.480309708144  9.59903319996631 #> 15                FALSE          0.75 318.627517298318  3.46034133998785 #> 16                FALSE          0.75  772.19970447655 0.411813937789752 #> 17                FALSE          0.75  334.98371321026  8.06521801666775 #> 18                FALSE          0.75 351.756409544426  5.03091187398735 #> 19                FALSE          0.75 773.164719491762 0.668255419721168 #> 20                FALSE          0.75 347.903847195854  9.47752807167911 #> 21                FALSE          0.75 338.064728737589   5.1995397428779 #>                A.bt            dY.bt      integral.bt  stdmax_slope.bt #> 1  3418.11214647172 2138.38106224467 81669.0413392506  3.0182761516698 #> 2  1454.11969976142 276.357938629784 42294.2806023777  2.7699831148066 #> 3  2194.76203600654 662.239746864561 65985.4399407627 1.58394909754266 #> 4  7572.96304679935  6049.7200433695 150062.122980514 2.58040222217247 #> 5  2348.99710158214 1142.97239329388   56704.95943872 1.64311446702045 #> 6  4818.14912153881 3202.95969971951 130268.152336429 2.78573026780678 #> 7  17033.6408179951 15817.5525635798 361295.069825431 11.7699693149609 #> 8  5180.20090976115 3753.74958522042 119311.099761687 7.64423038004514 #> 9  7763.78725416434 6294.32150924792 221704.097797394 7.83279340996374 #> 10 20056.1053717756 18769.1196994065 486389.074189412 20.5640242950454 #> 11 6776.69612338501 5603.83538716945  167046.33288081 11.6243157635972 #> 12 9192.30702596943  7693.2817307622 266055.911027846 6.09318617843735 #> 13 20440.5405346592 19379.1501652637 488578.810615271 20.2063525487768 #> 14 6971.27261072962 5721.84409566675 176629.892803389 14.7551544007463 #> 15 9012.67297455358   7366.417174202   264251.8642482 6.71955901716152 #> 16 20696.1724288146 19428.5854765727 516515.139710702 22.1652822949523 #> 17 6929.36582651446 6045.05461271289 176647.391110417 11.1537139752463 #> 18 9324.10869012128 7651.79616649442 271530.885603696 6.46143732309459 #> 19 19785.8448451545 18543.2640501188 502892.403458601 27.0409536132915 #> 20 7145.14175704808 5820.04798581194 180601.928351256 14.1189520539073 #> 21 9256.85848690041  7481.3598339513 268153.757253582 6.27354169512366 #>         stdlambda.bt          stdA.bt         stddY.bt   stdintegral.bt #> 1   0.58548940901223 20.0560546432344 47.8998623201657 1141.80212124974 #> 2   2.75178644413221 20.8996975602798  85.716956744691 888.374388730273 #> 3    1.5957312320542  4.9029711584183 97.0448691220552 1162.74038639237 #> 4  0.287874364062838 31.3298271048074 62.5393017910504 1816.12107254091 #> 5   2.56823884197928 45.0411681931999 177.836008849792 1407.54770577938 #> 6  0.471228061289239 11.3076385145851  88.954737207172 2025.33979712294 #> 7  0.380651486894158 145.695041664135 195.016117667462 8341.18268104955 #> 8   0.72805555128505 41.2315485383886 106.501036597265 1820.99137519907 #> 9  0.416996777909562 23.6251003499673 55.6495267548376 3562.29467627287 #> 10  0.20342184010391 75.3235210914007 152.443964895559 9777.54845918358 #> 11 0.772440802409909 102.854317135955 264.759862359578 3237.03181584027 #> 12 0.360677261776413 9.61334806444856 84.7264072504759 4812.06967658458 #> 13 0.304035757391457 110.380124829607 219.952181586735 10048.7791078586 #> 14 0.576582574643486 39.1316340631767 178.440790296871 2969.39260178936 #> 15 0.439324937356909 15.3116727329721 126.852824861811 3791.38070622528 #> 16 0.284393858454978 102.731884043279 239.794947034235 9750.05478219761 #> 17 0.411407404696006 65.3473145208782 132.382410956458 2485.67762790191 #> 18 0.460197704202806 8.92682858484104 136.683062188699 3320.36157710457 #> 19 0.382811397825506 73.4007837893212 233.062756486221 12073.6245905446 #> 20  0.41549892755836 82.8675549174435 132.812172827708 2903.76836541271 #> 21 0.398649548654521 10.3923205081438 116.627873812513 3576.24052500821 #>    reliable_fit.bt    ci90.mu.bt.lo    ci90.mu.bt.up   ci90.lambda.bt.lo #> 1             TRUE 87.9159538470177 97.8460823860113     14.526948040736 #> 2             TRUE  28.457667842821 37.5709122905347    26.2488262684146 #> 3             TRUE 62.4372323679999 67.6484248989153    17.7806003069257 #> 4             TRUE 238.179963102725 246.669486413672    14.5112984788839 #> 5             TRUE  62.358387403046 67.7642339995433    17.2094318773239 #> 6             TRUE 201.626046100427 210.791098681511    11.7477468253898 #> 7             TRUE 490.256538928298 528.979737974519    6.56324766449817 #> 8             TRUE 187.940870946031 213.090388896379    12.2795156334955 #> 9             TRUE 276.491909123817 302.261799442598    3.90430598538057 #> 10            TRUE 636.553212445869 704.208852376569   0.182144568319044 #> 11            TRUE 306.240640519582 344.484639381817    8.56793573944523 #> 12            TRUE  322.85089415329 342.897476680349    3.01831644014281 #> 13            TRUE 689.003806869624   755.4827067551   0.250168171760799 #> 14            TRUE 318.208080718916 366.752538697371    8.65055486467777 #> 15            TRUE 307.573842715087 329.681191881548    2.73765181803573 #> 16            TRUE 735.737815101353 808.661593851746 -0.0560139593686862 #> 17            TRUE  316.63585372098  353.33157269954    7.38845283594282 #> 18            TRUE 341.127345147935 362.385473940917    4.27388665057373 #> 19            TRUE 728.682350797897 817.647088185626  0.0385306702982107 #> 20            TRUE 324.678171067177 371.129523324532    8.79403233584561 #> 21            TRUE  327.74475264911 348.384704826067    4.54376123534121 #>    ci90.lambda.bt.up     ci90.A.bt.lo     ci90.A.bt.up ci90.integral.bt.lo #> 1   16.4532081963862 3385.11993658359 3451.10435635984    79790.7768497948 #> 2   35.3022036696096 1419.73969727476 1488.49970224808    40832.9047329164 #> 3   23.0305560603841 2186.69664845094 2202.82742356214    64072.7320051473 #> 4   15.4584051366507 7521.42548121194 7624.50061238676    147074.603816184 #> 5   25.6589376674357 2274.90437990432 2423.08982325995    54389.5434627129 #> 6   13.2980871470314 4799.54805618232  4836.7501868953    126936.468370162 #> 7   7.81559105637995 16793.9724744576 17273.3091615326    347573.824315104 #> 8   14.6748183972233  5112.3750124155  5248.0268071068    116315.568949485 #> 9   5.27622538470303 7724.92396408864 7802.65054424003    215844.123054925 #> 10 0.851402422260907 19932.1981795803  20180.012563971    470305.006974055 #> 11  11.1092659793738 6607.50077169636 6945.89147507365    161721.415543753 #> 12   4.2049446313872 9176.49306840342 9208.12098353545    258140.056409864 #> 13  1.25044581357869 20258.9652293145 20622.1158400039    472048.568982844 #> 14  10.5475115352548 6906.90107269569 7035.64414876354    171745.241973445 #> 15  4.18303086193996 8987.48527290784 9037.86067619932     258015.04298646 #> 16  0.87964183494819 20527.1784795634 20865.1663780658    500476.299593987 #> 17  8.74198319739268 6821.86949412762 7036.86215890131    172558.451412518 #> 18  5.78793709740096 9309.42405709922 9338.79332314335    266068.890809359 #> 19  1.29798016914413  19665.100555821 19906.5891344879    483031.291007155 #> 20  10.1610238075126 7008.82462920888 7281.45888488727    175825.229390152 #> 21  5.85531825041459 9239.76311966451 9273.95385413631    262270.841589943 #>    ci90.integral.bt.up    ci95.mu.bt.lo    ci95.mu.bt.up   ci95.lambda.bt.lo #> 1     83547.3058287064 86.9651968592417 98.7968393737873    14.3425188768971 #> 2      43755.656471839 27.5851231616569 38.4434569716988     25.382013538513 #> 3     67898.1478763782  61.938288402274 68.1473688646412    17.2779449688287 #> 4     153049.642144844  237.36713640274 247.482313113657    14.4206180542041 #> 5     59020.3754147271 61.8408063459345 68.2818150566547    16.4004366421004 #> 6     133599.836302696 200.748541066068  211.66860371587    11.5993099860837 #> 7     375016.315335757 486.548998594085 532.687278308732    6.44334244612651 #> 8      122306.63057389 185.532938376316 215.498321466093    12.0501781348407 #> 9     227564.072539863 274.024579199679 304.729129366737    3.77295200033906 #> 10    502473.141404769  630.07554479293 710.686520029508   0.118066688686313 #> 11    172371.250217867 302.578981054049  348.14629884735    8.32461688668611 #> 12    273971.765645827 320.931540507082 344.816830326556    2.90470310268324 #> 13    505109.052247698 682.638805816759 761.847707807964    0.15439690818249 #> 14    181514.543633332 313.560207082681 371.400412333606    8.46893135366508 #> 15    270488.685509941 305.457181624681 331.797852971954     2.5992644627683 #> 16    532553.979827417 728.755751178443 815.643657774656  -0.145598024782004 #> 17    180736.330808315 313.122433818777 356.844992601743    7.25885950346358 #> 18    276992.880398033 339.091992391161 364.420826697691    4.12892437374985 #> 19    522753.515910047  720.16445040971 826.164988573813 -0.0820549200168237 #> 20    185378.627312359 320.230701170196 375.576993221513    8.66315017366472 #> 21     274036.67291722 325.768587015146 350.360870460031    4.41818662751504 #>    ci95.lambda.bt.up     ci95.A.bt.lo     ci95.A.bt.up ci95.integral.bt.lo #> 1    16.637637360225 3378.80227937098 3457.42201357245    79431.1091816011 #> 2   36.1690163995112 1413.15629254327 1495.08310697957    40553.0668004664 #> 3   23.5332113984811 2185.15221253604 2204.37185947704    63706.4687834337 #> 4   15.5490855613305 7511.55658567393 7634.36950792477    146502.525678334 #> 5   26.4679329026592 2260.71641192346 2437.27779124081    53946.1659353924 #> 6   13.4465239863375 4795.98615005022 4840.31209302739    126298.486334068 #> 7   7.93549627475161 16748.0785363334 17319.2030996568    344946.351770574 #> 8   14.9041558958781 5099.38707462591  5261.0147448964    115741.956666297 #> 9   5.40757936974454  7717.4820574784 7810.09245085027    214722.000231899 #> 10 0.915480301893638 19908.4712704365 20203.7394731148    467225.079209413 #> 11   11.352584832133 6575.10166179853 6978.29058497148    160701.750521763 #> 12  4.31855796884677 9173.46486376311 9211.14918817575     256624.25446174 #> 13    1.346217077157 20224.1954899931 20656.8855793252    468883.203563868 #> 14  10.7291350462675 6894.57460796579 7047.97061349344    170809.883303882 #> 15  4.32141821720739 8982.66209599695 9042.68385311021    256820.758063999 #> 16 0.969225900361508 20494.8179360898 20897.5269215394    497405.032337595 #> 17  8.87157652987192 6801.28509005354 7057.44656297538    171775.462959729 #> 18  5.93289937422485   9306.612106095 9341.60527414757    265022.976912571 #> 19  1.41856575945916 19641.9793089274 19929.7103813815    479228.099261134 #> 20  10.2919059696935 6982.72134940989 7307.56216468627    174910.542355047 #> 21  5.98089285824076 9236.48953870445 9277.22743509637    261144.325824566 #>    ci95.integral.bt.up #> 1     83906.9734969001 #> 2      44035.494404289 #> 3     68264.4110980918 #> 4     153621.720282694 #> 5     59463.7529420476 #> 6      134237.81833879 #> 7     377643.787880288 #> 8     122880.242857078 #> 9     228686.195362889 #> 10    505553.069169412 #> 11    173390.915239857 #> 12    275487.567593951 #> 13    508274.417666674 #> 14    182449.902302896 #> 15    271682.970432402 #> 16    535625.247083809 #> 17    181519.319261104 #> 18    278038.794294821 #> 19    526556.707656068 #> 20    186293.314347464 #> 21    275163.188682598"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFitLinear objects — summary.flFitLinear","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"Generic summary function flFitLinear objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"","code":"# S3 method for flFitLinear summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"object object class flFitLinear ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"dataframe parameters extracted linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFitLinear objects — summary.flFitLinear","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitLinear(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 'l', x_type = 'time',                        lin.R2 = 0.95, lin.RSD = 0.1,                        lin.h = 20))  summary(TestFit) #>   max_slope.linfit    lambda.linfit        dY.linfit         A.linfit #> 1 233.480098034089 15.2207558251445 5820.56714471966 7503.25945241197 #>   x.mu.start.linfit x.mu.end.linfit       r2mu.linfit reliable_fit.linfit #> 1              14.5            30.5 0.996370266149326                TRUE #>   max_slope2.linfit x.mu2.start.linfit x.mu2.end.linfit r2mu2.linfit #> 1              <NA>               <NA>             <NA>         <NA> #>   reliable_fit2.linfit #> 1                FALSE"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for flFitSpline objects — summary.flFitSpline","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"Generic summary function flFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"","code":"# S3 method for flFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"object object class flFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"dataframe parameters extracted nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.flFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for flFitSpline objects — summary.flFitSpline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file('lac_promoters.xlsx', package = 'QurvE'),                    data.fl = system.file('lac_promoters.xlsx', package = 'QurvE'),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Extract time and normalized fluorescence data for single sample time <- input$time[4,] data <- input$norm.fluorescence[4,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- flFitSpline(time = time,                        fl_data = data,                        ID = 'TestFit',                        control = fl.control(fit.opt = 's', x_type = 'time'))  summary(TestFit) #>   max_slope.spline x.max.spline    lambda.spline max_slope2.spline #> 1 242.557704041646         23.5 14.9826287460236              <NA> #>   x.max2.spline lambda2.spline        y0.spline        A.spline #> 1          <NA>           <NA> 1519.80363776351 7592.8006375136 #>          dY.spline  integral.spline reliable_fit.spline reliable_fit2.spline #> 1 6072.99699975009 151370.675832013                TRUE                FALSE #>   smooth.spline #> 1          0.75"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"Generic summary function gcBootSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"","code":"# S3 method for gcBootSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"object object class gcBootSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"dataframe statistical parameters extracted spline fit bootstrapping computation.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcBootSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcBootSpline objects — summary.gcBootSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Introduce some noise into the measurements data <- data + stats::runif(97, -0.01, 0.09)  # Perform bootstrapping spline fit TestFit <- growth.gcBootSpline(time, data, gcID = 'TestFit',               control = growth.control(fit.opt = 's', nboot.gc = 50))  summary(TestFit) #>               mu.bt        lambda.bt             A.bt            dY.bt #> 1 0.626000249018188 5.43247718886368 6.65781011345873 6.54837089534776 #>        integral.bt           stdmu.bt      stdlambda.bt           stdA.bt #> 1 56.7498934501921 0.0144667301294549 0.210194118281198 0.035555104107053 #>             stddY.bt    stdintegral.bt reliable_fit.bt     ci90.mu.bt.lo #> 1 0.0394890889605531 0.884290766485388            TRUE 0.602202477955234 #>       ci90.mu.bt.up ci90.lambda.bt.lo ci90.lambda.bt.up     ci90.A.bt.lo #> 1 0.649798020081141  5.08670786429111  5.77824651343625 6.59932196720263 #>       ci90.A.bt.up ci90.integral.bt.lo ci90.integral.bt.up     ci95.mu.bt.lo #> 1 6.71629825971483    55.2952351393237    58.2045517610606 0.597645457964456 #>       ci95.mu.bt.up ci95.lambda.bt.lo ci95.lambda.bt.up    ci95.A.bt.lo #> 1 0.654355040071919  5.02049671703253  5.84445766069483 6.5881221094089 #>       ci95.A.bt.up ci95.integral.bt.lo ci95.integral.bt.up #> 1 6.72749811750855    55.0166835478808    58.4831033525035"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFit objects — summary.gcFit","title":"Generic summary function for gcFit objects — summary.gcFit","text":"Generic summary function gcFit objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFit objects — summary.gcFit","text":"","code":"# S3 method for gcFit summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFit objects — summary.gcFit","text":"object object class gcFit ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFit objects — summary.gcFit","text":"dataframe parameters extracted fits workflow.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFit objects — summary.gcFit","text":"","code":"# \\donttest{ # Create random growth data set rnd.data1 <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1') rnd.data2 <- rdm.data(d = 35, mu = 0.6, A = 4.5, label = 'Test2')  rnd.data <- list() rnd.data[['time']] <- rbind(rnd.data1$time, rnd.data2$time) rnd.data[['data']] <- rbind(rnd.data1$data, rnd.data2$data)  # Run growth curve analysis workflow gcFit <- growth.gcFit(time = rnd.data$time,                        data = rnd.data$data,                        parallelize = FALSE,                        control = growth.control(fit.opt = 's',                                                 suppress.messages = TRUE,                                                 nboot.gc = 20)) summary(gcFit) #>    TestId AddId concentration reliability_tag used.model log.x log.y.lin #> 1   Test1     1         0.000            TRUE         NA FALSE      TRUE #> 2   Test1     1         0.017            TRUE         NA FALSE      TRUE #> 3   Test1     1         0.026            TRUE         NA FALSE      TRUE #> 4   Test1     1         0.039            TRUE         NA FALSE      TRUE #> 5   Test1     1         0.059            TRUE         NA FALSE      TRUE #> 6   Test1     1         0.088            TRUE         NA FALSE      TRUE #> 7   Test1     1         0.130            TRUE         NA FALSE      TRUE #> 8   Test1     1         0.200            TRUE         NA FALSE      TRUE #> 9   Test1     1         0.300            TRUE         NA FALSE      TRUE #> 10  Test1     1         0.440            TRUE         NA FALSE      TRUE #> 11  Test1     1         0.670            TRUE         NA FALSE      TRUE #> 12  Test1     1         1.000            TRUE         NA FALSE      TRUE #> 13  Test1     2         0.000            TRUE         NA FALSE      TRUE #> 14  Test1     2         0.017            TRUE         NA FALSE      TRUE #> 15  Test1     2         0.026            TRUE         NA FALSE      TRUE #> 16  Test1     2         0.039            TRUE         NA FALSE      TRUE #> 17  Test1     2         0.059            TRUE         NA FALSE      TRUE #> 18  Test1     2         0.088            TRUE         NA FALSE      TRUE #> 19  Test1     2         0.130            TRUE         NA FALSE      TRUE #> 20  Test1     2         0.200            TRUE         NA FALSE      TRUE #> 21  Test1     2         0.300            TRUE         NA FALSE      TRUE #> 22  Test1     2         0.440            TRUE         NA FALSE      TRUE #> 23  Test1     2         0.670            TRUE         NA FALSE      TRUE #> 24  Test1     2         1.000            TRUE         NA FALSE      TRUE #> 25  Test1     3         0.000            TRUE         NA FALSE      TRUE #> 26  Test1     3         0.026            TRUE         NA FALSE      TRUE #> 27  Test1     3         0.039            TRUE         NA FALSE      TRUE #> 28  Test1     3         0.059            TRUE         NA FALSE      TRUE #> 29  Test1     3         0.088            TRUE         NA FALSE      TRUE #> 30  Test1     3         0.130            TRUE         NA FALSE      TRUE #> 31  Test1     3         0.200            TRUE         NA FALSE      TRUE #> 32  Test1     3         0.300            TRUE         NA FALSE      TRUE #> 33  Test1     3         0.440            TRUE         NA FALSE      TRUE #> 34  Test1     3         0.670            TRUE         NA FALSE      TRUE #> 35  Test1     3         1.000            TRUE         NA FALSE      TRUE #> 36  Test2     1         0.000            TRUE         NA FALSE      TRUE #> 37  Test2     1         0.017            TRUE         NA FALSE      TRUE #> 38  Test2     1         0.026            TRUE         NA FALSE      TRUE #> 39  Test2     1         0.039            TRUE         NA FALSE      TRUE #> 40  Test2     1         0.059            TRUE         NA FALSE      TRUE #> 41  Test2     1         0.088            TRUE         NA FALSE      TRUE #> 42  Test2     1         0.130            TRUE         NA FALSE      TRUE #> 43  Test2     1         0.200            TRUE         NA FALSE      TRUE #> 44  Test2     1         0.300            TRUE         NA FALSE      TRUE #> 45  Test2     1         0.440            TRUE         NA FALSE      TRUE #> 46  Test2     1         0.670            TRUE         NA FALSE      TRUE #> 47  Test2     1         1.000            TRUE         NA FALSE      TRUE #> 48  Test2     2         0.000            TRUE         NA FALSE      TRUE #> 49  Test2     2         0.017            TRUE         NA FALSE      TRUE #> 50  Test2     2         0.026            TRUE         NA FALSE      TRUE #> 51  Test2     2         0.039            TRUE         NA FALSE      TRUE #> 52  Test2     2         0.059            TRUE         NA FALSE      TRUE #> 53  Test2     2         0.088            TRUE         NA FALSE      TRUE #> 54  Test2     2         0.130            TRUE         NA FALSE      TRUE #> 55  Test2     2         0.200            TRUE         NA FALSE      TRUE #> 56  Test2     2         0.300            TRUE         NA FALSE      TRUE #> 57  Test2     2         0.440            TRUE         NA FALSE      TRUE #> 58  Test2     2         0.670            TRUE         NA FALSE      TRUE #> 59  Test2     2         1.000            TRUE         NA FALSE      TRUE #> 60  Test2     3         0.000            TRUE         NA FALSE      TRUE #> 61  Test2     3         0.026            TRUE         NA FALSE      TRUE #> 62  Test2     3         0.039            TRUE         NA FALSE      TRUE #> 63  Test2     3         0.059            TRUE         NA FALSE      TRUE #> 64  Test2     3         0.088            TRUE         NA FALSE      TRUE #> 65  Test2     3         0.130            TRUE         NA FALSE      TRUE #> 66  Test2     3         0.200            TRUE         NA FALSE      TRUE #> 67  Test2     3         0.300            TRUE         NA FALSE      TRUE #> 68  Test2     3         0.440            TRUE         NA FALSE      TRUE #> 69  Test2     3         0.670            TRUE         NA FALSE      TRUE #> 70  Test2     3         1.000            TRUE         NA FALSE      TRUE #>    log.y.spline log.y.model nboot.gc mu.linfit tD.linfit lambda.linfit #> 1          TRUE        TRUE       20         0      <NA>          <NA> #> 2          TRUE        TRUE       20         0      <NA>          <NA> #> 3          TRUE        TRUE       20         0      <NA>          <NA> #> 4          TRUE        TRUE       20         0      <NA>          <NA> #> 5          TRUE        TRUE       20         0      <NA>          <NA> #> 6          TRUE        TRUE       20         0      <NA>          <NA> #> 7          TRUE        TRUE       20         0      <NA>          <NA> #> 8          TRUE        TRUE       20         0      <NA>          <NA> #> 9          TRUE        TRUE       20         0      <NA>          <NA> #> 10         TRUE        TRUE       20         0      <NA>          <NA> #> 11         TRUE        TRUE       20         0      <NA>          <NA> #> 12         TRUE        TRUE       20         0      <NA>          <NA> #> 13         TRUE        TRUE       20         0      <NA>          <NA> #> 14         TRUE        TRUE       20         0      <NA>          <NA> #> 15         TRUE        TRUE       20         0      <NA>          <NA> #> 16         TRUE        TRUE       20         0      <NA>          <NA> #> 17         TRUE        TRUE       20         0      <NA>          <NA> #> 18         TRUE        TRUE       20         0      <NA>          <NA> #> 19         TRUE        TRUE       20         0      <NA>          <NA> #> 20         TRUE        TRUE       20         0      <NA>          <NA> #> 21         TRUE        TRUE       20         0      <NA>          <NA> #> 22         TRUE        TRUE       20         0      <NA>          <NA> #> 23         TRUE        TRUE       20         0      <NA>          <NA> #> 24         TRUE        TRUE       20         0      <NA>          <NA> #> 25         TRUE        TRUE       20         0      <NA>          <NA> #> 26         TRUE        TRUE       20         0      <NA>          <NA> #> 27         TRUE        TRUE       20         0      <NA>          <NA> #> 28         TRUE        TRUE       20         0      <NA>          <NA> #> 29         TRUE        TRUE       20         0      <NA>          <NA> #> 30         TRUE        TRUE       20         0      <NA>          <NA> #> 31         TRUE        TRUE       20         0      <NA>          <NA> #> 32         TRUE        TRUE       20         0      <NA>          <NA> #> 33         TRUE        TRUE       20         0      <NA>          <NA> #> 34         TRUE        TRUE       20         0      <NA>          <NA> #> 35         TRUE        TRUE       20         0      <NA>          <NA> #> 36         TRUE        TRUE       20         0      <NA>          <NA> #> 37         TRUE        TRUE       20         0      <NA>          <NA> #> 38         TRUE        TRUE       20         0      <NA>          <NA> #> 39         TRUE        TRUE       20         0      <NA>          <NA> #> 40         TRUE        TRUE       20         0      <NA>          <NA> #> 41         TRUE        TRUE       20         0      <NA>          <NA> #> 42         TRUE        TRUE       20         0      <NA>          <NA> #> 43         TRUE        TRUE       20         0      <NA>          <NA> #> 44         TRUE        TRUE       20         0      <NA>          <NA> #> 45         TRUE        TRUE       20         0      <NA>          <NA> #> 46         TRUE        TRUE       20         0      <NA>          <NA> #> 47         TRUE        TRUE       20         0      <NA>          <NA> #> 48         TRUE        TRUE       20         0      <NA>          <NA> #> 49         TRUE        TRUE       20         0      <NA>          <NA> #> 50         TRUE        TRUE       20         0      <NA>          <NA> #> 51         TRUE        TRUE       20         0      <NA>          <NA> #> 52         TRUE        TRUE       20         0      <NA>          <NA> #> 53         TRUE        TRUE       20         0      <NA>          <NA> #> 54         TRUE        TRUE       20         0      <NA>          <NA> #> 55         TRUE        TRUE       20         0      <NA>          <NA> #> 56         TRUE        TRUE       20         0      <NA>          <NA> #> 57         TRUE        TRUE       20         0      <NA>          <NA> #> 58         TRUE        TRUE       20         0      <NA>          <NA> #> 59         TRUE        TRUE       20         0      <NA>          <NA> #> 60         TRUE        TRUE       20         0      <NA>          <NA> #> 61         TRUE        TRUE       20         0      <NA>          <NA> #> 62         TRUE        TRUE       20         0      <NA>          <NA> #> 63         TRUE        TRUE       20         0      <NA>          <NA> #> 64         TRUE        TRUE       20         0      <NA>          <NA> #> 65         TRUE        TRUE       20         0      <NA>          <NA> #> 66         TRUE        TRUE       20         0      <NA>          <NA> #> 67         TRUE        TRUE       20         0      <NA>          <NA> #> 68         TRUE        TRUE       20         0      <NA>          <NA> #> 69         TRUE        TRUE       20         0      <NA>          <NA> #> 70         TRUE        TRUE       20         0      <NA>          <NA> #>    dY.linfit A.linfit tmu.start.linfit tmu.end.linfit r2mu.linfit #> 1          0     <NA>             <NA>           <NA>        <NA> #> 2          0     <NA>             <NA>           <NA>        <NA> #> 3          0     <NA>             <NA>           <NA>        <NA> #> 4          0     <NA>             <NA>           <NA>        <NA> #> 5          0     <NA>             <NA>           <NA>        <NA> #> 6          0     <NA>             <NA>           <NA>        <NA> #> 7          0     <NA>             <NA>           <NA>        <NA> #> 8          0     <NA>             <NA>           <NA>        <NA> #> 9          0     <NA>             <NA>           <NA>        <NA> #> 10         0     <NA>             <NA>           <NA>        <NA> #> 11         0     <NA>             <NA>           <NA>        <NA> #> 12         0     <NA>             <NA>           <NA>        <NA> #> 13         0     <NA>             <NA>           <NA>        <NA> #> 14         0     <NA>             <NA>           <NA>        <NA> #> 15         0     <NA>             <NA>           <NA>        <NA> #> 16         0     <NA>             <NA>           <NA>        <NA> #> 17         0     <NA>             <NA>           <NA>        <NA> #> 18         0     <NA>             <NA>           <NA>        <NA> #> 19         0     <NA>             <NA>           <NA>        <NA> #> 20         0     <NA>             <NA>           <NA>        <NA> #> 21         0     <NA>             <NA>           <NA>        <NA> #> 22         0     <NA>             <NA>           <NA>        <NA> #> 23         0     <NA>             <NA>           <NA>        <NA> #> 24         0     <NA>             <NA>           <NA>        <NA> #> 25         0     <NA>             <NA>           <NA>        <NA> #> 26         0     <NA>             <NA>           <NA>        <NA> #> 27         0     <NA>             <NA>           <NA>        <NA> #> 28         0     <NA>             <NA>           <NA>        <NA> #> 29         0     <NA>             <NA>           <NA>        <NA> #> 30         0     <NA>             <NA>           <NA>        <NA> #> 31         0     <NA>             <NA>           <NA>        <NA> #> 32         0     <NA>             <NA>           <NA>        <NA> #> 33         0     <NA>             <NA>           <NA>        <NA> #> 34         0     <NA>             <NA>           <NA>        <NA> #> 35         0     <NA>             <NA>           <NA>        <NA> #> 36         0     <NA>             <NA>           <NA>        <NA> #> 37         0     <NA>             <NA>           <NA>        <NA> #> 38         0     <NA>             <NA>           <NA>        <NA> #> 39         0     <NA>             <NA>           <NA>        <NA> #> 40         0     <NA>             <NA>           <NA>        <NA> #> 41         0     <NA>             <NA>           <NA>        <NA> #> 42         0     <NA>             <NA>           <NA>        <NA> #> 43         0     <NA>             <NA>           <NA>        <NA> #> 44         0     <NA>             <NA>           <NA>        <NA> #> 45         0     <NA>             <NA>           <NA>        <NA> #> 46         0     <NA>             <NA>           <NA>        <NA> #> 47         0     <NA>             <NA>           <NA>        <NA> #> 48         0     <NA>             <NA>           <NA>        <NA> #> 49         0     <NA>             <NA>           <NA>        <NA> #> 50         0     <NA>             <NA>           <NA>        <NA> #> 51         0     <NA>             <NA>           <NA>        <NA> #> 52         0     <NA>             <NA>           <NA>        <NA> #> 53         0     <NA>             <NA>           <NA>        <NA> #> 54         0     <NA>             <NA>           <NA>        <NA> #> 55         0     <NA>             <NA>           <NA>        <NA> #> 56         0     <NA>             <NA>           <NA>        <NA> #> 57         0     <NA>             <NA>           <NA>        <NA> #> 58         0     <NA>             <NA>           <NA>        <NA> #> 59         0     <NA>             <NA>           <NA>        <NA> #> 60         0     <NA>             <NA>           <NA>        <NA> #> 61         0     <NA>             <NA>           <NA>        <NA> #> 62         0     <NA>             <NA>           <NA>        <NA> #> 63         0     <NA>             <NA>           <NA>        <NA> #> 64         0     <NA>             <NA>           <NA>        <NA> #> 65         0     <NA>             <NA>           <NA>        <NA> #> 66         0     <NA>             <NA>           <NA>        <NA> #> 67         0     <NA>             <NA>           <NA>        <NA> #> 68         0     <NA>             <NA>           <NA>        <NA> #> 69         0     <NA>             <NA>           <NA>        <NA> #> 70         0     <NA>             <NA>           <NA>        <NA> #>    reliable_fit.linfit mu2.linfit tD2.linfit tmu2.start.linfit tmu2.end.linfit #> 1                FALSE       <NA>       <NA>              <NA>            <NA> #> 2                FALSE       <NA>       <NA>              <NA>            <NA> #> 3                FALSE       <NA>       <NA>              <NA>            <NA> #> 4                FALSE       <NA>       <NA>              <NA>            <NA> #> 5                FALSE       <NA>       <NA>              <NA>            <NA> #> 6                FALSE       <NA>       <NA>              <NA>            <NA> #> 7                FALSE       <NA>       <NA>              <NA>            <NA> #> 8                FALSE       <NA>       <NA>              <NA>            <NA> #> 9                FALSE       <NA>       <NA>              <NA>            <NA> #> 10               FALSE       <NA>       <NA>              <NA>            <NA> #> 11               FALSE       <NA>       <NA>              <NA>            <NA> #> 12               FALSE       <NA>       <NA>              <NA>            <NA> #> 13               FALSE       <NA>       <NA>              <NA>            <NA> #> 14               FALSE       <NA>       <NA>              <NA>            <NA> #> 15               FALSE       <NA>       <NA>              <NA>            <NA> #> 16               FALSE       <NA>       <NA>              <NA>            <NA> #> 17               FALSE       <NA>       <NA>              <NA>            <NA> #> 18               FALSE       <NA>       <NA>              <NA>            <NA> #> 19               FALSE       <NA>       <NA>              <NA>            <NA> #> 20               FALSE       <NA>       <NA>              <NA>            <NA> #> 21               FALSE       <NA>       <NA>              <NA>            <NA> #> 22               FALSE       <NA>       <NA>              <NA>            <NA> #> 23               FALSE       <NA>       <NA>              <NA>            <NA> #> 24               FALSE       <NA>       <NA>              <NA>            <NA> #> 25               FALSE       <NA>       <NA>              <NA>            <NA> #> 26               FALSE       <NA>       <NA>              <NA>            <NA> #> 27               FALSE       <NA>       <NA>              <NA>            <NA> #> 28               FALSE       <NA>       <NA>              <NA>            <NA> #> 29               FALSE       <NA>       <NA>              <NA>            <NA> #> 30               FALSE       <NA>       <NA>              <NA>            <NA> #> 31               FALSE       <NA>       <NA>              <NA>            <NA> #> 32               FALSE       <NA>       <NA>              <NA>            <NA> #> 33               FALSE       <NA>       <NA>              <NA>            <NA> #> 34               FALSE       <NA>       <NA>              <NA>            <NA> #> 35               FALSE       <NA>       <NA>              <NA>            <NA> #> 36               FALSE       <NA>       <NA>              <NA>            <NA> #> 37               FALSE       <NA>       <NA>              <NA>            <NA> #> 38               FALSE       <NA>       <NA>              <NA>            <NA> #> 39               FALSE       <NA>       <NA>              <NA>            <NA> #> 40               FALSE       <NA>       <NA>              <NA>            <NA> #> 41               FALSE       <NA>       <NA>              <NA>            <NA> #> 42               FALSE       <NA>       <NA>              <NA>            <NA> #> 43               FALSE       <NA>       <NA>              <NA>            <NA> #> 44               FALSE       <NA>       <NA>              <NA>            <NA> #> 45               FALSE       <NA>       <NA>              <NA>            <NA> #> 46               FALSE       <NA>       <NA>              <NA>            <NA> #> 47               FALSE       <NA>       <NA>              <NA>            <NA> #> 48               FALSE       <NA>       <NA>              <NA>            <NA> #> 49               FALSE       <NA>       <NA>              <NA>            <NA> #> 50               FALSE       <NA>       <NA>              <NA>            <NA> #> 51               FALSE       <NA>       <NA>              <NA>            <NA> #> 52               FALSE       <NA>       <NA>              <NA>            <NA> #> 53               FALSE       <NA>       <NA>              <NA>            <NA> #> 54               FALSE       <NA>       <NA>              <NA>            <NA> #> 55               FALSE       <NA>       <NA>              <NA>            <NA> #> 56               FALSE       <NA>       <NA>              <NA>            <NA> #> 57               FALSE       <NA>       <NA>              <NA>            <NA> #> 58               FALSE       <NA>       <NA>              <NA>            <NA> #> 59               FALSE       <NA>       <NA>              <NA>            <NA> #> 60               FALSE       <NA>       <NA>              <NA>            <NA> #> 61               FALSE       <NA>       <NA>              <NA>            <NA> #> 62               FALSE       <NA>       <NA>              <NA>            <NA> #> 63               FALSE       <NA>       <NA>              <NA>            <NA> #> 64               FALSE       <NA>       <NA>              <NA>            <NA> #> 65               FALSE       <NA>       <NA>              <NA>            <NA> #> 66               FALSE       <NA>       <NA>              <NA>            <NA> #> 67               FALSE       <NA>       <NA>              <NA>            <NA> #> 68               FALSE       <NA>       <NA>              <NA>            <NA> #> 69               FALSE       <NA>       <NA>              <NA>            <NA> #> 70               FALSE       <NA>       <NA>              <NA>            <NA> #>    r2mu2.linfit reliable_fit2.linfit mu.model tD.model lambda.model A.model #> 1          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 2          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 3          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 4          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 5          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 6          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 7          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 8          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 9          <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 10         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 11         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 12         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 13         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 14         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 15         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 16         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 17         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 18         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 19         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 20         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 21         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 22         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 23         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 24         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 25         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 26         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 27         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 28         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 29         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 30         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 31         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 32         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 33         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 34         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 35         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 36         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 37         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 38         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 39         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 40         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 41         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 42         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 43         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 44         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 45         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 46         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 47         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 48         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 49         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 50         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 51         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 52         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 53         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 54         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 55         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 56         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 57         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 58         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 59         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 60         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 61         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 62         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 63         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 64         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 65         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 66         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 67         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 68         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 69         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #> 70         <NA>                FALSE     <NA>     <NA>         <NA>    <NA> #>    dY.model A.orig.model dY.orig.model integral.model parameter_nu.model #> 1      <NA>         <NA>          <NA>           <NA>               <NA> #> 2      <NA>         <NA>          <NA>           <NA>               <NA> #> 3      <NA>         <NA>          <NA>           <NA>               <NA> #> 4      <NA>         <NA>          <NA>           <NA>               <NA> #> 5      <NA>         <NA>          <NA>           <NA>               <NA> #> 6      <NA>         <NA>          <NA>           <NA>               <NA> #> 7      <NA>         <NA>          <NA>           <NA>               <NA> #> 8      <NA>         <NA>          <NA>           <NA>               <NA> #> 9      <NA>         <NA>          <NA>           <NA>               <NA> #> 10     <NA>         <NA>          <NA>           <NA>               <NA> #> 11     <NA>         <NA>          <NA>           <NA>               <NA> #> 12     <NA>         <NA>          <NA>           <NA>               <NA> #> 13     <NA>         <NA>          <NA>           <NA>               <NA> #> 14     <NA>         <NA>          <NA>           <NA>               <NA> #> 15     <NA>         <NA>          <NA>           <NA>               <NA> #> 16     <NA>         <NA>          <NA>           <NA>               <NA> #> 17     <NA>         <NA>          <NA>           <NA>               <NA> #> 18     <NA>         <NA>          <NA>           <NA>               <NA> #> 19     <NA>         <NA>          <NA>           <NA>               <NA> #> 20     <NA>         <NA>          <NA>           <NA>               <NA> #> 21     <NA>         <NA>          <NA>           <NA>               <NA> #> 22     <NA>         <NA>          <NA>           <NA>               <NA> #> 23     <NA>         <NA>          <NA>           <NA>               <NA> #> 24     <NA>         <NA>          <NA>           <NA>               <NA> #> 25     <NA>         <NA>          <NA>           <NA>               <NA> #> 26     <NA>         <NA>          <NA>           <NA>               <NA> #> 27     <NA>         <NA>          <NA>           <NA>               <NA> #> 28     <NA>         <NA>          <NA>           <NA>               <NA> #> 29     <NA>         <NA>          <NA>           <NA>               <NA> #> 30     <NA>         <NA>          <NA>           <NA>               <NA> #> 31     <NA>         <NA>          <NA>           <NA>               <NA> #> 32     <NA>         <NA>          <NA>           <NA>               <NA> #> 33     <NA>         <NA>          <NA>           <NA>               <NA> #> 34     <NA>         <NA>          <NA>           <NA>               <NA> #> 35     <NA>         <NA>          <NA>           <NA>               <NA> #> 36     <NA>         <NA>          <NA>           <NA>               <NA> #> 37     <NA>         <NA>          <NA>           <NA>               <NA> #> 38     <NA>         <NA>          <NA>           <NA>               <NA> #> 39     <NA>         <NA>          <NA>           <NA>               <NA> #> 40     <NA>         <NA>          <NA>           <NA>               <NA> #> 41     <NA>         <NA>          <NA>           <NA>               <NA> #> 42     <NA>         <NA>          <NA>           <NA>               <NA> #> 43     <NA>         <NA>          <NA>           <NA>               <NA> #> 44     <NA>         <NA>          <NA>           <NA>               <NA> #> 45     <NA>         <NA>          <NA>           <NA>               <NA> #> 46     <NA>         <NA>          <NA>           <NA>               <NA> #> 47     <NA>         <NA>          <NA>           <NA>               <NA> #> 48     <NA>         <NA>          <NA>           <NA>               <NA> #> 49     <NA>         <NA>          <NA>           <NA>               <NA> #> 50     <NA>         <NA>          <NA>           <NA>               <NA> #> 51     <NA>         <NA>          <NA>           <NA>               <NA> #> 52     <NA>         <NA>          <NA>           <NA>               <NA> #> 53     <NA>         <NA>          <NA>           <NA>               <NA> #> 54     <NA>         <NA>          <NA>           <NA>               <NA> #> 55     <NA>         <NA>          <NA>           <NA>               <NA> #> 56     <NA>         <NA>          <NA>           <NA>               <NA> #> 57     <NA>         <NA>          <NA>           <NA>               <NA> #> 58     <NA>         <NA>          <NA>           <NA>               <NA> #> 59     <NA>         <NA>          <NA>           <NA>               <NA> #> 60     <NA>         <NA>          <NA>           <NA>               <NA> #> 61     <NA>         <NA>          <NA>           <NA>               <NA> #> 62     <NA>         <NA>          <NA>           <NA>               <NA> #> 63     <NA>         <NA>          <NA>           <NA>               <NA> #> 64     <NA>         <NA>          <NA>           <NA>               <NA> #> 65     <NA>         <NA>          <NA>           <NA>               <NA> #> 66     <NA>         <NA>          <NA>           <NA>               <NA> #> 67     <NA>         <NA>          <NA>           <NA>               <NA> #> 68     <NA>         <NA>          <NA>           <NA>               <NA> #> 69     <NA>         <NA>          <NA>           <NA>               <NA> #> 70     <NA>         <NA>          <NA>           <NA>               <NA> #>    parameter_alpha.model parameter_t_shift.model parameter_y0.model stdmu.model #> 1                   <NA>                    <NA>               <NA>        <NA> #> 2                   <NA>                    <NA>               <NA>        <NA> #> 3                   <NA>                    <NA>               <NA>        <NA> #> 4                   <NA>                    <NA>               <NA>        <NA> #> 5                   <NA>                    <NA>               <NA>        <NA> #> 6                   <NA>                    <NA>               <NA>        <NA> #> 7                   <NA>                    <NA>               <NA>        <NA> #> 8                   <NA>                    <NA>               <NA>        <NA> #> 9                   <NA>                    <NA>               <NA>        <NA> #> 10                  <NA>                    <NA>               <NA>        <NA> #> 11                  <NA>                    <NA>               <NA>        <NA> #> 12                  <NA>                    <NA>               <NA>        <NA> #> 13                  <NA>                    <NA>               <NA>        <NA> #> 14                  <NA>                    <NA>               <NA>        <NA> #> 15                  <NA>                    <NA>               <NA>        <NA> #> 16                  <NA>                    <NA>               <NA>        <NA> #> 17                  <NA>                    <NA>               <NA>        <NA> #> 18                  <NA>                    <NA>               <NA>        <NA> #> 19                  <NA>                    <NA>               <NA>        <NA> #> 20                  <NA>                    <NA>               <NA>        <NA> #> 21                  <NA>                    <NA>               <NA>        <NA> #> 22                  <NA>                    <NA>               <NA>        <NA> #> 23                  <NA>                    <NA>               <NA>        <NA> #> 24                  <NA>                    <NA>               <NA>        <NA> #> 25                  <NA>                    <NA>               <NA>        <NA> #> 26                  <NA>                    <NA>               <NA>        <NA> #> 27                  <NA>                    <NA>               <NA>        <NA> #> 28                  <NA>                    <NA>               <NA>        <NA> #> 29                  <NA>                    <NA>               <NA>        <NA> #> 30                  <NA>                    <NA>               <NA>        <NA> #> 31                  <NA>                    <NA>               <NA>        <NA> #> 32                  <NA>                    <NA>               <NA>        <NA> #> 33                  <NA>                    <NA>               <NA>        <NA> #> 34                  <NA>                    <NA>               <NA>        <NA> #> 35                  <NA>                    <NA>               <NA>        <NA> #> 36                  <NA>                    <NA>               <NA>        <NA> #> 37                  <NA>                    <NA>               <NA>        <NA> #> 38                  <NA>                    <NA>               <NA>        <NA> #> 39                  <NA>                    <NA>               <NA>        <NA> #> 40                  <NA>                    <NA>               <NA>        <NA> #> 41                  <NA>                    <NA>               <NA>        <NA> #> 42                  <NA>                    <NA>               <NA>        <NA> #> 43                  <NA>                    <NA>               <NA>        <NA> #> 44                  <NA>                    <NA>               <NA>        <NA> #> 45                  <NA>                    <NA>               <NA>        <NA> #> 46                  <NA>                    <NA>               <NA>        <NA> #> 47                  <NA>                    <NA>               <NA>        <NA> #> 48                  <NA>                    <NA>               <NA>        <NA> #> 49                  <NA>                    <NA>               <NA>        <NA> #> 50                  <NA>                    <NA>               <NA>        <NA> #> 51                  <NA>                    <NA>               <NA>        <NA> #> 52                  <NA>                    <NA>               <NA>        <NA> #> 53                  <NA>                    <NA>               <NA>        <NA> #> 54                  <NA>                    <NA>               <NA>        <NA> #> 55                  <NA>                    <NA>               <NA>        <NA> #> 56                  <NA>                    <NA>               <NA>        <NA> #> 57                  <NA>                    <NA>               <NA>        <NA> #> 58                  <NA>                    <NA>               <NA>        <NA> #> 59                  <NA>                    <NA>               <NA>        <NA> #> 60                  <NA>                    <NA>               <NA>        <NA> #> 61                  <NA>                    <NA>               <NA>        <NA> #> 62                  <NA>                    <NA>               <NA>        <NA> #> 63                  <NA>                    <NA>               <NA>        <NA> #> 64                  <NA>                    <NA>               <NA>        <NA> #> 65                  <NA>                    <NA>               <NA>        <NA> #> 66                  <NA>                    <NA>               <NA>        <NA> #> 67                  <NA>                    <NA>               <NA>        <NA> #> 68                  <NA>                    <NA>               <NA>        <NA> #> 69                  <NA>                    <NA>               <NA>        <NA> #> 70                  <NA>                    <NA>               <NA>        <NA> #>    stdlambda.model stdA.model reliable_fit.model ci90.mu.model.lo #> 1             <NA>       <NA>              FALSE             <NA> #> 2             <NA>       <NA>              FALSE             <NA> #> 3             <NA>       <NA>              FALSE             <NA> #> 4             <NA>       <NA>              FALSE             <NA> #> 5             <NA>       <NA>              FALSE             <NA> #> 6             <NA>       <NA>              FALSE             <NA> #> 7             <NA>       <NA>              FALSE             <NA> #> 8             <NA>       <NA>              FALSE             <NA> #> 9             <NA>       <NA>              FALSE             <NA> #> 10            <NA>       <NA>              FALSE             <NA> #> 11            <NA>       <NA>              FALSE             <NA> #> 12            <NA>       <NA>              FALSE             <NA> #> 13            <NA>       <NA>              FALSE             <NA> #> 14            <NA>       <NA>              FALSE             <NA> #> 15            <NA>       <NA>              FALSE             <NA> #> 16            <NA>       <NA>              FALSE             <NA> #> 17            <NA>       <NA>              FALSE             <NA> #> 18            <NA>       <NA>              FALSE             <NA> #> 19            <NA>       <NA>              FALSE             <NA> #> 20            <NA>       <NA>              FALSE             <NA> #> 21            <NA>       <NA>              FALSE             <NA> #> 22            <NA>       <NA>              FALSE             <NA> #> 23            <NA>       <NA>              FALSE             <NA> #> 24            <NA>       <NA>              FALSE             <NA> #> 25            <NA>       <NA>              FALSE             <NA> #> 26            <NA>       <NA>              FALSE             <NA> #> 27            <NA>       <NA>              FALSE             <NA> #> 28            <NA>       <NA>              FALSE             <NA> #> 29            <NA>       <NA>              FALSE             <NA> #> 30            <NA>       <NA>              FALSE             <NA> #> 31            <NA>       <NA>              FALSE             <NA> #> 32            <NA>       <NA>              FALSE             <NA> #> 33            <NA>       <NA>              FALSE             <NA> #> 34            <NA>       <NA>              FALSE             <NA> #> 35            <NA>       <NA>              FALSE             <NA> #> 36            <NA>       <NA>              FALSE             <NA> #> 37            <NA>       <NA>              FALSE             <NA> #> 38            <NA>       <NA>              FALSE             <NA> #> 39            <NA>       <NA>              FALSE             <NA> #> 40            <NA>       <NA>              FALSE             <NA> #> 41            <NA>       <NA>              FALSE             <NA> #> 42            <NA>       <NA>              FALSE             <NA> #> 43            <NA>       <NA>              FALSE             <NA> #> 44            <NA>       <NA>              FALSE             <NA> #> 45            <NA>       <NA>              FALSE             <NA> #> 46            <NA>       <NA>              FALSE             <NA> #> 47            <NA>       <NA>              FALSE             <NA> #> 48            <NA>       <NA>              FALSE             <NA> #> 49            <NA>       <NA>              FALSE             <NA> #> 50            <NA>       <NA>              FALSE             <NA> #> 51            <NA>       <NA>              FALSE             <NA> #> 52            <NA>       <NA>              FALSE             <NA> #> 53            <NA>       <NA>              FALSE             <NA> #> 54            <NA>       <NA>              FALSE             <NA> #> 55            <NA>       <NA>              FALSE             <NA> #> 56            <NA>       <NA>              FALSE             <NA> #> 57            <NA>       <NA>              FALSE             <NA> #> 58            <NA>       <NA>              FALSE             <NA> #> 59            <NA>       <NA>              FALSE             <NA> #> 60            <NA>       <NA>              FALSE             <NA> #> 61            <NA>       <NA>              FALSE             <NA> #> 62            <NA>       <NA>              FALSE             <NA> #> 63            <NA>       <NA>              FALSE             <NA> #> 64            <NA>       <NA>              FALSE             <NA> #> 65            <NA>       <NA>              FALSE             <NA> #> 66            <NA>       <NA>              FALSE             <NA> #> 67            <NA>       <NA>              FALSE             <NA> #> 68            <NA>       <NA>              FALSE             <NA> #> 69            <NA>       <NA>              FALSE             <NA> #> 70            <NA>       <NA>              FALSE             <NA> #>    ci90.mu.model.up ci90.lambda.model.lo ci90.lambda.model.up ci90.A.model.lo #> 1              <NA>                 <NA>                 <NA>            <NA> #> 2              <NA>                 <NA>                 <NA>            <NA> #> 3              <NA>                 <NA>                 <NA>            <NA> #> 4              <NA>                 <NA>                 <NA>            <NA> #> 5              <NA>                 <NA>                 <NA>            <NA> #> 6              <NA>                 <NA>                 <NA>            <NA> #> 7              <NA>                 <NA>                 <NA>            <NA> #> 8              <NA>                 <NA>                 <NA>            <NA> #> 9              <NA>                 <NA>                 <NA>            <NA> #> 10             <NA>                 <NA>                 <NA>            <NA> #> 11             <NA>                 <NA>                 <NA>            <NA> #> 12             <NA>                 <NA>                 <NA>            <NA> #> 13             <NA>                 <NA>                 <NA>            <NA> #> 14             <NA>                 <NA>                 <NA>            <NA> #> 15             <NA>                 <NA>                 <NA>            <NA> #> 16             <NA>                 <NA>                 <NA>            <NA> #> 17             <NA>                 <NA>                 <NA>            <NA> #> 18             <NA>                 <NA>                 <NA>            <NA> #> 19             <NA>                 <NA>                 <NA>            <NA> #> 20             <NA>                 <NA>                 <NA>            <NA> #> 21             <NA>                 <NA>                 <NA>            <NA> #> 22             <NA>                 <NA>                 <NA>            <NA> #> 23             <NA>                 <NA>                 <NA>            <NA> #> 24             <NA>                 <NA>                 <NA>            <NA> #> 25             <NA>                 <NA>                 <NA>            <NA> #> 26             <NA>                 <NA>                 <NA>            <NA> #> 27             <NA>                 <NA>                 <NA>            <NA> #> 28             <NA>                 <NA>                 <NA>            <NA> #> 29             <NA>                 <NA>                 <NA>            <NA> #> 30             <NA>                 <NA>                 <NA>            <NA> #> 31             <NA>                 <NA>                 <NA>            <NA> #> 32             <NA>                 <NA>                 <NA>            <NA> #> 33             <NA>                 <NA>                 <NA>            <NA> #> 34             <NA>                 <NA>                 <NA>            <NA> #> 35             <NA>                 <NA>                 <NA>            <NA> #> 36             <NA>                 <NA>                 <NA>            <NA> #> 37             <NA>                 <NA>                 <NA>            <NA> #> 38             <NA>                 <NA>                 <NA>            <NA> #> 39             <NA>                 <NA>                 <NA>            <NA> #> 40             <NA>                 <NA>                 <NA>            <NA> #> 41             <NA>                 <NA>                 <NA>            <NA> #> 42             <NA>                 <NA>                 <NA>            <NA> #> 43             <NA>                 <NA>                 <NA>            <NA> #> 44             <NA>                 <NA>                 <NA>            <NA> #> 45             <NA>                 <NA>                 <NA>            <NA> #> 46             <NA>                 <NA>                 <NA>            <NA> #> 47             <NA>                 <NA>                 <NA>            <NA> #> 48             <NA>                 <NA>                 <NA>            <NA> #> 49             <NA>                 <NA>                 <NA>            <NA> #> 50             <NA>                 <NA>                 <NA>            <NA> #> 51             <NA>                 <NA>                 <NA>            <NA> #> 52             <NA>                 <NA>                 <NA>            <NA> #> 53             <NA>                 <NA>                 <NA>            <NA> #> 54             <NA>                 <NA>                 <NA>            <NA> #> 55             <NA>                 <NA>                 <NA>            <NA> #> 56             <NA>                 <NA>                 <NA>            <NA> #> 57             <NA>                 <NA>                 <NA>            <NA> #> 58             <NA>                 <NA>                 <NA>            <NA> #> 59             <NA>                 <NA>                 <NA>            <NA> #> 60             <NA>                 <NA>                 <NA>            <NA> #> 61             <NA>                 <NA>                 <NA>            <NA> #> 62             <NA>                 <NA>                 <NA>            <NA> #> 63             <NA>                 <NA>                 <NA>            <NA> #> 64             <NA>                 <NA>                 <NA>            <NA> #> 65             <NA>                 <NA>                 <NA>            <NA> #> 66             <NA>                 <NA>                 <NA>            <NA> #> 67             <NA>                 <NA>                 <NA>            <NA> #> 68             <NA>                 <NA>                 <NA>            <NA> #> 69             <NA>                 <NA>                 <NA>            <NA> #> 70             <NA>                 <NA>                 <NA>            <NA> #>    ci90.A.model.up ci95.mu.model.lo ci95.mu.model.up ci95.lambda.model.lo #> 1             <NA>             <NA>             <NA>                 <NA> #> 2             <NA>             <NA>             <NA>                 <NA> #> 3             <NA>             <NA>             <NA>                 <NA> #> 4             <NA>             <NA>             <NA>                 <NA> #> 5             <NA>             <NA>             <NA>                 <NA> #> 6             <NA>             <NA>             <NA>                 <NA> #> 7             <NA>             <NA>             <NA>                 <NA> #> 8             <NA>             <NA>             <NA>                 <NA> #> 9             <NA>             <NA>             <NA>                 <NA> #> 10            <NA>             <NA>             <NA>                 <NA> #> 11            <NA>             <NA>             <NA>                 <NA> #> 12            <NA>             <NA>             <NA>                 <NA> #> 13            <NA>             <NA>             <NA>                 <NA> #> 14            <NA>             <NA>             <NA>                 <NA> #> 15            <NA>             <NA>             <NA>                 <NA> #> 16            <NA>             <NA>             <NA>                 <NA> #> 17            <NA>             <NA>             <NA>                 <NA> #> 18            <NA>             <NA>             <NA>                 <NA> #> 19            <NA>             <NA>             <NA>                 <NA> #> 20            <NA>             <NA>             <NA>                 <NA> #> 21            <NA>             <NA>             <NA>                 <NA> #> 22            <NA>             <NA>             <NA>                 <NA> #> 23            <NA>             <NA>             <NA>                 <NA> #> 24            <NA>             <NA>             <NA>                 <NA> #> 25            <NA>             <NA>             <NA>                 <NA> #> 26            <NA>             <NA>             <NA>                 <NA> #> 27            <NA>             <NA>             <NA>                 <NA> #> 28            <NA>             <NA>             <NA>                 <NA> #> 29            <NA>             <NA>             <NA>                 <NA> #> 30            <NA>             <NA>             <NA>                 <NA> #> 31            <NA>             <NA>             <NA>                 <NA> #> 32            <NA>             <NA>             <NA>                 <NA> #> 33            <NA>             <NA>             <NA>                 <NA> #> 34            <NA>             <NA>             <NA>                 <NA> #> 35            <NA>             <NA>             <NA>                 <NA> #> 36            <NA>             <NA>             <NA>                 <NA> #> 37            <NA>             <NA>             <NA>                 <NA> #> 38            <NA>             <NA>             <NA>                 <NA> #> 39            <NA>             <NA>             <NA>                 <NA> #> 40            <NA>             <NA>             <NA>                 <NA> #> 41            <NA>             <NA>             <NA>                 <NA> #> 42            <NA>             <NA>             <NA>                 <NA> #> 43            <NA>             <NA>             <NA>                 <NA> #> 44            <NA>             <NA>             <NA>                 <NA> #> 45            <NA>             <NA>             <NA>                 <NA> #> 46            <NA>             <NA>             <NA>                 <NA> #> 47            <NA>             <NA>             <NA>                 <NA> #> 48            <NA>             <NA>             <NA>                 <NA> #> 49            <NA>             <NA>             <NA>                 <NA> #> 50            <NA>             <NA>             <NA>                 <NA> #> 51            <NA>             <NA>             <NA>                 <NA> #> 52            <NA>             <NA>             <NA>                 <NA> #> 53            <NA>             <NA>             <NA>                 <NA> #> 54            <NA>             <NA>             <NA>                 <NA> #> 55            <NA>             <NA>             <NA>                 <NA> #> 56            <NA>             <NA>             <NA>                 <NA> #> 57            <NA>             <NA>             <NA>                 <NA> #> 58            <NA>             <NA>             <NA>                 <NA> #> 59            <NA>             <NA>             <NA>                 <NA> #> 60            <NA>             <NA>             <NA>                 <NA> #> 61            <NA>             <NA>             <NA>                 <NA> #> 62            <NA>             <NA>             <NA>                 <NA> #> 63            <NA>             <NA>             <NA>                 <NA> #> 64            <NA>             <NA>             <NA>                 <NA> #> 65            <NA>             <NA>             <NA>                 <NA> #> 66            <NA>             <NA>             <NA>                 <NA> #> 67            <NA>             <NA>             <NA>                 <NA> #> 68            <NA>             <NA>             <NA>                 <NA> #> 69            <NA>             <NA>             <NA>                 <NA> #> 70            <NA>             <NA>             <NA>                 <NA> #>    ci95.lambda.model.up ci95.A.model.lo ci95.A.model.up          mu.spline #> 1                  <NA>            <NA>            <NA>  0.665933586629282 #> 2                  <NA>            <NA>            <NA>  0.616745140871516 #> 3                  <NA>            <NA>            <NA>  0.607545481198608 #> 4                  <NA>            <NA>            <NA>  0.573570560735417 #> 5                  <NA>            <NA>            <NA>  0.536813007067618 #> 6                  <NA>            <NA>            <NA>  0.477171748520714 #> 7                  <NA>            <NA>            <NA>  0.385429411482612 #> 8                  <NA>            <NA>            <NA>  0.266559010991162 #> 9                  <NA>            <NA>            <NA>   0.15364497103684 #> 10                 <NA>            <NA>            <NA>  0.073825097804364 #> 11                 <NA>            <NA>            <NA> 0.0323105072471724 #> 12                 <NA>            <NA>            <NA>                  0 #> 13                 <NA>            <NA>            <NA>  0.675058540196861 #> 14                 <NA>            <NA>            <NA>  0.614258723830295 #> 15                 <NA>            <NA>            <NA>  0.599829866207794 #> 16                 <NA>            <NA>            <NA>  0.574521397454746 #> 17                 <NA>            <NA>            <NA>  0.521336948245458 #> 18                 <NA>            <NA>            <NA>  0.471137828394357 #> 19                 <NA>            <NA>            <NA>  0.372396840732682 #> 20                 <NA>            <NA>            <NA>  0.255147331823803 #> 21                 <NA>            <NA>            <NA>  0.149141189795257 #> 22                 <NA>            <NA>            <NA> 0.0691669943152167 #> 23                 <NA>            <NA>            <NA>  0.035710755045878 #> 24                 <NA>            <NA>            <NA>                  0 #> 25                 <NA>            <NA>            <NA>  0.662314462261701 #> 26                 <NA>            <NA>            <NA>  0.610222635836629 #> 27                 <NA>            <NA>            <NA>   0.56924185098661 #> 28                 <NA>            <NA>            <NA>  0.536830053737104 #> 29                 <NA>            <NA>            <NA>  0.459757814683928 #> 30                 <NA>            <NA>            <NA>  0.386380851402154 #> 31                 <NA>            <NA>            <NA>  0.272745220689346 #> 32                 <NA>            <NA>            <NA>  0.149775694916135 #> 33                 <NA>            <NA>            <NA> 0.0733105539290461 #> 34                 <NA>            <NA>            <NA> 0.0319571252362804 #> 35                 <NA>            <NA>            <NA>                  0 #> 36                 <NA>            <NA>            <NA>  0.479133402278524 #> 37                 <NA>            <NA>            <NA>  0.430797018203647 #> 38                 <NA>            <NA>            <NA>  0.422065867282025 #> 39                 <NA>            <NA>            <NA>  0.386539114132051 #> 40                 <NA>            <NA>            <NA>  0.349270651930199 #> 41                 <NA>            <NA>            <NA>  0.283722731303509 #> 42                 <NA>            <NA>            <NA>  0.211338323818295 #> 43                 <NA>            <NA>            <NA>  0.111888191725716 #> 44                 <NA>            <NA>            <NA> 0.0409260917736568 #> 45                 <NA>            <NA>            <NA>                  0 #> 46                 <NA>            <NA>            <NA>                  0 #> 47                 <NA>            <NA>            <NA>                  0 #> 48                 <NA>            <NA>            <NA>  0.471571412073112 #> 49                 <NA>            <NA>            <NA>  0.439780322544522 #> 50                 <NA>            <NA>            <NA>  0.428210388555982 #> 51                 <NA>            <NA>            <NA>  0.396630573239574 #> 52                 <NA>            <NA>            <NA>   0.35300633867679 #> 53                 <NA>            <NA>            <NA>  0.295359080238805 #> 54                 <NA>            <NA>            <NA>  0.218838962827081 #> 55                 <NA>            <NA>            <NA>  0.118657060817216 #> 56                 <NA>            <NA>            <NA> 0.0387608590640412 #> 57                 <NA>            <NA>            <NA>                  0 #> 58                 <NA>            <NA>            <NA>                  0 #> 59                 <NA>            <NA>            <NA>                  0 #> 60                 <NA>            <NA>            <NA>  0.474516815323133 #> 61                 <NA>            <NA>            <NA>  0.416854692476913 #> 62                 <NA>            <NA>            <NA>  0.390750916595673 #> 63                 <NA>            <NA>            <NA>  0.345981057949047 #> 64                 <NA>            <NA>            <NA>  0.292468857383656 #> 65                 <NA>            <NA>            <NA>  0.214196489756433 #> 66                 <NA>            <NA>            <NA>  0.121804376645545 #> 67                 <NA>            <NA>            <NA> 0.0400322819079904 #> 68                 <NA>            <NA>            <NA>                  0 #> 69                 <NA>            <NA>            <NA>                  0 #> 70                 <NA>            <NA>            <NA>                  0 #>           tD.spline tmax.spline     lambda.spline mu2.spline tD2.spline #> 1  1.04086532722941        8.25   4.5022055663503       <NA>       <NA> #> 2  1.12387943515934        7.75  4.44673656439621       <NA>       <NA> #> 3   1.1408975986332           8  4.54449817178329       <NA>       <NA> #> 4  1.20847761027206           8  4.61472188378668       <NA>       <NA> #> 5  1.29122650053939           8  4.29621246264284       <NA>       <NA> #> 6  1.45261571480034        8.25  4.50876472530975       <NA>       <NA> #> 7  1.79837645989093        8.25  4.45998170960701       <NA>       <NA> #> 8  2.60035171192516        9.25  4.16840456512363       <NA>       <NA> #> 9   4.5113561210783       10.75  3.08951983301061       <NA>       <NA> #> 10 9.38904520515206         8.5  1.80779330966085       <NA>       <NA> #> 11 21.4526864359459         6.5  1.88360338405806       <NA>       <NA> #> 12             <NA>        <NA>              <NA>       <NA>       <NA> #> 13 1.02679566183669        7.75  4.18688977858468       <NA>       <NA> #> 14 1.12842871198919        7.75  4.51382276878114       <NA>       <NA> #> 15 1.15557297095277        7.75  4.30241580783157       <NA>       <NA> #> 16 1.20647757182019         7.5  4.15414400862391       <NA>       <NA> #> 17 1.32955698400566           8  4.32333102218137       <NA>       <NA> #> 18 1.47121954295667           8  4.54624454144371       <NA>       <NA> #> 19 1.86131326784673        8.75  4.45755797280114       <NA>       <NA> #> 20  2.7166546308962        8.75  3.97502259419392       <NA>       <NA> #> 21  4.6475905248678       10.75  3.07413038187406       <NA>       <NA> #> 22 10.0213575480965        10.5  2.16670875088362       <NA>       <NA> #> 23 19.4100399072899        6.75  2.20434068069663       <NA>       <NA> #> 24             <NA>        <NA>              <NA>       <NA>       <NA> #> 25 1.04655298963721           8  4.38983911272289       <NA>       <NA> #> 26 1.13589227906897        7.75  4.48163090040393       <NA>       <NA> #> 27 1.21766728739038        7.75  4.56320843674111       <NA>       <NA> #> 28  1.2911854985291        7.75  4.33219153490939       <NA>       <NA> #> 29 1.50763545158328        8.25  4.58546766551689       <NA>       <NA> #> 30 1.79394806457037           9  4.67446403779784       <NA>       <NA> #> 31 2.54137241638207        8.25   3.8724737245829       <NA>       <NA> #> 32 4.62790161613381          10  3.42796218446003       <NA>       <NA> #> 33 9.45494398024616        12.5  2.20912830167869       <NA>       <NA> #> 34 21.6899103231296           2 0.663922089016433       <NA>       <NA> #> 35             <NA>        <NA>              <NA>       <NA>       <NA> #> 36 1.44666845864571        8.75  3.97958744233801       <NA>       <NA> #> 37 1.60898787890932        8.25  4.03498175168271       <NA>       <NA> #> 38 1.64227253206615        8.75  4.13202701457885       <NA>       <NA> #> 39 1.79321355903752         8.5   3.8127634638183       <NA>       <NA> #> 40 1.98455603621248         8.5  3.81861214874472       <NA>       <NA> #> 41 2.44304422622542        8.75  3.54187228983897       <NA>       <NA> #> 42 3.27979879861214         9.5  3.56068474682633       <NA>       <NA> #> 43 6.19499850582209          10  2.18213829157073       <NA>       <NA> #> 44 16.9365593077741          19  3.95457568506505       <NA>       <NA> #> 45             <NA>        <NA>              <NA>       <NA>       <NA> #> 46             <NA>        <NA>              <NA>       <NA>       <NA> #> 47             <NA>        <NA>              <NA>       <NA>       <NA> #> 48 1.46986683843439         8.5  3.75691449046644       <NA>       <NA> #> 49 1.57612140659107        8.75  4.35014933393515       <NA>       <NA> #> 50 1.61870706336058        8.75  4.32326632268927       <NA>       <NA> #> 51 1.74758888327368           8  3.93257983105154       <NA>       <NA> #> 52 1.96355448788296           9  4.22800367899614       <NA>       <NA> #> 53 2.34679489115255        9.25  4.09056787924069       <NA>       <NA> #> 54 3.16738469057562          10  3.42740554367691       <NA>       <NA> #> 55 5.84160079295823        11.5  2.61007389464446       <NA>       <NA> #> 56 17.8826578485972          21  3.39654298626787       <NA>       <NA> #> 57             <NA>        <NA>              <NA>       <NA>       <NA> #> 58             <NA>        <NA>              <NA>       <NA>       <NA> #> 59             <NA>        <NA>              <NA>       <NA>       <NA> #> 60 1.46074313528369         8.5  3.87565401283809       <NA>       <NA> #> 61 1.66280287368562           8  3.78484693182342       <NA>       <NA> #> 62 1.77388497664658           8  3.95599203325372       <NA>       <NA> #> 63 2.00342522989228         8.5  3.96989138813848       <NA>       <NA> #> 64 2.36998628421721        8.75  3.70984887418279       <NA>       <NA> #> 65 3.23603426623909          10  3.56247345101565       <NA>       <NA> #> 66 5.69065906865588        10.5  2.43313769137434       <NA>       <NA> #> 67 17.3147057205748       16.75  4.11850540633999       <NA>       <NA> #> 68             <NA>        <NA>              <NA>       <NA>       <NA> #> 69             <NA>        <NA>              <NA>       <NA>       <NA> #> 70             <NA>        <NA>              <NA>       <NA>       <NA> #>    tmax2.spline lambda2.spline          y0.spline           A.spline #> 1          <NA>           <NA> 0.0569080695045452   6.88039823927252 #> 2          <NA>           <NA> 0.0505729010591858   3.59433418736522 #> 3          <NA>           <NA> 0.0556167284698672   3.78151831332417 #> 4          <NA>           <NA> 0.0524429301926284   2.61909014983528 #> 5          <NA>           <NA>  0.051833958456402   2.36673643417244 #> 6          <NA>           <NA> 0.0514627814397732   1.73699622415508 #> 7          <NA>           <NA>  0.050290104141971   1.09125135023755 #> 8          <NA>           <NA> 0.0520383813301779  0.765831259466438 #> 9          <NA>           <NA> 0.0526215455909746  0.456592767887868 #> 10         <NA>           <NA> 0.0474125826257684  0.185288623137227 #> 11         <NA>           <NA> 0.0576038265344307 0.0960340247067911 #> 12         <NA>           <NA>               <NA>               <NA> #> 13         <NA>           <NA> 0.0494687739401138   6.19516361496594 #> 14         <NA>           <NA> 0.0547925036210488   3.78616337755011 #> 15         <NA>           <NA> 0.0569277646938433   3.48323462918326 #> 16         <NA>           <NA> 0.0487915326960255    2.6500421559432 #> 17         <NA>           <NA> 0.0552071012024031   2.36126582771364 #> 18         <NA>           <NA> 0.0540365441360187    1.5910432642764 #> 19         <NA>           <NA> 0.0527515514005492   1.21140418078167 #> 20         <NA>           <NA>  0.052045377125214  0.733480990009117 #> 21         <NA>           <NA> 0.0489702529452462  0.430879611615724 #> 22         <NA>           <NA> 0.0507708720937781  0.179320659700789 #> 23         <NA>           <NA> 0.0485554982336261 0.0810488709204597 #> 24         <NA>           <NA>               <NA>               <NA> #> 25         <NA>           <NA> 0.0494133623638522   5.75330586281721 #> 26         <NA>           <NA> 0.0500867246038328   3.42415312778015 #> 27         <NA>           <NA> 0.0517662461189645   2.60873334391461 #> 28         <NA>           <NA> 0.0525672460579121   2.17171743909617 #> 29         <NA>           <NA>  0.055675750683329      1.69885239833 #> 30         <NA>           <NA> 0.0522407212319513   1.27100380114696 #> 31         <NA>           <NA> 0.0502360252983181  0.803537327729752 #> 32         <NA>           <NA> 0.0551016249378946  0.477761855608493 #> 33         <NA>           <NA> 0.0556638642263512  0.215045093878971 #> 34         <NA>           <NA>  0.049537569164597 0.0822256898854805 #> 35         <NA>           <NA>               <NA>               <NA> #> 36         <NA>           <NA> 0.0558742138078934   4.30136159312792 #> 37         <NA>           <NA> 0.0562176839356976   2.54104304335405 #> 38         <NA>           <NA>  0.049068812596158   2.21858283120008 #> 39         <NA>           <NA> 0.0517238478272906   1.81496098103671 #> 40         <NA>           <NA> 0.0524557120874427   1.37375547873132 #> 41         <NA>           <NA> 0.0531110402296704   1.10073015767438 #> 42         <NA>           <NA> 0.0553852063393159  0.875386911884058 #> 43         <NA>           <NA>  0.055263942553072  0.428424448100774 #> 44         <NA>           <NA> 0.0524068350600122  0.114176376984564 #> 45         <NA>           <NA>               <NA>               <NA> #> 46         <NA>           <NA>               <NA>               <NA> #> 47         <NA>           <NA>               <NA>               <NA> #> 48         <NA>           <NA> 0.0511156482690938   3.92173656567291 #> 49         <NA>           <NA> 0.0574539140713202   2.54817549762172 #> 50         <NA>           <NA> 0.0506481634706888    2.2058948052499 #> 51         <NA>           <NA> 0.0563334981866113   1.95623545709719 #> 52         <NA>           <NA>  0.052466490124933    1.3981504842674 #> 53         <NA>           <NA>  0.048864392338033   1.15126043398364 #> 54         <NA>           <NA> 0.0538371883563709  0.884013651443531 #> 55         <NA>           <NA> 0.0577044455243916  0.508177042680661 #> 56         <NA>           <NA> 0.0468845386339747  0.102184370003605 #> 57         <NA>           <NA>               <NA>               <NA> #> 58         <NA>           <NA>               <NA>               <NA> #> 59         <NA>           <NA>               <NA>               <NA> #> 60         <NA>           <NA> 0.0558489812766072   3.94550361447088 #> 61         <NA>           <NA> 0.0557606908424582   2.27898286628478 #> 62         <NA>           <NA> 0.0574327937971595   1.89073671793571 #> 63         <NA>           <NA> 0.0569181577319782   1.62334343593759 #> 64         <NA>           <NA>  0.053621175670959    1.1802366721719 #> 65         <NA>           <NA> 0.0502784097480088  0.904268586683983 #> 66         <NA>           <NA> 0.0526378795840157  0.451493423075463 #> 67         <NA>           <NA> 0.0503554229850555  0.104167244247426 #> 68         <NA>           <NA>               <NA>               <NA> #> 69         <NA>           <NA>               <NA>               <NA> #> 70         <NA>           <NA>               <NA>               <NA> #>             dY.spline  integral.spline reliable_fit.spline reliable_fit2.spline #> 1    6.82349016976797 76.3863401472674                TRUE                FALSE #> 2    3.54376128630604 68.2127337861473                TRUE                FALSE #> 3     3.7259015848543 67.9333999978764                TRUE                FALSE #> 4    2.56664721964266 62.4577843900155                TRUE                FALSE #> 5    2.31490247571604 61.6071472904905                TRUE                FALSE #> 6    1.68553344271531 55.2783823593391                TRUE                FALSE #> 7    1.04096124609558 47.3630596389569                TRUE                FALSE #> 8    0.71379287813626 39.0571255573482                TRUE                FALSE #> 9   0.403971222296893  29.213032914837                TRUE                FALSE #> 10  0.137876040511459 17.2315911434681                TRUE                FALSE #> 11 0.0384301981723603 6.95527405112113                TRUE                FALSE #> 12                  0                0               FALSE                FALSE #> 13   6.14569484102583 78.0486708936604                TRUE                FALSE #> 14   3.73137087392906 67.3820737801076                TRUE                FALSE #> 15   3.42630686448942 66.6340001374515                TRUE                FALSE #> 16   2.60125062324718 65.1454057772518                TRUE                FALSE #> 17   2.30605872651123 60.2283536883481                TRUE                FALSE #> 18   1.53700672014038 53.0434289065002                TRUE                FALSE #> 19   1.15865262938112 47.6185637254443                TRUE                FALSE #> 20  0.681435612883903 38.7903119691829                TRUE                FALSE #> 21  0.381909358670478 29.3810643791024                TRUE                FALSE #> 22  0.128549787607011 15.6818780826514                TRUE                FALSE #> 23 0.0324933726868336 6.54774181983028                TRUE                FALSE #> 24                  0                0               FALSE                FALSE #> 25   5.70389250045336    75.7507626773                TRUE                FALSE #> 26   3.37406640317631 67.6266197324431                TRUE                FALSE #> 27   2.55696709779564 62.4110756918176                TRUE                FALSE #> 28   2.11915019303825  59.764245661083                TRUE                FALSE #> 29   1.64317664764667 52.9066954732488                TRUE                FALSE #> 30   1.21876307991501 47.6606942798598                TRUE                FALSE #> 31  0.753301302431434 41.0660566772239                TRUE                FALSE #> 32  0.422660230670599 28.5031231195593                TRUE                FALSE #> 33  0.159381229652619 16.6074837561434                TRUE                FALSE #> 34 0.0326881207208835 6.64417455124493                TRUE                FALSE #> 35                  0                0               FALSE                FALSE #> 36   4.24548737932003 66.6842928570123                TRUE                FALSE #> 37   2.48482535941836 58.8612896825446                TRUE                FALSE #> 38   2.16951401860392 58.5329901769824                TRUE                FALSE #> 39   1.76323713320942 54.8139598881373                TRUE                FALSE #> 40   1.32129976664388  49.933577402707                TRUE                FALSE #> 41   1.04761911744471 45.5526122279818                TRUE                FALSE #> 42  0.820001705544742 37.8740051196149                TRUE                FALSE #> 43  0.373160505547702 25.3410360433298                TRUE                FALSE #> 44 0.0617695419245519 9.28439268920551                TRUE                FALSE #> 45                  0                0               FALSE                FALSE #> 46                  0                0               FALSE                FALSE #> 47                  0                0               FALSE                FALSE #> 48   3.87062091740381  67.505057663946                TRUE                FALSE #> 49    2.4907215835504 57.7249326405008                TRUE                FALSE #> 50   2.15524664177922 57.1598265635899                TRUE                FALSE #> 51   1.89990195891058 54.7561981474617                TRUE                FALSE #> 52   1.34568399414247 49.1845314334875                TRUE                FALSE #> 53   1.10239604164561 45.6216253539716                TRUE                FALSE #> 54   0.83017646308716  39.440254075191                TRUE                FALSE #> 55  0.450472597156269 26.4976770980986                TRUE                FALSE #> 56 0.0552998313696307 9.35936718424169                TRUE                FALSE #> 57                  0                0               FALSE                FALSE #> 58                  0                0               FALSE                FALSE #> 59                  0                0               FALSE                FALSE #> 60   3.88965463319427 66.0377443435283                TRUE                FALSE #> 61   2.22322217544232 58.2312695904913                TRUE                FALSE #> 62   1.83330392413855 54.0417506481511                TRUE                FALSE #> 63   1.56642527820561 50.5550310144906                TRUE                FALSE #> 64   1.12661549650095 45.7858736313414                TRUE                FALSE #> 65  0.853990176935974 39.4719163456666                TRUE                FALSE #> 66  0.398855543491447  26.848730083916                TRUE                FALSE #> 67 0.0538118212623701 8.84629606068225                TRUE                FALSE #> 68                  0                0               FALSE                FALSE #> 69                  0                0               FALSE                FALSE #> 70                  0                0               FALSE                FALSE #>    smooth.spline              mu.bt        lambda.bt               A.bt #> 1           0.55  0.664001384814177 4.48666396624953   6.89869935663048 #> 2           0.55  0.618401416537468 4.46061088623835   3.60111619806048 #> 3           0.55  0.605001431322837 4.51867645343632   3.78739885568716 #> 4           0.55  0.568736861482546 4.58209981955235   2.62498121496071 #> 5           0.55  0.537576684431699 4.30558725980598   2.37111318284297 #> 6           0.55  0.477233307056918 4.51051125204965   1.73578408273988 #> 7           0.55  0.385062785381075 4.46686027838715   1.09417700236178 #> 8           0.55  0.265749618249697 4.17883863054193  0.768983339524379 #> 9           0.55  0.154109823783685 3.12736593650163  0.460544758734417 #> 10          0.55 0.0770185285450968 2.04167347646299   0.18389030523153 #> 11          0.55 0.0348433806517811 2.75922390680768 0.0963205060067437 #> 12          0.55               <NA>             <NA>               <NA> #> 13          0.55  0.672766649296286 4.17564590471566   6.26369022587119 #> 14          0.55   0.61166874155772  4.5102269209771   3.79006142665431 #> 15          0.55  0.598431734971425 4.29925821494228   3.48792506090844 #> 16          0.55   0.57354414251479 4.14645209012597   2.63906529624181 #> 17          0.55  0.520422236317713  4.3163062661988   2.36393227713248 #> 18          0.55  0.469742572507296 4.54384197815904   1.59650385239425 #> 19          0.55  0.372218897457468 4.45827793493683   1.21211131306698 #> 20          0.55  0.255606278864276  3.9880221339673  0.730623001294539 #> 21          0.55  0.151962489434168 3.19394675501572  0.428409426442294 #> 22          0.55 0.0711780255491047 2.55317335927511  0.178762654516775 #> 23          0.55 0.0378500193616647 2.65764088907647 0.0813920281559998 #> 24          0.55               <NA>             <NA>               <NA> #> 25          0.55  0.661169314597286 4.38693413966776   5.75472959055568 #> 26          0.55  0.609718432206703 4.47617287565172   3.42180866905501 #> 27          0.55   0.56560230665513  4.5448710986846   2.62098172848658 #> 28          0.55  0.538679276975012 4.36074875089069   2.17510286515397 #> 29          0.55  0.458767170716995 4.58943551222105   1.69572068388076 #> 30          0.55  0.382657074282936  4.6556306646576   1.27105697758657 #> 31          0.55   0.27286251284826 3.88156302352244  0.793687443420521 #> 32          0.55  0.150901945589111 3.48413273484031  0.472868423862678 #> 33          0.55 0.0763735950420641 2.12482899894946  0.211224745667925 #> 34          0.55 0.0350422517571154 2.01218299110112 0.0824312147648429 #> 35          0.55               <NA>             <NA>               <NA> #> 36          0.55  0.479567030084454 3.98849312457859   4.30684091237019 #> 37          0.55  0.430187984586636 4.02799627964733   2.54379805746999 #> 38          0.55  0.421866331427125 4.12095686847197   2.22571558352112 #> 39          0.55  0.387031144670258 3.82327652921655   1.81668860975284 #> 40          0.55  0.347765799651423 3.80728335527246   1.36419755654405 #> 41          0.55  0.282972883464337 3.51883595900161   1.10352406005978 #> 42          0.55  0.211446346343301 3.57321305798235  0.870308693227752 #> 43          0.55  0.112582326281689 2.17383935669699  0.423838167336289 #> 44          0.55 0.0430832663166676  4.0090143677853  0.112028118524976 #> 45          0.55               <NA>             <NA>               <NA> #> 46          0.55               <NA>             <NA>               <NA> #> 47          0.55               <NA>             <NA>               <NA> #> 48          0.55  0.472711937903108 3.76775639636068   3.92052715445323 #> 49          0.55  0.437423572312348 4.32514763814958   2.55262071523496 #> 50          0.55  0.428387188347696 4.33057427534346   2.20438028697335 #> 51          0.55  0.396067217898871 3.93924403753816   1.95723376917154 #> 52          0.55   0.35367738451782 4.24363217651101    1.4086154558533 #> 53          0.55  0.294436382923881 4.07257383110742    1.1516613144258 #> 54          0.55  0.218870471333664 3.41540479784525  0.883521133790335 #> 55          0.55   0.12058249379447 2.80162646410779  0.496485914948072 #> 56          0.55 0.0423527219894483 2.83143431669952  0.100116672879077 #> 57          0.55               <NA>             <NA>               <NA> #> 58          0.55               <NA>             <NA>               <NA> #> 59          0.55               <NA>             <NA>               <NA> #> 60          0.55  0.473381209865644 3.87480462435872   3.96049661610608 #> 61          0.55  0.416113540529657 3.77040153400231   2.26474796541712 #> 62          0.55  0.390819734104588 3.96198874800804   1.89839162597269 #> 63          0.55  0.346975088820531 3.98107869930997   1.63075866335241 #> 64          0.55  0.295321178545365 3.77454092648912   1.18372767782224 #> 65          0.55  0.214652489922511 3.56985808547954  0.902146416306661 #> 66          0.55  0.122494610692496 2.50304935541835  0.446397672832708 #> 67          0.55 0.0433036280503059 2.95729176445738  0.101728243510819 #> 68          0.55               <NA>             <NA>               <NA> #> 69          0.55               <NA>             <NA>               <NA> #> 70          0.55               <NA>             <NA>               <NA> #>                 dY.bt      integral.bt            stdmu.bt       stdlambda.bt #> 1    6.84195283757752 74.5787161675969 0.00421546612920881 0.0254563022037047 #> 2    3.55040882375064 66.5837121192982 0.00390973450907047   0.02380441899596 #> 3    3.73215826054968 66.4349341238634 0.00446533789595592  0.033255299768503 #> 4    2.57266168535088 60.7385922774435  0.0090506147412627 0.0552042791171862 #> 5    2.31930410322615  60.213508704464 0.00553528963420274 0.0404664410302216 #> 6    1.68430474838165 53.9621602936059 0.00457655204295887 0.0368014241092563 #> 7    1.04368233658318 46.3364220456828 0.00546211082578039  0.049290134248534 #> 8   0.716546088970749 38.1049782620277 0.00479125621790788  0.100154444098319 #> 9   0.407809866160952 28.4958815166139  0.0031731575780707  0.133926996007606 #> 10  0.136650981848451 16.6431196078422 0.00266655617852646  0.299846917621469 #> 11 0.0390290150401276 6.69326858889253 0.00375341192423763   2.26030977194605 #> 12               <NA>             <NA>                <NA>               <NA> #> 13   6.21422393992162 76.1936645382618 0.00484715621711278 0.0258220260770383 #> 14   3.73491203021143 65.9683440060348 0.00583213220148755 0.0351846455921139 #> 15   3.43082489702336  65.457491751553 0.00356096699512379 0.0228629293158498 #> 16   2.59031183180732 63.9357317971557 0.00389589307532787 0.0275026918701654 #> 17   2.30876816368894 58.6432224995084 0.00629838940664079 0.0494948997126326 #> 18   1.54229521962381 51.8808355853793 0.00455443279440924 0.0386534856587007 #> 19    1.1593019010422  46.216695354816 0.00319671384056901 0.0415750890127441 #> 20  0.678497060359467 37.8006930906056 0.00305908097263685 0.0588615500503805 #> 21  0.379575921906864 28.3962899856163 0.00377738580825149  0.193745314022485 #> 22   0.12791410995802 15.1694185501939 0.00337050342609022  0.563709291119559 #> 23 0.0328392703535585 6.31875438054307 0.00343929092947445    1.3815172780081 #> 24               <NA>             <NA>                <NA>               <NA> #> 25   5.70525888308343 73.9123576575653 0.00390929522991699 0.0266746041416468 #> 26   3.37170638205551 65.6743813441998 0.00908413706517372  0.050021311054846 #> 27   2.56916028712693 61.0887146231851 0.00510690979010722 0.0345607374606427 #> 28   2.12211254941991 58.3774581052025  0.0060523316103872 0.0401621050592653 #> 29   1.63976667535434  51.412768652401 0.00404745301456659 0.0339686910253105 #> 30    1.2183833483785  46.598720849028  0.0044462679431387 0.0521070947387041 #> 31   0.74342297222855 39.9891278784288 0.00532053813587433 0.0766396241885263 #> 32  0.417768605607195 27.8884982429892 0.00391632913334635  0.171885470342566 #> 33  0.155408064343442 16.1297678899431  0.0035179576039844  0.402435318313448 #> 34 0.0329517033864371 6.47749764695201 0.00371115014496691   2.15945053897704 #> 35               <NA>             <NA>                <NA>               <NA> #> 36   4.25077995480915 64.9012181420859 0.00415870986844526 0.0405353220969968 #> 37     2.487583405919 57.1987090857093 0.00301920241541272 0.0293264612013168 #> 38   2.17678623949478 56.6687546842403 0.00307571170648986 0.0292797624056271 #> 39   1.76486354501743 53.5349613149635 0.00316356009822514 0.0461298373815744 #> 40   1.31157477048564 48.5925963113669 0.00333605724034915 0.0449485106144225 #> 41   1.05056129467247 44.4507578650974 0.00300189093443877 0.0570136186578166 #> 42  0.814898842120434  36.707440995721 0.00397190947179542  0.112851780165213 #> 43  0.368520998577805 24.5354870803381  0.0032833279999853  0.286186684992873 #> 44 0.0597142092147832 8.96909772874971 0.00271646931367347   1.35990177878791 #> 45               <NA>             <NA>                <NA>               <NA> #> 46               <NA>             <NA>                <NA>               <NA> #> 47               <NA>             <NA>                <NA>               <NA> #> 48   3.86935492397356 65.9958305338159  0.0061166992809111 0.0685674686474976 #> 49   2.49510928844084 56.4587480739884 0.00570268944710626 0.0632626997474763 #> 50   2.15365983174107 56.0677082721993 0.00303356211147662 0.0360863690762738 #> 51   1.90069741344422 53.5064755171091 0.00385205057964523 0.0458268542809975 #> 52   1.35600008075868 47.5581038786082 0.00353543579607867 0.0511128839652113 #> 53   1.10280585830864 44.4700229834647 0.00376743054967217 0.0594777221825825 #> 54  0.829761511797722 38.3202264197131 0.00439677783192565   0.12185999406265 #> 55  0.438773598421743  25.714304246481  0.0013023854710873   0.13216778347005 #> 56 0.0532055247382899 9.03317759068912 0.00349397076514787   1.81077867662883 #> 57               <NA>             <NA>                <NA>               <NA> #> 58               <NA>             <NA>                <NA>               <NA> #> 59               <NA>             <NA>                <NA>               <NA> #> 60   3.90440039453521 64.4479677261616 0.00283874406001788 0.0339727746765012 #> 61   2.20915529552854 56.7481384380081 0.00430443642153636  0.038739407264824 #> 62   1.84088684023847 52.8652191447377  0.0044878828025282 0.0504306954905026 #> 63    1.5738473046121 49.1360740963021 0.00353208981023281 0.0563885097226417 #> 64   1.12993852279042 44.9489716654559 0.00300169464263684 0.0604582882075099 #> 65  0.852013876443657 38.4411274587495 0.00233292679505493 0.0937365934866947 #> 66  0.393633595218657 26.0547958074271 0.00214206469475383  0.150733382621377 #> 67 0.0514790979494775 8.52640513542697 0.00411952503949732   2.02620938080642 #> 68               <NA>             <NA>                <NA>               <NA> #> 69               <NA>             <NA>                <NA>               <NA> #> 70               <NA>             <NA>                <NA>               <NA> #>                 stdA.bt             stddY.bt     stdintegral.bt reliable_fit.bt #> 1    0.0274392668024773   0.0273947631455367   1.20264612644577            TRUE #> 2    0.0118871942427299   0.0119006371964355  0.724199103814387            TRUE #> 3    0.0128386222169544   0.0127869360135335  0.870706675524335            TRUE #> 4   0.00848032732598164  0.00852727740173416   1.45623588916899            TRUE #> 5    0.0080864195872084  0.00804762482322969  0.958045472644864            TRUE #> 6     0.011155941224717   0.0111485311820077  0.714399846357123            TRUE #> 7   0.00288595721179373  0.00286779994955013  0.570125265567179            TRUE #> 8   0.00418502009564755  0.00408463745804853  0.572056536541752            TRUE #> 9   0.00242202105953135  0.00245360814018974  0.605795326473246            TRUE #> 10  0.00212986648320621  0.00214559884305947  0.495202583668699            TRUE #> 11 0.000712208333131581  0.00091245725080606    0.1282878513076            TRUE #> 12                 <NA>                 <NA>               <NA>            <NA> #> 13   0.0462544729598073   0.0463323888211499   1.00287582806211            TRUE #> 14   0.0114744692075094    0.011523623821166  0.524885488012622            TRUE #> 15   0.0110112161707987   0.0109616497723566  0.490274631797124            TRUE #> 16   0.0132137325970727   0.0131762622529984  0.413798815647758            TRUE #> 17  0.00383850159897354  0.00382271308181045  0.756582031456564            TRUE #> 18  0.00813361671966459  0.00815187210432424  0.521940516938707            TRUE #> 19   0.0054214513874282  0.00538186572492115  0.971593204897635            TRUE #> 20  0.00376142146774832  0.00381930040340439  0.448520522373415            TRUE #> 21  0.00295515190524738  0.00305094381908609  0.595464100021963            TRUE #> 22  0.00177024968922126  0.00179668830903279  0.320454257100711            TRUE #> 23 0.000571734779913442 0.000681093185404255  0.123063316831084            TRUE #> 24                 <NA>                 <NA>               <NA>            <NA> #> 25   0.0177041942364238   0.0177350110501213  0.907861159539063            TRUE #> 26   0.0192902231653206    0.019272396897485  0.986889730835175            TRUE #> 27    0.012514409242574   0.0125581678039883  0.578079537826883            TRUE #> 28   0.0126558335514062   0.0126660485627557  0.929287240860091            TRUE #> 29     0.01020066658103   0.0103124829648243   1.31335738767566            TRUE #> 30  0.00487522292247321  0.00489030850776368  0.459001574479192            TRUE #> 31  0.00202110752657571  0.00201410791446962  0.510315689930013            TRUE #> 32  0.00366363443717705  0.00369026860792172  0.199517532010815            TRUE #> 33  0.00110064686393394  0.00119781304561687  0.203238923341561            TRUE #> 34 0.000556264552237734  0.00059179414132407 0.0822697354988243            TRUE #> 35                 <NA>                 <NA>               <NA>            <NA> #> 36   0.0163465471896128   0.0163323398416565  0.811460693765658            TRUE #> 37   0.0102030441999994   0.0101932450365185   1.27953650609222            TRUE #> 38  0.00595275520999948  0.00588432742309626   1.21939000253827            TRUE #> 39   0.0120538258133952   0.0120659165400198  0.609117747391859            TRUE #> 40  0.00275492826125585  0.00270986312039481  0.847555449675878            TRUE #> 41  0.00490786416654561  0.00496756046819524  0.466111935216674            TRUE #> 42  0.00662107858105733  0.00662792321694837  0.591340731682017            TRUE #> 43  0.00748320585207086  0.00755178105092194  0.638411860336494            TRUE #> 44    0.001201180127381  0.00128731444947357  0.160105628017449            TRUE #> 45                 <NA>                 <NA>               <NA>            <NA> #> 46                 <NA>                 <NA>               <NA>            <NA> #> 47                 <NA>                 <NA>               <NA>            <NA> #> 48   0.0099452676764771  0.00973669242129076  0.643268143705335            TRUE #> 49   0.0108811218252895   0.0108643150670637  0.628661006994807            TRUE #> 50  0.00735212223852677  0.00737711772525957  0.454682183666571            TRUE #> 51  0.00579938005960824  0.00587190698802767  0.600995012772045            TRUE #> 52   0.0100637578308265   0.0101238363730421  0.686278386655445            TRUE #> 53  0.00311051854747839  0.00311793275743357  0.481097918621973            TRUE #> 54  0.00924047879727924  0.00916956968190251  0.621008654927649            TRUE #> 55  0.00481413497303531  0.00483186066231584  0.432292185836438            TRUE #> 56  0.00116928690108338  0.00120313638039804   0.21497243935229            TRUE #> 57                 <NA>                 <NA>               <NA>            <NA> #> 58                 <NA>                 <NA>               <NA>            <NA> #> 59                 <NA>                 <NA>               <NA>            <NA> #> 60   0.0120602692737963   0.0119856899850849  0.545052931405962            TRUE #> 61    0.010777193394544   0.0107022147477302   1.18317210996662            TRUE #> 62  0.00919505493457579  0.00928763968687771   0.65613047823241            TRUE #> 63  0.00811965976368819  0.00814806916363273  0.776521192915413            TRUE #> 64   0.0030974099904058  0.00307661779096886  0.244939326231332            TRUE #> 65  0.00558279016162808  0.00569454531105151  0.552053307126864            TRUE #> 66  0.00836193559882614  0.00826854074981034  0.594463876575652            TRUE #> 67 0.000451258211981518 0.000445199861736627   0.14790808227239            TRUE #> 68                 <NA>                 <NA>               <NA>            <NA> #> 69                 <NA>                 <NA>               <NA>            <NA> #> 70                 <NA>                 <NA>               <NA>            <NA> #>         ci90.mu.bt.lo      ci90.mu.bt.up  ci90.lambda.bt.lo ci90.lambda.bt.up #> 1   0.657066943031628  0.670935826596725   4.44478834912443  4.52853958337462 #> 2   0.611969903270047  0.624832929804889   4.42145261698999   4.4997691554867 #> 3    0.59765595048399  0.612346912161685   4.46397148531713   4.5733814215555 #> 4   0.553848600233169  0.583625122731923   4.49128878040457  4.67291085870012 #> 5   0.528471132983436  0.546682235879963   4.23901996431126  4.37215455530069 #> 6    0.46970487894625  0.484761735167585   4.44997290938993  4.57104959470938 #> 7   0.376077613072667  0.394047957689484   4.38577800754832  4.54794254922599 #> 8   0.257868001771239  0.273631234728156   4.01408457000019  4.34359269108366 #> 9   0.148889979567759  0.159329667999612   2.90705602806912  3.34767584493414 #> 10 0.0726320436314208 0.0814050134587728   1.54842529697568  2.53492165595031 #> 11 0.0286690180364102  0.041017743267152 -0.958985668043581  6.47743348165894 #> 12               <NA>               <NA>               <NA>              <NA> #> 13  0.664793077319136  0.680740221273437   4.13316867181893  4.21812313761239 #> 14  0.602074884086273  0.621262599029167   4.45234817897808  4.56810566297613 #> 15  0.592573944264446  0.604289525678403   4.26164869621771  4.33686773366686 #> 16  0.567135398405876  0.579952886623704   4.10121016199955  4.19169401825239 #> 17  0.510061385743789  0.530783086891637   4.23488715617152  4.39772537622608 #> 18  0.462250530560493  0.477234614454099   4.48025699425048  4.60742696206761 #> 19  0.366960303189732  0.377477491725204   4.38988691351086  4.52666895636279 #> 20  0.250574090664289  0.260638467064264   3.89119488413442  4.08484938380017 #> 21  0.145748689779594  0.158176289088742   2.87523571344873   3.5126577965827 #> 22 0.0656335474131863 0.0767225036850231   1.62587157538344  3.48047514316679 #> 23 0.0321923857826792 0.0435076529406501  0.385044966753148  4.93023681139979 #> 24               <NA>               <NA>               <NA>              <NA> #> 25  0.654738523944073    0.6676001052505   4.34305441585475  4.43081386348077 #> 26  0.594775026734492  0.624661837678913    4.3938878189665  4.55845793233694 #> 27  0.557201440050403  0.574003173259856   4.48801868556185  4.60172351180736 #> 28  0.528723191475925  0.548635362474098    4.2946820880682  4.42681541371319 #> 29  0.452109110508033  0.465425230925957   4.53355701548442  4.64531400895769 #> 30  0.375342963516472  0.389971185049399   4.56991449381243  4.74134683550276 #> 31  0.264110227614747  0.281614798081773   3.75549084173231  4.00763520531256 #> 32  0.144459584164756  0.157344307013466   3.20138113612679  3.76688433355383 #> 33 0.0705865547835098 0.0821606353006184   1.46282290032384  2.78683509757508 #> 34 0.0289374097686448 0.0411470937455859   -1.5401131455161  5.56447912771835 #> 35               <NA>               <NA>               <NA>              <NA> #> 36  0.472725952350861  0.486408107818046   3.92181251972903  4.05517372942815 #> 37  0.425221396613282   0.43515457255999   3.97975425097116   4.0762383083235 #> 38  0.416806785669949  0.426925877184301   4.07279165931471  4.16912207762923 #> 39  0.381827088308678  0.392235201031839   3.74739294672386  3.89916011170924 #> 40  0.342277985491048  0.353253613811797   3.73334305531173  3.88122365523318 #> 41  0.278034772877185  0.287910994051489    3.4250485563095  3.61262336169372 #> 42  0.204912555262197  0.217980137424404   3.38757187961057  3.75885423635413 #> 43  0.107181251721713  0.117983400841665   1.70306225988372  2.64461645351027 #> 44 0.0386146742956747 0.0475518583376604   1.77197594167919   6.2460527938914 #> 45               <NA>               <NA>               <NA>              <NA> #> 46               <NA>               <NA>               <NA>              <NA> #> 47               <NA>               <NA>               <NA>              <NA> #> 48  0.462649967586009  0.482773908220206   3.65496291043555  3.88054988228582 #> 49  0.428042648171858  0.446804496452838   4.22108049706498  4.42921477923418 #> 50  0.423396978674317  0.433377398021075   4.27121219821298  4.38993635247393 #> 51  0.389730594695354  0.402403841102387   3.86385886224591   4.0146292128304 #> 52  0.347861592633271  0.359493176402369   4.15955148238824  4.32771287063378 #> 53   0.28823895966967  0.300633806178092   3.97473297811707  4.17041468409777 #> 54  0.211637771800146  0.226103170867181    3.2149451076122  3.61586448807831 #> 55  0.118440069694531  0.122724917894408   2.58421046029956  3.01904246791602 #> 56   0.03660514008078 0.0481003038981165 -0.147296606354912  5.81016523975395 #> 57               <NA>               <NA>               <NA>              <NA> #> 58               <NA>               <NA>               <NA>              <NA> #> 59               <NA>               <NA>               <NA>              <NA> #> 60  0.468711475886914  0.478050943844373   3.81891941001588  3.93068983870156 #> 61   0.40903274261623  0.423194338443084   3.70667520905168  3.83412785895295 #> 62  0.383437166894429  0.398202301314747   3.87903025392617  4.04494724208992 #> 63  0.341164801082698  0.352785376558364   3.88831960081623  4.07383779780372 #> 64  0.290383390858227  0.300258966232503   3.67508704238776  3.87399481059047 #> 65  0.210814825344646  0.218490154500377   3.41566138919393  3.72405478176515 #> 66  0.118970914269626  0.126018307115366   2.25509294100619  2.75100576983052 #> 67 0.0365270093603328  0.050080246740279 -0.375822666969179  6.29040619588394 #> 68               <NA>               <NA>               <NA>              <NA> #> 69               <NA>               <NA>               <NA>              <NA> #> 70               <NA>               <NA>               <NA>              <NA> #>          ci90.A.bt.lo       ci90.A.bt.up ci90.integral.bt.lo #> 1    6.85356176274041   6.94383695052056    72.6003632895936 #> 2    3.58156176353119   3.62067063258977    65.3924045935235 #> 3    3.76627932214027   3.80851838923405    65.0026216426258 #> 4    2.61103107650947   2.63893135341195    58.3430842397605 #> 5    2.35781102262201   2.38441534306393    58.6375239019631 #> 6    1.71743255942522   1.75413560605454    52.7869725463485 #> 7    1.08942960274838   1.09892440197518    45.3985659838248 #> 8   0.762098981467039  0.775867697581719    37.1639452594165 #> 9   0.456560534091488  0.464528983377347    27.4993482045654 #> 10  0.180386674866656  0.187393935596404    15.8285113577072 #> 11 0.0951489232987423 0.0974920887147452    6.48223507349153 #> 12               <NA>               <NA>                <NA> #> 13   6.18760161785231   6.33977883389007    74.5439338010997 #> 14   3.77118592480796   3.80893692850067    65.1049073782541 #> 15   3.46981161030748    3.5060385115094    64.6509899822467 #> 16   2.61732870611962   2.66080188636399    63.2550327454151 #> 17   2.35761794200217   2.37024661226279    57.3986450577624 #> 18    1.5831240528904   1.60988365189809    51.0222434350151 #> 19   1.20319302553466    1.2210296005993    44.6184245327594 #> 20  0.724435462980093  0.736810539608985    37.0628768313013 #> 21  0.423548201558162  0.433270651326426    27.4167515410802 #> 22  0.175850593778006  0.181674715255544    14.6422712972632 #> 23 0.0804515244430422 0.0823325318689574    6.11631522435594 #> 24               <NA>               <NA>                <NA> #> 25   5.72560619103676    5.7838529900746    72.4189260501236 #> 26   3.39007625194805   3.45354108616196    64.0509477369759 #> 27   2.60039552528255   2.64156793169062    60.1377737834599 #> 28    2.1542840189619   2.19592171134603    56.8487805939876 #> 29   1.67894058735497   1.71250078040655    49.2522957496746 #> 30    1.2630372358791   1.27907671929404    45.8436632590098 #> 31  0.790362721539304  0.797012165301738    39.1496585684939 #> 32  0.466841745213521  0.478895102511834    27.5602919028314 #> 33  0.209414181576754  0.213035309759097    15.7954398610462 #> 34 0.0815161595764119  0.083346269953274    6.34216393205644 #> 35               <NA>               <NA>                <NA> #> 36   4.27995084224328    4.3337309824971    63.5663653008414 #> 37   2.52701404976099   2.56058206517899    55.0938715331876 #> 38   2.21592330120067   2.23550786584157    54.6628581300649 #> 39   1.79686006628981   1.83651715321588    52.5329626205039 #> 40   1.35966569955429   1.36872941353382    47.1983675966501 #> 41   1.09545062350581   1.11159749661375     43.684003731666 #> 42  0.859417018961913  0.881200367493591    35.7346854921041 #> 43  0.411528293709633  0.436148040962946    23.4852995700846 #> 44  0.110052177215434  0.114004059834518    8.70572397066101 #> 45               <NA>               <NA>                <NA> #> 46               <NA>               <NA>                <NA> #> 47               <NA>               <NA>                <NA> #> 48   3.90416718912542   3.93688711978103    64.9376544374207 #> 49   2.53472126983236   2.57052016063756     55.424600717482 #> 50   2.19228604589097   2.21647452805573    55.3197560800677 #> 51   1.94769378897349    1.9667737493696    52.5178387210991 #> 52   1.39206057422159   1.42517033748501      46.42917593256 #> 53    1.1465445114152    1.1567781174364    43.6786169073315 #> 54   0.86832054616881  0.898721721411859    37.2986671823571 #> 55  0.488566662917429  0.504405166978715    25.0031836007801 #> 56 0.0981931959267949  0.102040149831359     8.6795479279546 #> 57               <NA>               <NA>                <NA> #> 58               <NA>               <NA>                <NA> #> 59               <NA>               <NA>                <NA> #> 60   3.94065747315068   3.98033575906147    63.5513556539988 #> 61    2.2470194822831   2.28247644855115     54.801820317113 #> 62   1.88326576060531   1.91351749134006    51.7858845080454 #> 63   1.61740182304114   1.64411550366368    47.8586967339562 #> 64   1.17863243838802   1.18882291725646    44.5460464738053 #> 65  0.892962726490783   0.91133010612254    37.5329997685258 #> 66  0.432642288772639  0.460153056892777    25.0769027304601 #> 67  0.100985923752109  0.102470563269528    8.28309634008889 #> 68               <NA>               <NA>                <NA> #> 69               <NA>               <NA>                <NA> #> 70               <NA>               <NA>                <NA> #>    ci90.integral.bt.up      ci95.mu.bt.lo      ci95.mu.bt.up #> 1     76.5570690456002  0.655739071200927  0.672263698427426 #> 2     67.7750196450728   0.61073833689969  0.626064496175246 #> 3     67.8672466051009  0.596249369046764  0.613753493598911 #> 4     63.1341003151265  0.550997656589671  0.586476066375421 #> 5     61.7894935069648  0.526727516748662  0.548425852114737 #> 6     55.1373480408634  0.468263265052718  0.486203349061117 #> 7     47.2742781075408  0.374357048162546  0.395768522599605 #> 8     39.0460112646388  0.256358756062598  0.275140480436797 #> 9     29.4924148286624  0.147890434930667  0.160329212636704 #> 10    17.4577278579773 0.0717920784351849 0.0822449786550087 #> 11    6.90430210429353 0.0274866932802754 0.0422000680232869 #> 12                <NA>               <NA>               <NA> #> 13     77.843395275424  0.663266223110745  0.682267075481827 #> 14    66.8317806338156  0.600237762442804  0.623099720672636 #> 15    66.2639935208593  0.591452239660982  0.605411230281867 #> 16    64.6164308488962  0.565908192087147  0.581180092942433 #> 17    59.8877999412545  0.508077393080697  0.532767079554729 #> 18    52.7394277357434  0.460815884230254  0.478669260784338 #> 19    47.8149661768727  0.365953338329953  0.378484456584983 #> 20    38.5385093499099  0.249610480157908  0.261602077570644 #> 21    29.3758284301524  0.144558813249995  0.159366165618341 #> 22    15.6965658031246 0.0645718388339679 0.0777842122642416 #> 23    6.52119353673021 0.0311090091398947 0.0445910295834346 #> 24                <NA>               <NA>               <NA> #> 25    75.4057892650071  0.653507095946649  0.668831533247924 #> 26    67.2978149514236  0.591913523558962  0.627523340854443 #> 27    62.0396554629103   0.55559276346652   0.57561184984374 #> 28    59.9061356164173  0.526816707018653   0.55054184693137 #> 29    53.5732415551275  0.450834162808445  0.466700178625546 #> 30    47.3537784390463  0.373942389114384  0.391371759451487 #> 31    40.8285971883636  0.262434258101946  0.283290767594574 #> 32     28.216704583147  0.143225940487752   0.15857795069047 #> 33    16.4640959188399 0.0694783981382547 0.0832687919458735 #> 34    6.61283136184758 0.0277683974729802 0.0423161060412505 #> 35                <NA>               <NA>               <NA> #> 36    66.2360709833304  0.471415958742301  0.487718101426606 #> 37     59.303546638231  0.424270347852427  0.436105621320845 #> 38    58.6746512384158  0.415837936482405  0.427894726371845 #> 39    54.5369600094231  0.380830566877737   0.39323172246278 #> 40    49.9868250260838  0.341227127460338  0.354304471842507 #> 41    45.2175119985288  0.277089177232837  0.288856589695837 #> 42    37.6801964993379  0.203661403778582   0.21923128890802 #> 43    25.5856745905916  0.106147003401718   0.11901764916166 #> 44    9.23247148683841 0.0377589864618676 0.0484075461714676 #> 45                <NA>               <NA>               <NA> #> 46                <NA>               <NA>               <NA> #> 47                <NA>               <NA>               <NA> #> 48    67.0540066302112  0.460723207312522  0.484700668493693 #> 49    57.4928954304949   0.42624630099602  0.448600843628677 #> 50    56.8156604643308  0.422441406609202  0.434332970086191 #> 51    54.4951123131191  0.388517198762766  0.403617237034975 #> 52    48.6870318246564  0.346747930357506  0.360606838678134 #> 53    45.2614290595978  0.287052219046524  0.301820546801239 #> 54    39.3417856570691   0.21025278678309  0.227488155884238 #> 55     26.425424892182  0.118029818271139  0.123135169317801 #> 56    9.38680725342364 0.0355045392897585 0.0492009046891381 #> 57                <NA>               <NA>               <NA> #> 58                <NA>               <NA>               <NA> #> 59                <NA>               <NA>               <NA> #> 60    65.3445797983244  0.467817271508009  0.478945148223279 #> 61    58.6944565589031  0.407676845143446  0.424550235915868 #> 62      53.94455378143  0.382023483811633  0.399615984397543 #> 63    50.4134514586479  0.340052192792475  0.353897984848587 #> 64    45.3518968571064  0.289437857045797  0.301204500044933 #> 65    39.3492551489731  0.210079953404204  0.219225026440819 #> 66     27.032688884394  0.118296163890778  0.126693057494213 #> 67    8.76971393076506 0.0352293589728912 0.0513778971277207 #> 68                <NA>               <NA>               <NA> #> 69                <NA>               <NA>               <NA> #> 70                <NA>               <NA>               <NA> #>      ci95.lambda.bt.lo ci95.lambda.bt.up       ci95.A.bt.lo       ci95.A.bt.up #> 1     4.43676961393027  4.53655831856879   6.84491839369763   6.95248031956334 #> 2     4.41395422500626  4.50726754747043   3.57781729734473   3.62441509877623 #> 3     4.45349606589005  4.58385684098258   3.76223515614193   3.81256255523239 #> 4     4.47389943248266  4.69030020662203   2.60835977340178   2.64160265651963 #> 5     4.22627303538674  4.38490148422521   2.35526380045204    2.3869625652339 #> 6     4.43838046079551   4.5826420433038   1.71391843793943   1.75764972754032 #> 7     4.37025161526003  4.56346894151428   1.08852052622666   1.09983347849689 #> 8     3.98253592010922  4.37514134097463   0.76078070013691  0.777185978911848 #> 9     2.86486902432672  3.38986284867654  0.455797597457736  0.465291920011099 #> 10    1.45397351792491  2.62937343500107  0.179715766924446  0.188064843538614 #> 11   -1.67098324620659  7.18943105982195 0.0949245776738058 0.0977164343396816 #> 12                <NA>              <NA>               <NA>               <NA> #> 13    4.12503473360467  4.22625707582666   6.17303145886997   6.35434899287241 #> 14    4.44126501561656  4.57918882633765   3.76757146700759   3.81255138630103 #> 15    4.25444687348322  4.34406955640135   3.46634307721367    3.5095070446032 #> 16    4.09254681406044  4.20035736619149   2.61316638035155   2.66496421213207 #> 17    4.21929626276204  4.41331626963556   2.35640881399849   2.37145574026647 #> 18    4.46808114626799   4.6196028100501    1.5805619636237   1.61244574116479 #> 19    4.37679076047185   4.5397651094018   1.20148526834762   1.22273735778634 #> 20    3.87265349586855  4.10339077206604  0.723250615217752  0.737995387371325 #> 21    2.81420593953165  3.57368757049979  0.422617328708009  0.434201524176578 #> 22    1.44830314868078  3.65804356986945  0.175292965125902  0.182232343907649 #> 23 -0.0501329758194022  5.36541475397234 0.0802714279873694 0.0825126283246301 #> 24                <NA>              <NA>               <NA>               <NA> #> 25    4.33465191555013  4.43921636378539   5.72002936985229   5.78942981125907 #> 26    4.37813110598422  4.57421464531922   3.38399983165098   3.45961750645903 #> 27    4.47713205326174  4.61261014410746   2.59645348637114   2.64550997060203 #> 28    4.28203102497453  4.43946647680685   2.15029743139321   2.19990829891472 #> 29    4.52285687781144  4.65601414663066   1.67572737738194   1.71571399037958 #> 30    4.55350075896974  4.75776057034546   1.26150154065852   1.28061241451462 #> 31    3.73134936011293  4.03177668693195  0.789726072668433  0.797648814172609 #> 32    3.14723721296888  3.82102825671174  0.465687700365811  0.480049147359545 #> 33    1.33605577505511  2.91360222284382  0.209067477814615  0.213382013521236 #> 34   -2.22034006529387  6.24470604749612  0.081340936242457 0.0835214932872289 #> 35                <NA>              <NA>               <NA>               <NA> #> 36    3.90904389326847   4.0679423558887   4.27480167987855   4.33888014486183 #> 37    3.97051641569275  4.08547614360191   2.52380009083799   2.56379602410199 #> 38    4.06356853415694    4.178345202787   2.21404818330952   2.23738298373272 #> 39    3.73286204794866  3.91369101048444   1.79306311115859   1.84031410834709 #> 40    3.71918427446819  3.89538243607672   1.35879789715199   1.36959721593611 #> 41    3.40708926643229  3.63058265157093   1.09390464629335   1.11314347382621 #> 42    3.35202356885853  3.79440254710617   0.85733137920888  0.883286007246624 #> 43    1.61291345411096  2.73476525928302   0.40917108386623  0.438505250806348 #> 44      1.343606881361  6.67442185420959  0.109673805475309  0.114382431574643 #> 45                <NA>              <NA>               <NA>               <NA> #> 46                <NA>              <NA>               <NA>               <NA> #> 47                <NA>              <NA>               <NA>               <NA> #> 48    3.63336415781159  3.90214863490978   3.90103442980733   3.94001987909912 #> 49    4.20115274664453  4.44914252965463   2.53129371645739   2.57394771401253 #> 50    4.25984499195396  4.40130355873295   2.18997012738584   2.21879044656086 #> 51     3.8494234031474  4.02906467192891   1.94586698425471   1.96860055408838 #> 52    4.14345092393919  4.34381342908282   1.38889049050488   1.42834042120172 #> 53    3.95599749562956  4.18915016658528   1.14556469807274   1.15775793077886 #> 54    3.17655920948246  3.65425038620805  0.865409795347667  0.901632472233002 #> 55    2.54257760850649  3.06067531970909  0.487050210400923  0.505921619495221 #> 56  -0.717691889492994  6.38056052289203 0.0978248705529536    0.1024084752052 #> 57                <NA>              <NA>               <NA>               <NA> #> 58                <NA>              <NA>               <NA>               <NA> #> 59                <NA>              <NA>               <NA>               <NA> #> 60    3.80821798599278  3.94139126272466   3.93685848832944   3.98413474388272 #> 61    3.69447229576326  3.84633077224137   2.24362466636381   2.28587126447043 #> 62    3.86314458484666  4.06083291116943   1.88036931830092   1.91641393364445 #> 63     3.8705572202536  4.09160017836635   1.61484413021558   1.64667319648924 #> 64     3.6560426816024  3.89303917137584   1.17765675424105   1.18979860140344 #> 65    3.38613436224562  3.75358180871346   0.89120414758987  0.913088685023452 #> 66    2.20761192548045  2.79848678535625  0.430008279059009  0.462787066606408 #> 67    -1.0140786219232  6.92866215083797  0.100843777415335  0.102612709606303 #> 68                <NA>              <NA>               <NA>               <NA> #> 69                <NA>              <NA>               <NA>               <NA> #> 70                <NA>              <NA>               <NA>               <NA> #>    ci95.integral.bt.lo ci95.integral.bt.up #> 1     72.2215297597632    76.9359025754306 #> 2      65.164281875822    68.0031423627744 #> 3     64.7283490398357    68.1415192078911 #> 4     57.8843699346723    63.5928146202147 #> 5       58.33573957808    62.0912778308479 #> 6      52.561936594746    55.3623839924659 #> 7     45.2189765251711    47.4538675661944 #> 8     36.9837474504058    39.2262090736495 #> 9     27.3085226767263    29.6832403565015 #> 10    15.6725225438516    17.6137166718329 #> 11    6.44182440032963    6.94471277745543 #> 12                <NA>                <NA> #> 13    74.2280279152601    78.1593011612636 #> 14    64.9395684495301    66.9971195625396 #> 15    64.4965534732306    66.4184300298754 #> 16    63.1246861184861    64.7467774758253 #> 17    57.1603217178536    60.1261232811633 #> 18    50.8578321721794    52.9038389985791 #> 19    44.3123726732167    48.1210180364154 #> 20    36.9215928667537    38.6797933144575 #> 21    27.2291803495733    29.5633996216594 #> 22    14.5413282062765    15.7975088941113 #> 23    6.07755027955415      6.559958481532 #> 24                <NA>                <NA> #> 25    72.1329497848688    75.6917655302619 #> 26    63.7400774717628    67.6086852166367 #> 27    59.9556787290444    62.2217505173258 #> 28    56.5560551131167    60.1988610972883 #> 29    48.8385881725567    53.9869491322453 #> 30    45.6990777630488    47.4983639350072 #> 31    38.9889091261659    40.9893466306916 #> 32     27.497443880248    28.2795526057304 #> 33    15.7314196001936    16.5281161796925 #> 34    6.31624896537431    6.63874632852971 #> 35                <NA>                <NA> #> 36    63.3107551823053    66.4916811018666 #> 37    54.6908175337686    59.7066006376501 #> 38    54.2787502792653    59.0587590892153 #> 39    52.3410905300755    54.7288320998515 #> 40    46.9313876300022    50.2538049927317 #> 41    43.5371784720727    45.3643372581221 #> 42    35.5484131616243    37.8664688298178 #> 43    23.2841998340786    25.7867743265976 #> 44    8.65529069783551    9.28290475966391 #> 45                <NA>                <NA> #> 46                <NA>                <NA> #> 47                <NA>                <NA> #> 48    64.7350249721535    67.2566360954784 #> 49    55.2265725002786    57.6909236476982 #> 50    55.1765311922128    56.9588853521857 #> 51    52.3285252920759    54.6844257421423 #> 52    46.2129982407635    48.9032095164529 #> 53    43.5270710629656    45.4129749039638 #> 54    37.1030494560549    39.5374033833713 #> 55    24.8670115622416    26.5615969307204 #> 56    8.61183160955863    9.45452357181961 #> 57                <NA>                <NA> #> 58                <NA>                <NA> #> 59                <NA>                <NA> #> 60    63.3796639806059    65.5162714717173 #> 61    54.4291211024735    59.0671557735426 #> 62    51.5792034074022    54.1512348820732 #> 63    47.6140925581878    50.6580556344163 #> 64    44.4688905860425    45.4290527448693 #> 65    37.3591029767808    39.5231519407181 #> 66    24.8896466093388    27.2199450055153 #> 67    8.23650529417309    8.81630497668086 #> 68                <NA>                <NA> #> 69                <NA>                <NA> #> 70                <NA>                <NA> # }"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"Generic summary function gcFitLinear objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"","code":"# S3 method for gcFitLinear summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"object object class gcFitLinear ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"dataframe parameters extracted linear fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitLinear objects — summary.gcFitLinear","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitLinear(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'l'))  summary(TestFit) #>           mu.linfit        tD.linfit    lambda.linfit        dY.linfit #> 1 0.636266790482458 1.08939707513943 4.36709732044106 6.60633132444895 #>           A.linfit tmu.start.linfit tmu.end.linfit       r2mu.linfit #> 1 6.66006504138785             6.25             10 0.999581391293035 #>   reliable_fit.linfit mu2.linfit tD2.linfit tmu2.start.linfit tmu2.end.linfit #> 1                TRUE       <NA>       <NA>              <NA>            <NA> #>   r2mu2.linfit reliable_fit2.linfit #> 1         <NA>                FALSE"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitModel objects — summary.gcFitModel","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"Generic summary function gcFitModel objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"","code":"# S3 method for gcFitModel summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"object object class gcFitModel ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"dataframe parameters extracted growth model fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitModel objects — summary.gcFitModel","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform parametric fit TestFit <- growth.gcFitModel(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 'm')) #> --> Try to fit model logistic #> ....... OK #> --> Try to fit model richards #> ....... OK #> --> Try to fit model gompertz #> ....... OK #> --> Try to fit model gompertz.exp #> ... ERROR in nls(). For further information see help(growth.gcFitModel) #> --> Try to fit model huang #> .......... OK #> --> Try to fit model baranyi #> ........ OK #>  #> Best fitting model: ~baranyi  summary(TestFit) #>            mu.model          tD.model     lambda.model          A.model #> 1 0.803514921329274 0.862643819250121 4.95199753518024 4.67104671856266 #>           dY.model     A.orig.model   dY.orig.model   integral.model #> 1 4.69099267715391 5.45384344838279 5.5637177150686 75.0670582101992 #>   parameter_nu.model parameter_alpha.model parameter_t_shift.model #> 1               <NA>                  <NA>                    <NA> #>    parameter_y0.model       stdmu.model    stdlambda.model          stdA.model #> 1 -0.0199702942146595 0.002697441812601 0.0165415903336849 0.00245616822848494 #>   reliable_fit.model  ci90.mu.model.lo  ci90.mu.model.up ci90.lambda.model.lo #> 1               TRUE 0.799077629547545 0.807952213111002     4.92478661908133 #>   ci90.lambda.model.up ci90.A.model.lo  ci90.A.model.up  ci95.mu.model.lo #> 1     4.97920845127915 4.6670063218268 4.67508711529851 0.798227935376576 #>    ci95.mu.model.up ci95.lambda.model.lo ci95.lambda.model.up  ci95.A.model.lo #> 1 0.808801907281972     4.91957601812622     4.98441905223426 4.66623262883483 #>    ci95.A.model.up #> 1 4.67586080829049"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"Generic summary function gcFitSpline objects","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"","code":"# S3 method for gcFitSpline summary(object, ...)"},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"object object class gcFitSpline ... Additional arguments. currently effect meant fulfill requirements generic function.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"dataframe parameters extracted nonparametric fit.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/summary.gcFitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summary function for gcFitSpline objects — summary.gcFitSpline","text":"","code":"# Create random growth dataset rnd.dataset <- rdm.data(d = 35, mu = 0.8, A = 5, label = 'Test1')  # Extract time and growth data for single sample time <- rnd.dataset$time[1,] data <- rnd.dataset$data[1,-(1:3)] # Remove identifier columns  # Perform linear fit TestFit <- growth.gcFitSpline(time, data, gcID = 'TestFit',                  control = growth.control(fit.opt = 's'))  summary(TestFit) #>           mu.spline        tD.spline tmax.spline    lambda.spline mu2.spline #> 1 0.665553918528609 1.04145909334038        7.75 4.25696290858692       <NA> #>   tD2.spline tmax2.spline lambda2.spline         y0.spline        A.spline #> 1       <NA>         <NA>           <NA> 0.047516208119367 5.6613813459295 #>          dY.spline integral.spline reliable_fit.spline reliable_fit2.spline #> 1 5.61386513781013 76.681080964563                TRUE                FALSE #>   smooth.spline #> 1          0.55"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"Generate grouped results table linear fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"","code":"table_group_fluorescence_linear(flTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"flTable object class flTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"data frame grouped linear fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_fluorescence_linear","text":"","code":"# \\donttest{ # load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"l\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  table_group_fluorescence_linear(res$flFit$flTable) #>             Sample|Conc. slope_max lagtime        dY     Y_max x_start(mumax) #> 1       pSEVA634∙GFP | 0                                                      #> 2      pSEVA634r∙GFP | 0                                                      #> 3     pSEVA634rκ∙GFP | 0    75.796  23.666   376.798  2228.283             16 #> 4    pSEVA634∙GFP | 0.01   262.266  17.259  5820.567  7503.259             30 #> 5   pSEVA634r∙GFP | 0.01                                                      #> 6  pSEVA634rκ∙GFP | 0.01   225.688  13.904  3020.995  4880.808             15 #> 7    pSEVA634∙GFP | 0.05   658.849  10.171 15562.241     17045             16 #> 8   pSEVA634r∙GFP | 0.05   307.497  14.566  3856.069   5224.49           14.5 #> 9  pSEVA634rκ∙GFP | 0.05   385.864   7.481  6056.345  7883.268             10 #> 10    pSEVA634∙GFP | 0.1   786.634   1.892 18027.038 19670.602            2.5 #> 11   pSEVA634r∙GFP | 0.1   514.144  11.836  6070.424  6990.424             15 #> 12  pSEVA634rκ∙GFP | 0.1   404.264   6.785  7467.593  9260.697           15.5 #> 13    pSEVA634∙GFP | 0.2   810.584   2.174 18686.014 20250.899            3.5 #> 14   pSEVA634r∙GFP | 0.2    540.02  11.918  6008.673  7054.127             15 #> 15  pSEVA634rκ∙GFP | 0.2   391.915    6.01   7526.82  9138.889             16 #> 16    pSEVA634∙GFP | 0.5   820.283   1.388 18860.637 20504.202              5 #> 17   pSEVA634r∙GFP | 0.5   494.059  11.004  6225.536  7150.065             15 #> 18  pSEVA634rκ∙GFP | 0.5    429.55   7.469  7650.517  9370.143           15.5 #> 19      pSEVA634∙GFP | 1   877.851   2.083 17785.309 19449.102            3.5 #> 20     pSEVA634r∙GFP | 1   559.313  12.303  6148.718  7412.869             16 #> 21    pSEVA634rκ∙GFP | 1   395.584   6.293  7763.536  9317.992             15 #>    x_end(mumax) #> 1               #> 2               #> 3          19.5 #> 4          34.5 #> 5               #> 6            20 #> 7            20 #> 8          19.5 #> 9          14.5 #> 10          6.5 #> 11           19 #> 12           20 #> 13          8.5 #> 14         19.5 #> 15           20 #> 16            9 #> 17         19.5 #> 18           20 #> 19            8 #> 20         19.5 #> 21           20  # with HTML formatting DT::datatable(table_group_fluorescence_linear(res$flFit$flTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"],[\"pSEVA634∙GFP | 0\",\"pSEVA634r∙GFP | 0\",\"pSEVA634rκ∙GFP | 0\",\"pSEVA634∙GFP | 0.01\",\"pSEVA634r∙GFP | 0.01\",\"pSEVA634rκ∙GFP | 0.01\",\"pSEVA634∙GFP | 0.05\",\"pSEVA634r∙GFP | 0.05\",\"pSEVA634rκ∙GFP | 0.05\",\"pSEVA634∙GFP | 0.1\",\"pSEVA634r∙GFP | 0.1\",\"pSEVA634rκ∙GFP | 0.1\",\"pSEVA634∙GFP | 0.2\",\"pSEVA634r∙GFP | 0.2\",\"pSEVA634rκ∙GFP | 0.2\",\"pSEVA634∙GFP | 0.5\",\"pSEVA634r∙GFP | 0.5\",\"pSEVA634rκ∙GFP | 0.5\",\"pSEVA634∙GFP | 1\",\"pSEVA634r∙GFP | 1\",\"pSEVA634rκ∙GFP | 1\"],[\"\",\"\",\"75.796\",\"262.266\",\"\",\"225.688\",\"658.849\",\"307.497\",\"385.864\",\"786.634\",\"514.144\",\"404.264\",\"810.584\",\"540.02\",\"391.915\",\"820.283\",\"494.059\",\"429.55\",\"877.851\",\"559.313\",\"395.584\"],[\"\",\"\",\"23.666\",\"17.259\",\"\",\"13.904\",\"10.171\",\"14.566\",\"7.481\",\"1.892\",\"11.836\",\"6.785\",\"2.174\",\"11.918\",\"6.01\",\"1.388\",\"11.004\",\"7.469\",\"2.083\",\"12.303\",\"6.293\"],[\"\",\"\",\"376.798\",\"5820.567\",\"\",\"3020.995\",\"15562.241\",\"3856.069\",\"6056.345\",\"18027.038\",\"6070.424\",\"7467.593\",\"18686.014\",\"6008.673\",\"7526.82\",\"18860.637\",\"6225.536\",\"7650.517\",\"17785.309\",\"6148.718\",\"7763.536\"],[\"\",\"\",\"2228.283\",\"7503.259\",\"\",\"4880.808\",\"17045\",\"5224.49\",\"7883.268\",\"19670.602\",\"6990.424\",\"9260.697\",\"20250.899\",\"7054.127\",\"9138.889\",\"20504.202\",\"7150.065\",\"9370.143\",\"19449.102\",\"7412.869\",\"9317.992\"],[\"\",\"\",\"16\",\"30\",\"\",\"15\",\"16\",\"14.5\",\"10\",\"2.5\",\"15\",\"15.5\",\"3.5\",\"15\",\"16\",\"5\",\"15\",\"15.5\",\"3.5\",\"16\",\"15\"],[\"\",\"\",\"19.5\",\"34.5\",\"\",\"20\",\"20\",\"19.5\",\"14.5\",\"6.5\",\"19\",\"20\",\"8.5\",\"19.5\",\"20\",\"9\",\"19.5\",\"20\",\"8\",\"19.5\",\"20\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>slope<sub>max<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>x<sub>start<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n      <th>x<sub>end<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"Generate grouped results table spline fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"","code":"table_group_fluorescence_spline(flTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"flTable object class flTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"data frame grouped spline fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_fluorescence_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_fluorescence_spline","text":"","code":"# load example dataset input <- read_data(data.growth = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    data.fl = system.file(\"lac_promoters.xlsx\", package = \"QurvE\"),                    sheet.growth = 1,                    sheet.fl = 2 ) #> Sample data are stored in columns. If they are stored in row format, please run read_data() with data.format = 'row'.  # Run workflow res <- fl.workflow(grodata = input, ec50 = FALSE, fit.opt = \"s\",                    x_type = \"time\", norm_fl = TRUE,                    dr.parameter = \"max_slope.spline\",                    suppress.messages = TRUE,                    parallelize = FALSE)  table_group_fluorescence_spline(res$flFit$flTable) #>           Sample | Conc. slope_max lagtime     Y_max        dY x(slope_max) #> 1       pSEVA634∙GFP | 0    92.267  15.547  3427.126  2135.701         20.5 #> 2      pSEVA634r∙GFP | 0    30.773  31.287  1470.992   282.714           20 #> 3     pSEVA634rκ∙GFP | 0    64.176  20.813  2196.189   630.596           16 #> 4    pSEVA634∙GFP | 0.01   242.558  14.983  7592.801  6072.997         23.5 #> 5   pSEVA634r∙GFP | 0.01    64.653  21.671  2384.304  1128.582           19 #> 6  pSEVA634rκ∙GFP | 0.01    205.58  12.566  4820.287  3196.134           18 #> 7    pSEVA634∙GFP | 0.05   509.395    6.96 17121.214 15989.029         21.5 #> 8   pSEVA634r∙GFP | 0.05   204.032  13.436  5206.543  3800.827         17.5 #> 9  pSEVA634rκ∙GFP | 0.05   290.961   4.674  7768.189  6299.664           13 #> 10    pSEVA634∙GFP | 0.1   670.985   0.373  20079.01 18869.536            6 #> 11   pSEVA634r∙GFP | 0.1   327.195   9.868  6840.378  5652.539           17 #> 12  pSEVA634rκ∙GFP | 0.1   335.244   3.651  9191.863  7723.924         17.5 #> 13    pSEVA634∙GFP | 0.2   728.625   0.554 20481.098 19589.302          6.5 #> 14   pSEVA634r∙GFP | 0.2   346.268   9.758  7000.845  5718.068         16.5 #> 15  pSEVA634rκ∙GFP | 0.2   320.247   3.214  9006.211  7463.562         17.5 #> 16    pSEVA634∙GFP | 0.5   774.054   0.247 20704.091 19571.651          5.5 #> 17   pSEVA634r∙GFP | 0.5   337.909   8.089  6952.687  6090.024         16.5 #> 18  pSEVA634rκ∙GFP | 0.5   351.644   4.845  9322.628  7720.204           18 #> 19      pSEVA634∙GFP | 1   779.134   0.462 19774.702 18757.659            6 #> 20     pSEVA634r∙GFP | 1   353.185   9.572  7189.597  5865.901         16.5 #> 21    pSEVA634rκ∙GFP | 1   338.827   5.016  9258.531  7551.009           18  # with HTML formatting DT::datatable(table_group_fluorescence_spline(res$flFit$flTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"],[\"pSEVA634∙GFP | 0\",\"pSEVA634r∙GFP | 0\",\"pSEVA634rκ∙GFP | 0\",\"pSEVA634∙GFP | 0.01\",\"pSEVA634r∙GFP | 0.01\",\"pSEVA634rκ∙GFP | 0.01\",\"pSEVA634∙GFP | 0.05\",\"pSEVA634r∙GFP | 0.05\",\"pSEVA634rκ∙GFP | 0.05\",\"pSEVA634∙GFP | 0.1\",\"pSEVA634r∙GFP | 0.1\",\"pSEVA634rκ∙GFP | 0.1\",\"pSEVA634∙GFP | 0.2\",\"pSEVA634r∙GFP | 0.2\",\"pSEVA634rκ∙GFP | 0.2\",\"pSEVA634∙GFP | 0.5\",\"pSEVA634r∙GFP | 0.5\",\"pSEVA634rκ∙GFP | 0.5\",\"pSEVA634∙GFP | 1\",\"pSEVA634r∙GFP | 1\",\"pSEVA634rκ∙GFP | 1\"],[\"92.267\",\"30.773\",\"64.176\",\"242.558\",\"64.653\",\"205.58\",\"509.395\",\"204.032\",\"290.961\",\"670.985\",\"327.195\",\"335.244\",\"728.625\",\"346.268\",\"320.247\",\"774.054\",\"337.909\",\"351.644\",\"779.134\",\"353.185\",\"338.827\"],[\"15.547\",\"31.287\",\"20.813\",\"14.983\",\"21.671\",\"12.566\",\"6.96\",\"13.436\",\"4.674\",\"0.373\",\"9.868\",\"3.651\",\"0.554\",\"9.758\",\"3.214\",\"0.247\",\"8.089\",\"4.845\",\"0.462\",\"9.572\",\"5.016\"],[\"3427.126\",\"1470.992\",\"2196.189\",\"7592.801\",\"2384.304\",\"4820.287\",\"17121.214\",\"5206.543\",\"7768.189\",\"20079.01\",\"6840.378\",\"9191.863\",\"20481.098\",\"7000.845\",\"9006.211\",\"20704.091\",\"6952.687\",\"9322.628\",\"19774.702\",\"7189.597\",\"9258.531\"],[\"2135.701\",\"282.714\",\"630.596\",\"6072.997\",\"1128.582\",\"3196.134\",\"15989.029\",\"3800.827\",\"6299.664\",\"18869.536\",\"5652.539\",\"7723.924\",\"19589.302\",\"5718.068\",\"7463.562\",\"19571.651\",\"6090.024\",\"7720.204\",\"18757.659\",\"5865.901\",\"7551.009\"],[\"20.5\",\"20\",\"16\",\"23.5\",\"19\",\"18\",\"21.5\",\"17.5\",\"13\",\"6\",\"17\",\"17.5\",\"6.5\",\"16.5\",\"17.5\",\"5.5\",\"16.5\",\"18\",\"6\",\"16.5\",\"18\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>slope<sub>max<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>x(slope<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"Generate grouped results table linear fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"","code":"table_group_growth_linear(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"data frame grouped linear fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for linear fits with average and standard deviations — table_group_growth_linear","text":"","code":"# \\donttest{ # Create random growth data set rnd.data <- rdm.data(d = 30, mu = 0.6, A = 4.5, label = \"Test2\")   # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"l\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_linear(res$gcFit$gcTable) #>     Sample|Conc.         mumax            tD       lagtime            dY #> 1      Test2 | 0 0.462 ± 0.007 1.501 ± 0.023 3.927 ± 0.266  3.764 ± 0.18 #> 2  Test2 | 0.039  0.396 ± 0.01 1.751 ± 0.045 4.122 ± 0.334   1.9 ± 0.034 #> 3  Test2 | 0.059 0.347 ± 0.006 1.996 ± 0.035 4.024 ± 0.091 1.556 ± 0.088 #> 4  Test2 | 0.088 0.293 ± 0.015 2.367 ± 0.122  3.789 ± 0.31 1.114 ± 0.136 #> 5   Test2 | 0.13 0.212 ± 0.008 3.276 ± 0.131  3.28 ± 0.398 0.852 ± 0.029 #> 6    Test2 | 0.2  0.12 ± 0.006 5.794 ± 0.291 2.704 ± 0.233  0.38 ± 0.057 #> 7    Test2 | 0.3                                                         #> 8   Test2 | 0.44                                                         #> 9   Test2 | 0.67                                                         #> 10     Test2 | 1                                                         #>            Y_max t_start(mumax)   t_end(mumax) #> 1   3.815 ± 0.18  6.417 ± 0.289 10.417 ± 0.289 #> 2  1.951 ± 0.032  7.583 ± 0.144  10.417 ± 0.52 #> 3   1.61 ± 0.089  7.167 ± 0.382 10.167 ± 0.629 #> 4   1.163 ± 0.14  7.583 ± 0.629  10.667 ± 0.52 #> 5  0.906 ± 0.026  9.167 ± 0.289    11.5 ± 0.25 #> 6  0.432 ± 0.062  8.833 ± 2.126 10.833 ± 2.126 #> 7                                              #> 8                                              #> 9                                              #> 10                                              # with HTML formatting DT::datatable(table_group_growth_linear(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[\"Test2 | 0\",\"Test2 | 0.039\",\"Test2 | 0.059\",\"Test2 | 0.088\",\"Test2 | 0.13\",\"Test2 | 0.2\",\"Test2 | 0.3\",\"Test2 | 0.44\",\"Test2 | 0.67\",\"Test2 | 1\"],[\"0.462 ± 0.007\",\"0.396 ± 0.01\",\"0.347 ± 0.006\",\"0.293 ± 0.015\",\"0.212 ± 0.008\",\"0.12 ± 0.006\",\"\",\"\",\"\",\"\"],[\"1.501 ± 0.023\",\"1.751 ± 0.045\",\"1.996 ± 0.035\",\"2.367 ± 0.122\",\"3.276 ± 0.131\",\"5.794 ± 0.291\",\"\",\"\",\"\",\"\"],[\"3.927 ± 0.266\",\"4.122 ± 0.334\",\"4.024 ± 0.091\",\"3.789 ± 0.31\",\"3.28 ± 0.398\",\"2.704 ± 0.233\",\"\",\"\",\"\",\"\"],[\"3.764 ± 0.18\",\"1.9 ± 0.034\",\"1.556 ± 0.088\",\"1.114 ± 0.136\",\"0.852 ± 0.029\",\"0.38 ± 0.057\",\"\",\"\",\"\",\"\"],[\"3.815 ± 0.18\",\"1.951 ± 0.032\",\"1.61 ± 0.089\",\"1.163 ± 0.14\",\"0.906 ± 0.026\",\"0.432 ± 0.062\",\"\",\"\",\"\",\"\"],[\"6.417 ± 0.289\",\"7.583 ± 0.144\",\"7.167 ± 0.382\",\"7.583 ± 0.629\",\"9.167 ± 0.289\",\"8.833 ± 2.126\",\"\",\"\",\"\",\"\"],[\"10.417 ± 0.289\",\"10.417 ± 0.52\",\"10.167 ± 0.629\",\"10.667 ± 0.52\",\"11.5 ± 0.25\",\"10.833 ± 2.126\",\"\",\"\",\"\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>t<sub>start<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n      <th>t<sub>end<\\/sub><br>(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"Generate grouped results table parametric fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"","code":"table_group_growth_model(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"data frame grouped model fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for parametric fits with average and standard deviations — table_group_growth_model","text":"","code":"# Create random growth data set rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")   # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"m\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_model(res$gcFit$gcTable) #>     Sample|Conc.         mumax             tD       lagtime         Y_max #> 1      Test1 | 0 0.804 ± 0.004  0.862 ± 0.005 5.197 ± 0.072 4.793 ± 0.091 #> 2  Test1 | 0.017 0.793 ± 0.003  0.874 ± 0.003 5.348 ± 0.055 4.279 ± 0.033 #> 3  Test1 | 0.026 0.778 ± 0.008  0.891 ± 0.009  5.24 ± 0.127  4.11 ± 0.096 #> 4  Test1 | 0.039 0.769 ± 0.005  0.901 ± 0.006 5.469 ± 0.093 3.975 ± 0.083 #> 5  Test1 | 0.059 0.729 ± 0.011  0.951 ± 0.014 5.388 ± 0.211 3.705 ± 0.042 #> 6  Test1 | 0.088 0.675 ± 0.009  1.027 ± 0.013 5.645 ± 0.183 3.447 ± 0.028 #> 7   Test1 | 0.13 0.586 ± 0.004  1.182 ± 0.009 5.719 ± 0.203 3.148 ± 0.062 #> 8    Test1 | 0.2 0.441 ± 0.008  1.571 ± 0.027 6.218 ± 0.075 2.666 ± 0.018 #> 9    Test1 | 0.3 0.229 ± 0.074  3.322 ± 1.331 5.158 ± 2.038 2.207 ± 0.047 #> 10  Test1 | 0.44 0.139 ± 0.008    5.015 ± 0.3 6.673 ± 0.391 1.601 ± 0.112 #> 11  Test1 | 0.67 0.043 ± 0.031 21.451 ± 10.93  2.22 ± 4.491  1.35 ± 0.498 #> 12     Test1 | 1                                                          #>               dY #> 1  4.791 ± 0.082 #> 2  4.286 ± 0.037 #> 3  4.122 ± 0.073 #> 4  3.966 ± 0.064 #> 5  3.707 ± 0.042 #> 6   3.45 ± 0.036 #> 7  3.145 ± 0.063 #> 8  2.655 ± 0.012 #> 9  2.111 ± 0.075 #> 10 1.306 ± 0.061 #> 11 0.557 ± 0.024 #> 12                # with HTML formatting DT::datatable(table_group_growth_model(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"Test1 | 0\",\"Test1 | 0.017\",\"Test1 | 0.026\",\"Test1 | 0.039\",\"Test1 | 0.059\",\"Test1 | 0.088\",\"Test1 | 0.13\",\"Test1 | 0.2\",\"Test1 | 0.3\",\"Test1 | 0.44\",\"Test1 | 0.67\",\"Test1 | 1\"],[\"0.804 ± 0.004\",\"0.793 ± 0.003\",\"0.778 ± 0.008\",\"0.769 ± 0.005\",\"0.729 ± 0.011\",\"0.675 ± 0.009\",\"0.586 ± 0.004\",\"0.441 ± 0.008\",\"0.229 ± 0.074\",\"0.139 ± 0.008\",\"0.043 ± 0.031\",\"\"],[\"0.862 ± 0.005\",\"0.874 ± 0.003\",\"0.891 ± 0.009\",\"0.901 ± 0.006\",\"0.951 ± 0.014\",\"1.027 ± 0.013\",\"1.182 ± 0.009\",\"1.571 ± 0.027\",\"3.322 ± 1.331\",\"5.015 ± 0.3\",\"21.451 ± 10.93\",\"\"],[\"5.197 ± 0.072\",\"5.348 ± 0.055\",\"5.24 ± 0.127\",\"5.469 ± 0.093\",\"5.388 ± 0.211\",\"5.645 ± 0.183\",\"5.719 ± 0.203\",\"6.218 ± 0.075\",\"5.158 ± 2.038\",\"6.673 ± 0.391\",\"2.22 ± 4.491\",\"\"],[\"4.793 ± 0.091\",\"4.279 ± 0.033\",\"4.11 ± 0.096\",\"3.975 ± 0.083\",\"3.705 ± 0.042\",\"3.447 ± 0.028\",\"3.148 ± 0.062\",\"2.666 ± 0.018\",\"2.207 ± 0.047\",\"1.601 ± 0.112\",\"1.35 ± 0.498\",\"\"],[\"4.791 ± 0.082\",\"4.286 ± 0.037\",\"4.122 ± 0.073\",\"3.966 ± 0.064\",\"3.707 ± 0.042\",\"3.45 ± 0.036\",\"3.145 ± 0.063\",\"2.655 ± 0.012\",\"2.111 ± 0.075\",\"1.306 ± 0.061\",\"0.557 ± 0.024\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>dY<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"Generate grouped results table spline fits average standard deviations","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"","code":"table_group_growth_spline(gcTable, html = FALSE)"},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"gcTable object class gcTable html (Logical) column headers contain html formatting?","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"data frame grouped spline fit results. Empty cells indicate reliable fit determined.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/table_group_growth_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grouped results table for spline fits with average and standard deviations — table_group_growth_spline","text":"","code":"# Create random growth data set rnd.data <- rdm.data(d = 35, mu = 0.8, A = 5, label = \"Test1\")  # Run growth curve analysis workflow res <- growth.workflow(time = rnd.data$time,                        data = rnd.data$data,                        fit.opt = \"s\",                        ec50 = FALSE,                        export.res = FALSE,                        parallelize = FALSE,                        suppress.messages = TRUE)  table_group_growth_spline(res$gcFit$gcTable) #>     Sample|Conc.         mumax             tD       lagtime         Y_max #> 1      Test1 | 0 0.669 ± 0.012  1.037 ± 0.019 4.474 ± 0.128 6.119 ± 0.261 #> 2  Test1 | 0.017 0.614 ± 0.004  1.129 ± 0.008 4.262 ± 0.167 3.705 ± 0.431 #> 3  Test1 | 0.026 0.601 ± 0.006  1.154 ± 0.011  4.48 ± 0.264 3.166 ± 0.395 #> 4  Test1 | 0.039 0.574 ± 0.001  1.207 ± 0.003   4.64 ± 0.11 2.667 ± 0.258 #> 5  Test1 | 0.059 0.529 ± 0.004   1.311 ± 0.01 4.564 ± 0.261 2.087 ± 0.133 #> 6  Test1 | 0.088  0.48 ± 0.006  1.445 ± 0.018 4.544 ± 0.349 1.681 ± 0.048 #> 7   Test1 | 0.13 0.387 ± 0.003  1.791 ± 0.012   4.501 ± 0.1  1.278 ± 0.09 #> 8    Test1 | 0.2  0.263 ± 0.01  2.639 ± 0.099 3.902 ± 0.305  0.74 ± 0.069 #> 9    Test1 | 0.3 0.147 ± 0.001  4.728 ± 0.024 3.198 ± 0.099 0.434 ± 0.017 #> 10  Test1 | 0.44 0.068 ± 0.002 10.144 ± 0.301 1.762 ± 0.371 0.193 ± 0.011 #> 11  Test1 | 0.67 0.035 ± 0.003 19.701 ± 1.398 0.422 ± 0.573  0.09 ± 0.012 #> 12     Test1 | 1                                                          #>               dY       t(mumax) #> 1  6.071 ± 0.262  8.083 ± 0.144 #> 2  3.651 ± 0.427           7.75 #> 3  3.114 ± 0.392  7.917 ± 0.144 #> 4  2.612 ± 0.255              8 #> 5  2.037 ± 0.131    8.25 ± 0.25 #> 6  1.631 ± 0.049  8.167 ± 0.382 #> 7  1.224 ± 0.091  8.583 ± 0.382 #> 8  0.688 ± 0.064       9 ± 0.75 #> 9  0.383 ± 0.015 10.583 ± 1.041 #> 10  0.141 ± 0.01 11.083 ± 3.215 #> 11 0.039 ± 0.007  2.167 ± 2.504 #> 12                               # with HTML formatting DT::datatable(table_group_growth_spline(res$gcFit$gcTable, html = TRUE),               escape = FALSE) # Do not escape HTML entities  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"Test1 | 0\",\"Test1 | 0.017\",\"Test1 | 0.026\",\"Test1 | 0.039\",\"Test1 | 0.059\",\"Test1 | 0.088\",\"Test1 | 0.13\",\"Test1 | 0.2\",\"Test1 | 0.3\",\"Test1 | 0.44\",\"Test1 | 0.67\",\"Test1 | 1\"],[\"0.669 ± 0.012\",\"0.614 ± 0.004\",\"0.601 ± 0.006\",\"0.574 ± 0.001\",\"0.529 ± 0.004\",\"0.48 ± 0.006\",\"0.387 ± 0.003\",\"0.263 ± 0.01\",\"0.147 ± 0.001\",\"0.068 ± 0.002\",\"0.035 ± 0.003\",\"\"],[\"1.037 ± 0.019\",\"1.129 ± 0.008\",\"1.154 ± 0.011\",\"1.207 ± 0.003\",\"1.311 ± 0.01\",\"1.445 ± 0.018\",\"1.791 ± 0.012\",\"2.639 ± 0.099\",\"4.728 ± 0.024\",\"10.144 ± 0.301\",\"19.701 ± 1.398\",\"\"],[\"4.474 ± 0.128\",\"4.262 ± 0.167\",\"4.48 ± 0.264\",\"4.64 ± 0.11\",\"4.564 ± 0.261\",\"4.544 ± 0.349\",\"4.501 ± 0.1\",\"3.902 ± 0.305\",\"3.198 ± 0.099\",\"1.762 ± 0.371\",\"0.422 ± 0.573\",\"\"],[\"6.119 ± 0.261\",\"3.705 ± 0.431\",\"3.166 ± 0.395\",\"2.667 ± 0.258\",\"2.087 ± 0.133\",\"1.681 ± 0.048\",\"1.278 ± 0.09\",\"0.74 ± 0.069\",\"0.434 ± 0.017\",\"0.193 ± 0.011\",\"0.09 ± 0.012\",\"\"],[\"6.071 ± 0.262\",\"3.651 ± 0.427\",\"3.114 ± 0.392\",\"2.612 ± 0.255\",\"2.037 ± 0.131\",\"1.631 ± 0.049\",\"1.224 ± 0.091\",\"0.688 ± 0.064\",\"0.383 ± 0.015\",\"0.141 ± 0.01\",\"0.039 ± 0.007\",\"\"],[\"8.083 ± 0.144\",\"7.75\",\"7.917 ± 0.144\",\"8\",\"8.25 ± 0.25\",\"8.167 ± 0.382\",\"8.583 ± 0.382\",\"9 ± 0.75\",\"10.583 ± 1.041\",\"11.083 ± 3.215\",\"2.167 ± 2.504\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Sample|Conc.<\\/th>\\n      <th>mu<sub>max<\\/sub><\\/th>\\n      <th>t<sub>D<\\/sub><\\/th>\\n      <th>lagtime<\\/th>\\n      <th>dY<\\/th>\\n      <th>y<sub>max<\\/sub><\\/th>\\n      <th>t(mu<sub>max<\\/sub>)<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two dataframes like a zip-fastener — zipFastener","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"Combine rows columns two dataframes alternating manner","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"","code":"zipFastener(df1, df2, along = 2)"},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"df1 first dataframe. df2 second dataframe dimensions df1. along 1 alternate rows 2 alternate columns.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"dataframe combined rows (columns) df1 df2.","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"Mark Heckmann","code":""},{"path":"https://nicwir.github.io/QurvE/reference/zipFastener.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two dataframes like a zip-fastener — zipFastener","text":"","code":"# data frames equal dimensions df1 <- plyr::rdply(3, rep('o',4))[ ,-1] df2 <- plyr::rdply(3, rep('X',4))[ ,-1]  zipFastener(df1, df2) #>   V1 V1.1 V2 V2.1 V3 V3.1 V4 V4.1 #> 1  o    X  o    X  o    X  o    X #> 2  o    X  o    X  o    X  o    X #> 3  o    X  o    X  o    X  o    X zipFastener(df1, df2, 2) #>   V1 V1.1 V2 V2.1 V3 V3.1 V4 V4.1 #> 1  o    X  o    X  o    X  o    X #> 2  o    X  o    X  o    X  o    X #> 3  o    X  o    X  o    X  o    X zipFastener(df1, df2, 1) #>   V1 V2 V3 V4 #> 1  o  o  o  o #> 4  X  X  X  X #> 2  o  o  o  o #> 5  X  X  X  X #> 3  o  o  o  o #> 6  X  X  X  X  # data frames unequal in no. of rows df1 <- plyr::rdply(10, rep('o',4))[ ,-1] zipFastener(df1, df2, 1) #>    V1 V2 V3 V4 #> 1   o  o  o  o #> 11  X  X  X  X #> 2   o  o  o  o #> 12  X  X  X  X #> 3   o  o  o  o #> 13  X  X  X  X #> 4   o  o  o  o #> 5   o  o  o  o #> 6   o  o  o  o #> 7   o  o  o  o #> 8   o  o  o  o #> 9   o  o  o  o #> 10  o  o  o  o zipFastener(df2, df1, 1) #>    V1 V2 V3 V4 #> 1   X  X  X  X #> 4   o  o  o  o #> 2   X  X  X  X #> 5   o  o  o  o #> 3   X  X  X  X #> 6   o  o  o  o #> 7   o  o  o  o #> 8   o  o  o  o #> 9   o  o  o  o #> 10  o  o  o  o #> 11  o  o  o  o #> 12  o  o  o  o #> 13  o  o  o  o  # data frames unequal in no. of columns df2 <- plyr::rdply(10, rep('X',3))[ ,-1] zipFastener(df1, df2) #>    V1 V1.1 V2 V2.1 V3 V3.1 V4 #> 1   o    X  o    X  o    X  o #> 2   o    X  o    X  o    X  o #> 3   o    X  o    X  o    X  o #> 4   o    X  o    X  o    X  o #> 5   o    X  o    X  o    X  o #> 6   o    X  o    X  o    X  o #> 7   o    X  o    X  o    X  o #> 8   o    X  o    X  o    X  o #> 9   o    X  o    X  o    X  o #> 10  o    X  o    X  o    X  o zipFastener(df2, df1, 2) #>    V1 V1.1 V2 V2.1 V3 V3.1 V4 #> 1   X    o  X    o  X    o  o #> 2   X    o  X    o  X    o  o #> 3   X    o  X    o  X    o  o #> 4   X    o  X    o  X    o  o #> 5   X    o  X    o  X    o  o #> 6   X    o  X    o  X    o  o #> 7   X    o  X    o  X    o  o #> 8   X    o  X    o  X    o  o #> 9   X    o  X    o  X    o  o #> 10  X    o  X    o  X    o  o"},{"path":[]},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"enhancements-1-0-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"QurvE 1.0.1","text":"Report template .Rmd files now copied tempdir() rendering avoid bugs restrictive write permissions. shiny app: Don’t show “Select Read fluorescence normalization” Fluorescence [Ignore].","code":""},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"QurvE 1.0.1","text":"Issue #4: shiny app, checkbox ‘sort concentration’ show loading old RData file. Fixed bug Gen5/Gen6 parser one read type present.","code":""},{"path":"https://nicwir.github.io/QurvE/news/index.html","id":"qurve-10","dir":"Changelog","previous_headings":"","what":"QurvE 1.0","title":"QurvE 1.0","text":"CRAN release: 2023-01-12 Added NEWS.md file track changes package.","code":""}]
